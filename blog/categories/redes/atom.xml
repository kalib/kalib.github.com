<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Redes | Marcelo Cavalcante Rocha ~]]></title>
  <link href="http://blog.marcelocavalcante.net/blog/categories/redes/atom.xml" rel="self"/>
  <link href="http://blog.marcelocavalcante.net/"/>
  <updated>2013-12-27T09:45:44-03:00</updated>
  <id>http://blog.marcelocavalcante.net/</id>
  <author>
    <name><![CDATA[Marcelo Cavalcante Rocha - Kalib]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Correção do Bug entre Kernel Linux e Placas Broadcom]]></title>
    <link href="http://blog.marcelocavalcante.net/blog/2013/09/03/correcao-do-bug-entre-kernel-linux-e-placas-broadcom/"/>
    <updated>2013-09-03T20:33:00-03:00</updated>
    <id>http://blog.marcelocavalcante.net/blog/2013/09/03/correcao-do-bug-entre-kernel-linux-e-placas-broadcom</id>
    <content type="html"><![CDATA[<p><img class="left" src="/imgs/catchbug.jpg" title="&lsquo;Catching Big&rsquo;" >
<strong>B</strong>ug capturado e tratado!</p>

<p><strong>D</strong>iversas pessoas se depararam com intermináveis erros de <em>kernel panic</em> após atualizar seu kernel para a versão <em>3.10.6</em> (e posteriores) quando utilizavam placas wireless da <em>Broadcom</em>. O erro reportado foi tratado e, apesar de ainda não estar resolvido no último kernel lançado, <em>3.10.10</em>, já se encontra na árvore de <em>Linus Torvalds</em>, conforme código e correção podem ser vistos através do seguinte link:</p>

<p><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=2dfca312a91631311c1cf7c090246cc8103de038">mac80211: add a flag to indicate CCK support for HT clients</a></p>

<p><strong>O</strong> problema se dava com o módulo brcm80211 que não conseguia lidar adequadamente com o envio de frames com taxas CCK como parte de uma sessão A-MPDU. Apesar de outros drivers/módulos da broadcom conseguirem conectar-se sem o kernel panic logo na inicialização do sistema, estes ainda podem enfrentar problemas em outros momentos sem esta correção. O patch corrige o erro reportado com módulos brcmsmac bem como outros.</p>

<p><strong>A</strong>tualmente estou utilizando o último kernel disponibilizado, o <em>3.10.10</em>. Apesar de a correção ainda não ter saído nesta versão, estou utilizando uma versão do kernel com o patch já aplicado.</p>

<p><strong>E</strong>speremos pelo kernel <em>3.11</em> que deverá ser lançado nos próximos dias e que, por sua vez, deverá resolver este problema definitivamente.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tornando Seu SSH Mais Seguro]]></title>
    <link href="http://blog.marcelocavalcante.net/blog/2013/08/28/tornando-seu-ssh-mais-seguro/"/>
    <updated>2013-08-28T11:20:00-03:00</updated>
    <id>http://blog.marcelocavalcante.net/blog/2013/08/28/tornando-seu-ssh-mais-seguro</id>
    <content type="html"><![CDATA[<p><img class="left" src="/imgs/openssh.png" title="&lsquo;OpenSSH&rsquo;" >
<strong>O</strong> <em>SSH</em> (Secure Shell) é um dos protocolos mais utilizados atualmente para transferência de arquivos ou mesmo conexão remota, principalmente em ambientes Linux/Unix e, por si só, já tem se provado ser confiável e seguro. O mesmo passou a ser o principal substituto ao <em>TELNET</em> por possuir a vantagem da criptografia na conexão entre o cliente e o servidor, além da possibilidade de criação de túneis, o que chamamos de <em>tunneling</em>, oferecendo assim a capacidade de redirecionar pacotes de dados. Mas não é por isso que devemos nos descuidar&hellip;</p>

<p><strong>S</strong>empre existe espaço para melhorias.</p>

<p><strong>A</strong>s configurações do servidor SSH, geralmente, ficam localizadas em <em>/etc/ssh/sshd_config</em>. Vale lembrar que a cada alteração feita neste arquivo será necessário reiniciar o serviço SSH para que suas alterações possam ser efetivadas.</p>

<p><strong>I</strong>ndo ao que interessa:</p>

<p><strong>1- Altere a porta de escuta do SSH</strong></p>

<p><strong>P</strong>or padrão o SSH aceita conexões na porta 22, portanto é importante alterar esta porta para dificultar as tentativas de ataques aleatórios de brute-force que buscam máquinas que disponibilizam o SSH através da porta padrão. Preferivelmente, é interessante optar por uma porta posterior a 1024, visto que a maioria dos softwares de escaneamento de portas e serviços não fazem uma varredura por portas muito altas. Esta é geralmente uma das primeiras configurações no arquivo <em>/etc/ssh/sshd_config</em>, conforme pode ser visto abaixo:</p>

<p><code>
 Port 22
</code></p>

<p><strong>2- Permita apenas o protocolo SSH 2</strong></p>

<p><strong>D</strong>ependendo de sua distribuição Linux, o padrão poderá ser a utilização de ambos os protocolos, 1 e 2. A versão 1 do protocolo SSH possui vulnerabilidades bastante conhecidas, portanto é preferível que utilize apenas o protocolo de versão 2, diminuindo assim suas chances de um ataque de inserção, por exemplo, conforme possível com a versão 1 do protocolo. Procure pela seguinte linha de configuração e altere-a mantendo apenas a opção <em>2</em>:</p>

<p><code>
 Protocol 2,1
</code></p>

<p><strong>3- Decida quais usuários poderão logar-se via SSH</strong></p>

<p><strong>P</strong>ermitir que qualquer usuário possa logar-se via SSH não é aconselhável, da mesma forma que permitir que o usuário root efetue login via SSH também é extremamante desencorajado devido às vulnerabilidades envolvidas. Por possuírem determinados (ou todos, no caso do root) privilégios no sistema, alguns usuários simplesmente não devem ter permissão de login via SSH, evitando assim que alguém utilize ferramentas de brute-force e consiga, por quebra de senha, logar-se em seu servidor com um usuário privilegiado. Para proibir o login do usuário root via SSH, altere a seguinte linha para <em>no</em>:</p>

<p><code>
 PermitRootLogin yes
</code></p>

<p><strong>P</strong>ara definir quais usuários poderão ter acesso via SSH, insira o nome dos mesmos na seguinte linha, conforme exemplo abaixo:</p>

<p><code>
 AllowUsers usuario1 usuario2 usuario3
</code></p>

<p><strong>4- Utilize uma chave pública DSA como mecanismo de autenticação</strong></p>

<p><strong>A</strong>o invés de utilizar nomes de usuários e senhas para autenticar-se via SSH, você pode utilizar chaves públicas DSA. Outra opção é utilizar ambos os mecanismos, usuário e senha + chave. Uma das maiores vantagens de se utilizar chaves como mecanismo de autenticação é que você impossibilitará o acesso indevido através de ataques de força bruta ou brute force, pois você não precisará de um login e senha para logar-se ao servidor ou estação. Ao invés disso, você utilizará um par de chaves &ndash; uma pública e uma privada. No cenário de chaves DSA, a chave privada fica em sua máquina e uma cópia da chave pública fica no servidor que você deseja acessar via SSH.</p>

<p><strong>A</strong>o tentar logar-se em um servidor configurado para autenticação via chave DSA, o mesmo verifica as chaves de ambos os lados e, se elas combinarem, autoriza seu login, caso contrário nega sua conexão.</p>

<p><strong>N</strong>o arquivo de configuração do servidor SSH você irá procurar os seguintes parâmetros e deixá-los da seguinte forma:</p>

<p><code>
 RSAAuthentication yes
 PubkeyAuthentication yes
 AuthorizedKeysFile %h/.ssh/authorized_keys
</code></p>

<p><strong>C</strong>aso você deseje utilizar <em>apenas</em> a autenticação por chaves DSA, você precisará desabilitar a autenticação por senha, deixando como <em>no</em> o seguinte parâmetro:</p>

<p><code>
 PasswordAuthentication no
</code></p>

<p><strong>A</strong>gora que as regras de configuração para a autenticação via chaves foram criadas, vamos criar as chaves em si.</p>

<p><strong>E</strong>m sua máquina, vamos digitar o seguinte comando para a criação de suas chaves pública e privada:</p>

<p><code>
 $ ssh-keygen -t dsa -C "$(whoami)@$(hostname)-$(date -I)"
</code></p>

<p><strong>O</strong> sistema lhe perguntará se você deseja escolher um diretório no qual salvar suas chaves. Caso você não especifique nenhum, ele salvará no diretório .ssh que se encontra no home de seu usuário <em>(~/.ssh/id_dsa)</em>. Em seguida lhe perguntará se você deseja criar uma senha para sua chave (não é obrigatório).</p>

<p><strong>A</strong>o finalizar este procedimento você receberá a confirmação de que o procedimento foi realizado. Algo similar a isto:</p>

<p><code>
 Your identification has been saved in /home/username/.ssh/id_dsa.
 Your public key has been saved in /home/username/.ssh/id_dsa.pub.
 The key fingerprint is:
 dd:15:ee:24:20:14:11:01:b8:72:a2:0f:99:4c:79:7f username@localhost-2013-08-28
 The key's randomart image is:
 +--[DSA  1024]---+
 |     ..oB=.   .  |
 |    .    . . . . |
 |  .  .      . +  |
 | oo.o    . . =   |
 |o+.+.   S . . .  |
 |=.   . E         |
 | o    .          |
 |  .              |
 |                 |
 +-----------------+
</code></p>

<p><strong>O</strong> próximo passo é copiar a sua chave pública para o servidor que você deseja acessar via SSH. Você pode copiar de algumas formas diferentes:</p>

<p><strong>4.1 &ndash; Copiando manualmente</strong></p>

<p><strong>C</strong>opie o conteúdo retornado através do seguinte comando:</p>

<p><code>
 $ cat ~/.ssh/id_dsa.pub
</code></p>

<p><strong>O</strong> retorno será algo similar a isto:</p>

<p><code>
 ssh-dss AAAAB3NzaC1kc3MAAACBAKWJtlUANTuqKy1NN4bb5qBJLZVMnR+nr84hk7EWnHmpJgipRZ8Y/tUDJTpCab
 GwoMNYmPZaz62Nm5/F5Nl9yzgMmxfGja8OYt3bwir6A379NOWFM2NBq7Q107uH4L+MFszXKoCVn6rM9SddkAJL1V66
 eGX+Y+r1o/8wG773h9P5AAAAFQDh09qovWFzKJk0E58c0oRz9S4UAQAAAIBuVxw+LZDrWVVCLr4WMubRPJuFzXqqHN
 re9RUZ2kMrUENnAenYyJgjcBg7uJJA/wMfn7Oe32e4hvpU7SsXEUf7xT1sKb/UFyX9qTr5G0kkU6t8IYPjIQaqRIOQ
 mnRiqm7JCDd1GTAFU9n/ocK4sNPZDL8KeEEquZmk+ihKcu9FLwAAAIBlz+K7fcZSlA5hKewHOF7fA9IdwdMsbc2Ri7
 bSw4Fv70rQeMnYYUDeHQQJHeJJyScmuHswordGXYKe2tsf7fYn11CW46P9WxCRcargojxJNrRHlF5WiK15fhNMLtfx
 7/+CSmoXnEUCw8uCCBVduGLyevZ3WC+FEx7/aqJjuUCNJg== username@localhost-2013-08-28
</code></p>

<p><strong>É</strong> exatamente este conteúdo que precisa ser copiado.</p>

<p><strong>E</strong>m seguida você precisará colar este conteúdo no servidor desejado, porém incrementando dentro do seguinte arquivo (no servidor): <em>~/.ssh/authorized_keys</em></p>

<p><strong>P</strong>ara facilitar, você poderá já ter copiado o arquivo da chave completo para o servidor. Veja nos próximos métodos algumas formas de o fazer.</p>

<p><strong>4.2 &ndash; Método Simples &ndash; Deve ser usado antes de configurar o servidor para permitir autenticação por chaves</strong></p>

<p><strong>S</strong>e o seu arquivo de chave é <em>~/.ssh/id_dsa</em>, você poderá simplesmente digitar o seguinte comando para enviar a chave para o servidor:</p>

<p><code>
 $ ssh-copy-id servidor-remoto.com.br
</code></p>

<p><strong>C</strong>aso o nome de usuário em sua máquina seja diferente do nome de usuário no servidor, lembre-se de adicionar o nome do usuário do servidor antes do endereço do mesmo:</p>

<p><code>
 $ ssh-copy-id nome-de-usuario@servidor-remoto.com.br
</code></p>

<p><strong>C</strong>aso o servidor esteja recebendo as conexões SSH em uma porta diferente da padrão (22), utilize (supondo que estamos utilizando a 221):</p>

<p><code>
 $ ssh-copy-id -p 221 nome-de-usuario@servidor-remoto.com.br
</code></p>

<p><strong>4.3 &ndash; Método Tradicional &ndash; Deve ser usado antes de configurar o servidor para permitir autenticação por chaves</strong></p>

<p><strong>P</strong>or padrão a chave pública precisa ser concatenada no arquivo <em>~/.ssh/authorized_keys</em>. Comece copiando a chave pública para o servidor remoto:</p>

<p><code>
 $ scp ~/.ssh/id_dsa.pub nome-do-usuario@servidor-remoto.com.br:
</code></p>

<p><strong>O</strong> comando acima copiará a chave pública para o diretório home do usuário citado para o servidor via scp. Não esqueça de inluir o <em>:</em> ao final do endereço do servidor.</p>

<p><strong>C</strong>aso o diretório <em>~/.ssh</em> ainda não exista no servidor, você precisará criá-lo. O mesmo com o arquivo <em>authorized_keys</em>:</p>

<p><code>
 $ ssh nome-do-usuario@servidor-remoto.com.br
 nome-do-usuario@servidor-remoto's password:
 $ mkdir ~/.ssh
 $ cat ~/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys
 $ rm ~/id_dsa.pub
 $ chmod 600 ~/.ssh/authorized_keys
</code></p>

<p><strong>O</strong>s últimos dois comandos removem a chave pública do diretório do servidor e definem as permissões para o arquivo <em>authorized_keys</em> de forma que ele apenas possa ser lido ou escrito por você, o dono.</p>

<p><strong>P</strong>ronto, sua chave já está no servidor após seguir uma das dicas acima.</p>

<p><strong>L</strong>embre-se sempre de reiniciar o serviço ssh após efetuar qualquer alteração de configuração.</p>

<p><strong>D</strong>icas simples de serem implementadas mas que irão melhorar bastante a segurança de seu servidor SSH. ;]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Incompatibilidade: Kernel Linux 3.10.6 e Placa Wireless Broadcom Resultam em Kernel Panic]]></title>
    <link href="http://blog.marcelocavalcante.net/blog/2013/08/14/incompatibilidade-kernel-linux-3-dot-10-dot-6-e-placa-wireless-broadcom/"/>
    <updated>2013-08-14T15:04:00-03:00</updated>
    <id>http://blog.marcelocavalcante.net/blog/2013/08/14/incompatibilidade-kernel-linux-3-dot-10-dot-6-e-placa-wireless-broadcom</id>
    <content type="html"><![CDATA[<p><img class="center" src="/imgs/kernel_panic.gif" title="&lsquo;kernel_panic&rsquo;" ></p>

<p><strong>K</strong>ernel Panic!</p>

<p><strong>F</strong>oi com isto que me deparei logo pela manhã ao chegar no trabalho ao ligar meu notebook.</p>

<p><strong>O</strong>ntem rodei o habitual <em># pacman -Syu</em> para atualizar meu Arch Linux. Dentre as atualizações estava a nova versão estável do kernel linux: 3.10.6</p>

<p><strong>H</strong>oje descobri que esta versão estava resultando em kernel panic para os usuários de placas wireless <em>Broadcom</em>. Sim, sou um deles.</p>

<p><strong>A</strong>pós algumas buscas em logs, percebi que o problema estava se dando com minha placa wireless. Logo ao iniciar o notebook, após alguns segundos, tudo travava e eu recebia o aviso de <strong>kernel panic</strong>.</p>

<p><strong>D</strong>esabilitando minha placa wireless consegui manter o notebook funcionando normalmente. Ao pesquisar, percebi que tratava-se de bug nesta versão do kernel.</p>

<p><strong>S</strong>olução? Downgrade no kernel linux.</p>

<p><strong>P</strong>ara quem ainda possui a versão anterior, <em>3.10.5</em> no diretório de cache, basta executar a instalação local com o pacman.</p>

<p><strong>C</strong>om o seguinte comando você pode descobrir se o pacote ainda se encontra em seu cache:</p>

<p><code>
 $ ls /var/cache/pacman/pkg/ | grep linux-3.10.5
</code></p>

<p><strong>C</strong>aso você ainda possua o pacote, basta digitar:</p>

<p><code>
 # pacman -U /var/cache/pacman/pkg/linux-3.10.5-1-x86_64.pkg.tar.xz
</code></p>

<p><strong>O</strong> nome do pacote poderá ser diferente para você. Estou utilizando a versão x64 do Arch.</p>

<p><strong>P</strong>or enquanto é melhor manter a versão anterior do kernel, ao menos até o lançamento da versão 3.11, na qual o problema já foi resolvido.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Netstat - Saiba o que está rolando em seu ambiente...]]></title>
    <link href="http://blog.marcelocavalcante.net/blog/2011/12/13/netstat-saiba-o-que-esta-rolando-em-seu-ambiente/"/>
    <updated>2011-12-13T08:38:50-03:00</updated>
    <id>http://blog.marcelocavalcante.net/blog/2011/12/13/netstat-saiba-o-que-esta-rolando-em-seu-ambiente</id>
    <content type="html"><![CDATA[<p><a href="http://pixelmaverick.com/wp-content/uploads/2009/11/brunocb-sherlock-holmes-tux-5975.png"><img src="http://pixelmaverick.com/wp-content/uploads/2009/11/brunocb-sherlock-holmes-tux-5975.png" alt="" /></a></p>

<hr />

<p><strong>S</strong>audações pessoal,</p>

<p><strong>Q</strong>ue tal saber um pouco mais sobre o que lhe cerca virtualmente? Conexões de rede às quais sua máquina está ligada, tabelas de roteamento, estatísticas de interfaces, conexões mascaradas, multicasting, etc.. ?</p>

<p><strong>A</strong>pesar de muitos conhecerem o netstat, poucos sabem que ele é capaz de tudo isso e mais um pouco. O netstat é sem sombra de dúvidas uma rica ferramenta que possui inúmeros comandos e combinações que sequer cabem em um artigo simples como este post.</p>

<p><strong>A</strong> ideia vai ser apenas apresentar algumas opções que podem ser bem interessantes no dia a dia de um administrador de redes/sysadmin.</p>

<p><strong>V</strong>amos lá&hellip;</p>

<p><strong>1.</strong> <strong>Listar todas as portas, incluindo portas que estão sendo escutadas e portas que não estão:</strong></p>

<p><strong>1.1</strong> Para listar TODAS as portas, podemos utilizar o parâmetro -a:
[root@tuxcaverna ~]# netstat -a
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
tcp        0      0 localhost.localdo:55481 <em>:</em>                     LISTEN
tcp        0      0 <em>:60634                 </em>:<em>                     LISTEN
tcp        0      0 </em>:6881                  <em>:</em>                     LISTEN
tcp        0      0 172.16.1.6:46714        gru03s08-in-f20.1:https TIME_WAIT
tcp        0      0 172.16.1.6:40899        gx-in-f138.1e1:www-http ESTABLISHED
tcp        0      0 localhost.localdo:48742 localhost.localdo:55481 ESTABLISHED
tcp        0      0 172.16.1.6:48643        125-233-152-234.d:21990 TIME_WAIT
tcp        0      0 172.16.1.6:46717        gru03s08-in-f20.1:https TIME_WAIT
tcp        0      0 172.16.1.6:57293        apache2-fungi.:www-http TIME_WAIT
tcp        0      0 172.16.1.6:36444        gru03s05-in-f22.1:https ESTABLISHED
tcp        0      0 172.16.1.6:57659        gru03s06-in-f1:www-http ESTABLISHED
tcp        0      0 localhost.localdo:55481 localhost.localdo:48742 ESTABLISHED
tcp        0      0 172.16.1.6:50581        gru03s06-in-f23.1:https ESTABLISHED
tcp        0      0 172.16.1.6:39979        sn1msg1010828.phx.:msnp ESTABLISHED
&hellip;</p>

<p><strong>N</strong>ão coloquei a saída inteira, pois era bem extensa e ainda temos muitos parâmetros para ver. Onde existe XXX.XX.X.XX, obviamente, era o endereço IP que ocultei por puro protesto pela alta no preço do <strong>amendoim</strong>.</p>

<p><strong>1.2</strong> Para listar todas as portas UDP, utilizamos os parâmetros -au:</p>

<p>[root@tuxcaverna ~]# netstat -au</p>

<p>Active Internet connections (servers and established) Proto Recv-Q Send-Q Local Address Foreign Address State udp 0 0 <em>:bootpc </em>:<em> udp 0 0 </em>:49119 <em>:</em> udp 0 0 <em>:mdns </em>:*</p>

<p><strong>1.3</strong> Para listar todas as portas TCP, utilizamos os parâmetros -at:</p>

<p>[root@tuxcaverna ~]# netstat -at
Active Internet connections (servers and established) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 localhost.localdo:39307 <em>:</em> LISTEN tcp 0 0 <em>:64758 </em>:* LISTEN tcp 0 0 XXX.XX.X.XX:54293 gru03s06-in-f21.1:https ESTABLISHED tcp 1 0 XXX.XX.X.XX:58732 sn1msg3020104.sn1.:msnp CLOSE_WAIT</p>

<p><strong>2.</strong> <strong>Listar os Sockets que estão no estado Listening ou escuta:</strong></p>

<p><strong>2.1</strong> Para listar todas no estado Listening, utilizamos o parâmetro -l:</p>

<p>[root@tuxcaverna ~]# netstat -l</p>

<p>Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 localhost.localdo:39307 <em>:</em> LISTEN tcp 0 0 <em>:64758 </em>:* LISTEN Active UNIX domain sockets (only servers) Proto RefCnt Flags Type State I-Node Path unix 2 [ ACC ] STREAM LISTENING 10443 @/tmp/.ICE-unix/1396 unix 2 [ ACC ] STREAM LISTENING 8262 /var/run/xdmctl/dmctl/socket unix 2 [ ACC ] STREAM LISTENING 8277 /var/run/xdmctl/dmctl-:0/socket</p>

<p><strong>2.2</strong> Para listar apenas as portas TCP no estado Listening, utilizamos os parâmetros -lt:</p>

<p>[root@tuxcaverna ~]# netstat -lt</p>

<p>Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 localhost.localdo:39307 <em>:</em> LISTEN tcp 0 0 <em>:64758 </em>:* LISTEN</p>

<p><strong>2.3</strong> Para listar apenas as portas UNIX em estado Listening, utilizamos os parâmetrox -lx:</p>

<p>[root@tuxcaverna ~]# netstat -lx</p>

<p>Active UNIX domain sockets (only servers) Proto RefCnt Flags Type State I-Node Path unix 2 [ ACC ] STREAM LISTENING 10443 @/tmp/.ICE-unix/1396 unix 2 [ ACC ] STREAM LISTENING 8262 /var/run/xdmctl/dmctl/socket unix 2 [ ACC ] STREAM LISTENING 8277 /var/run/xdmctl/dmctl-:0/socket</p>

<p><strong>3.</strong> <strong>Apresentar as estatísticas para cada protocolo:</strong></p>

<p><strong>3.1</strong> Para apresentar as estatísticas de todos os protocolos, utilizamos o parâmetro -s:</p>

<p>[root@tuxcaverna ~]# netstat -s</p>

<p>Ip: 98790 total packets received 54 with invalid headers 2 with invalid addresses 0 forwarded 0 incoming packets discarded 94778 incoming packets delivered 79070 requests sent out Icmp: 0 ICMP messages received 0 input ICMP message failed. ICMP input histogram: 0 ICMP messages sent 0 ICMP messages failed ICMP output histogram: Tcp: 2019 active connections openings 2 passive connection openings 10 failed connection attempts 161 connection resets received 14 connections established 88977 segments received 75703 segments send out 297 segments retransmited 0 bad segments received. 216 resets sent Udp: 2986 packets received 0 packets to unknown port received. 0 packet receive errors 3080 packets sent 0 receive buffer errors 0 send buffer errors</p>

<p>&hellip;</p>

<p>&hellip;</p>

<p><strong>3.2</strong> Para apresentar as estatísticas do protocolo TCP (ou) UDP, utilizamos os parâmetros -st (ou) -su:</p>

<p>[root@tuxcaverna ~]# netstat -st</p>

<p>Tcp: 2031 active connections openings 2 passive connection openings 10 failed connection attempts 164 connection resets received 10 connections established 89257 segments received 76010 segments send out 297 segments retransmited 0 bad segments received. 219 resets sent</p>

<p>ou</p>

<p>[root@tuxcaverna ~]# netstat -su</p>

<p>Udp: 3012 packets received 0 packets to unknown port received. 0 packet receive errors 3107 packets sent 0 receive buffer errors 0 send buffer errors</p>

<p><strong>4.</strong> <strong>Apresentar o PID (ID do prcesso) e os nomes de programas:</strong></p>

<p><strong>4.1</strong> Neste caso utilizamos o netstat com o parâmetro -p para receber a informação de &ldquo;PID/Nome do Programa&rdquo; na saída do netstat. Esta opção é muito útil para debugar e identificar qual programa está rodando em uma porta específica. O parâmetro -p pode ser combinado com demais parâmetros:</p>

<p>[root@tuxcaverna ~]# netstat -pt
Active Internet connections (w/o servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 XXX.XX.X.X:6881         83-228-34-45.btc-:11729 SYN_RECV    &ndash;
tcp        0      0 XXX.XX.X.X:39508        200.123.194.16:www-http ESTABLISHED 30741/chromium
tcp        0      0 XXX.XX.X.X:36321        208.46.17.59:www-http   ESTABLISHED 30741/chromium
tcp        0      0 XXX.XX.X.X:57411        65.55.142.101:https     ESTABLISHED 3292/python2
tcp        0      0 XXX.XX.X.X:6881         bd3e1c77.virtua.c:59298 ESTABLISHED 20447/qbittorrent</p>

<p><strong>5.</strong> <strong>Não resolver host, porta ou nome de usuário:</strong></p>

<p><strong>5.1</strong> Utiliza-se o parâmetro -an quando não se deseja receber na saída do netstat informações de host, porta ou usuarios com seus respectivos nomes resolvidos. Ao invés destas informações virão números:</p>

<p>[root@tuxcaverna ~]# netstat -an
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
tcp        0      0 0.0.0.0:61108           0.0.0.0:<em>               LISTEN
tcp        0      0 0.0.0.0:6881            0.0.0.0:</em>               LISTEN
tcp        0      0 127.0.0.1:49155         0.0.0.0:*               LISTEN</p>

<p><strong>5.2</strong> Se você não quizer descartar as 3 informações de uma vez, pode optar por ocultar apenas uma em específico, conforme abaixo:</p>

<blockquote><p><em>[root@tuxcaverna ~]# netstat -a &mdash;numericports</em></p></blockquote>

<p>ou</p>

<blockquote><p><em>[root@tuxcaverna ~]# netstat -a -numeric-hosts</em></p></blockquote>

<p>ou</p>

<blockquote><p><em>[root@tuxcaverna ~]# netstat -a numeric-users</em></p></blockquote>

<p><strong>6.</strong> <strong>Que</strong> <strong>tal ter uma saída contínua de informações em tempo real? Para isso usa-se o parâmetro -c, que vai atualizar as informações do netstat a cada segundo:</strong></p>

<p>[root@tuxcaverna ~]# netstat -c
Active Internet connections (w/o servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
tcp        0      0 XXX.XX.X.X:57411        65.55.142.101:https     ESTABLISHED
tcp        0      0 XXX.XX.X.X:6881         bd3e1c77.virtua.c:59298 ESTABLISHED
tcp        1      0 XXX.XX.X.X:49920        sn1msg2010605.phx.:msnp CLOSE_WAIT
tcp        0      0 XXX.XX.X.X:45554        111-240-177-108.dy:8921 TIME_WAIT</p>

<p><strong>7.</strong> <strong>Encontrar famílias de endereços não suportadas em seu sistema:</strong></p>

<p><strong>U</strong>tilizamos o parâmetro &mdash;verbose. Repare que nas últimas linhas do retorno teremos algo como:</p>

<p>[root@tuxcaverna ~]# netstat -c
netstat: no support for <code>AF IPX' on this system.
netstat: no support for</code>AF AX25' on this system.
netstat: no support for <code>AF X25' on this system.
netstat: no support for</code>AF NETROM' on this system.</p>

<p><strong>8.</strong> <strong>Para apresentar informações de rotas do kernel utilizamos o parâmetro -r:</strong></p>

<p>[root@tuxcaverna ~]# netstat -r
Kernel IP routing table
Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
default         172.16.1.1      0.0.0.0         UG        0 0          0 wlan0
172.16.1.0      *               255.255.255.0   U         0 0          0 wlan0</p>

<p>&hellip;ou, pode-se utilizar -rn para apresentar em formato numérico ao invés de nomes de hosts.</p>

<hr />

<p><strong>9.</strong> <strong>Para descobrir em qual porta um determinado programa está rodando utilizamos os parâmetros -ap:</strong></p>

<p>[root@tuxcaverna ~]# netstat -ap
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 <em>:61108                 </em>:<em>                     LISTEN      3452/wish
tcp        0      0 </em>:6881                  <em>:</em>                     LISTEN      20447/qbittorrent
tcp        0      0 localhost.localdo:49155 <em>:</em>                     LISTEN      4010/GoogleTalkPlug
tcp        0    269 172.16.1.3:58742        52.60.in-addr.arp:12814 FIN_WAIT1   &ndash;
tcp        0      0 172.16.1.3:6881         bd3e1c77.virtua.c:59298 ESTABLISHED 20447/qbittorrent</p>

<p><strong>9.1</strong> Se quizer especificar o programa, ao invés de o procurar em uma extensa lista, utilize um filtro com o grep da seguinte forma:</p>

<p>[root@tuxcaverna ~]# netstat -ap | grep chromium
unix  2      [ ACC ]     STREAM     LISTENING     252100   30741/chromium       /tmp/.org.chromium.Chromium.bSJLzX/SingletonSocket
unix  3      [ ]         STREAM     CONNECTED     309051   30741/chromium
unix  3      [ ]         STREAM     CONNECTED     308785   30741/chromium</p>

<p><strong>9.2</strong> Se ao invés de especificar o programa, você quizer especificar uma porta e saber o que está rodando nela, pode-se utilizar o filtro do grep da seguinte forma:</p>

<blockquote><p><em>[root@tuxcaverna ~]# netstat -an | grep &lsquo;:80&rsquo;</em></p></blockquote>

<p><strong>10.</strong> <strong>Para terminar, podemos utilizar o parâmetro -i para listar nossas interfaces de rede:</strong></p>

<p>[root@tuxcaverna ~]# netstat -i
Kernel Interface table
Iface   MTU Met   RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg
eth0   1500 0         0      0      0 0             0      0      0      0 BMU
lo    16436 0       662      0      0 0           662      0      0      0 LRU
wlan0  1500 0    157377      0      4 0        133487      0      0      0 BMRU</p>

<p><strong>S</strong>e desejar informações mas detalhadas sobre cada interface, pode-se utilizara combinação de parâmetros -ie:</p>

<p>[root@tuxcaverna ~]# netstat -ie
Kernel Interface table
eth0: flags=4099&lt;UP,BROADCAST,MULTICAST>  mtu 1500  metric 1
ether a4:ba:db:d7:41:c0  txqueuelen 1000  (Ethernet)
RX packets 0  bytes 0 (0.0 B)
RX errors 0  dropped 0  overruns 0  frame 0
TX packets 0  bytes 0 (0.0 B)
TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
device interrupt 47  base 0xc000</p>

<p><strong>H</strong>appy Hacking&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dia Livre - Inscrições e grade do evento]]></title>
    <link href="http://blog.marcelocavalcante.net/blog/2011/07/19/dia-livre-inscricoes-e-grade-do-evento/"/>
    <updated>2011-07-19T08:38:33-03:00</updated>
    <id>http://blog.marcelocavalcante.net/blog/2011/07/19/dia-livre-inscricoes-e-grade-do-evento</id>
    <content type="html"><![CDATA[<p><img src="http://tux-ce.org/dialivre/wp-content/uploads/2011/05/Logo+dia-livre-01.png" alt="" /></p>

<p><strong>É</strong> hora de se <a href="http://tux-ce.org/dialivre/inscricoes/">inscrever</a> no <a href="http://www.tux-ce.org/dialivre">Dia Livre</a>!</p>

<p><strong>G</strong>ostaria de comunicar que a grade para o 1º Dia Livre já foi fechada e liberada.</p>

<p><strong>N</strong>este sábado estarei ministrando a palestra &ldquo;Software Livre e Cultura Hacker: Tenha ética e ganharás respeito&rdquo; na <a href="http://www.ffb.edu.br/">Faculdade Farias Brito</a> durante o 1º Dia Livre.</p>

<p><strong>S</strong>egue grade do encontro:</p>

<p>Horário</p>

<p>Palestra</p>

<p>Palestrante</p>

<p>08:00
&ndash; 08:10</p>

<p>Abertura</p>

<p>&ndash;</p>

<p>08:10
&ndash; 09:00</p>

<p>Bacula
&ndash; Solução livre de Backup</p>

<p>Diego
Monte</p>

<p>09:10
&ndash; 10:00</p>

<p>Criando
soluções automatizadas com ShellScript</p>

<p>Rafael
de Carvalho Farias</p>

<p>10:00
&ndash; 10:20</p>

<p>CoffeeBreak</p>

<p>&ndash;</p>

<p>10:30
&ndash; 11:20</p>

<p>Software Livre e a Cultura Hacker: Tenha Ética e Ganharás Respeito</p>

<p>Marcelo Cavalcante</p>

<p>11;30
&ndash; 11:50</p>

<p>Sorteio
de brindes e encerramento</p>

<p>&ndash;</p>

<p><strong>Q</strong><strong>uando?</strong></p>

<p>23 de Julho, Sábado – A partir das 08:00</p>

<p><strong>Onde?</strong></p>

<p>Faculdade Farias Brito
Rua Castro Monte, 1364 Varjota – Fortaleza, CE
<a href="http://www.tux-ce.org/dialivre/imgs/mapaffb.png"><img src="http://www.tux-ce.org/dialivre/imgs/mapaffb.png" alt="" /></a></p>

<p><strong>S</strong>erão realizados dois sorteios ao final do encontro:</p>

<p>1 camisa da Tux-CE;</p>

<p>1 livro: The Art of Community &ndash; O'Reilly</p>

<p><strong>N</strong>os vemos lá!</p>
]]></content>
  </entry>
  
</feed>
