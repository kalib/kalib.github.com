<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Seguranca | Marcelo Cavalcante Rocha ~]]></title>
  <link href="http://blog.marcelocavalcante.net/blog/categories/seguranca/atom.xml" rel="self"/>
  <link href="http://blog.marcelocavalcante.net/"/>
  <updated>2013-09-20T14:47:23-03:00</updated>
  <id>http://blog.marcelocavalcante.net/</id>
  <author>
    <name><![CDATA[Marcelo Cavalcante Rocha - Kalib]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vulnerabilidade iOS7 - Hack na Tela de Bloqueio Permite Burlar Segurança]]></title>
    <link href="http://blog.marcelocavalcante.net/blog/2013/09/20/vulnerabilidade-ios7-hack-na-tela-de-bloqueio-permite-burlar-seguranca/"/>
    <updated>2013-09-20T08:06:00-03:00</updated>
    <id>http://blog.marcelocavalcante.net/blog/2013/09/20/vulnerabilidade-ios7-hack-na-tela-de-bloqueio-permite-burlar-seguranca</id>
    <content type="html"><![CDATA[<p><img class="center" src="/imgs/vulnerability.jpg" title="&lsquo;Vulnerability&rsquo;" >
<strong>N</strong>ão é de hoje que as telas de bloqueio (supostas proteções) de smartphones possuem <em>vulnerabilidades</em>. Mal foi lançado o novo iOS 7 e o mesmo já possui uma vulnerabilidade possibilitando a qualquer pessoa utilizar um simples hack para ter acesso à alguns dados do dono do smartphone com o iOS 7.</p>

<p><strong>A</strong> Apple já notificou sobre a correção de aproximadamente 80 vulnerabilidades que comprometiam a segurança do aparelho mas, aparentemente, algumas passaram despercebidas. Dentre elas, a possibilidade de burlar a proteção de bloqueio do aparelho, o que nos permite acessar, por exemplo, as fotos contidas no aparelho sem a necessidade de conhecer a senha de proteção do mesmo.</p>

<p><strong>O</strong> processo para reprodução do hack é o seguinte:</p>

<p><strong>1-</strong> Quando estiver na tela de proteção com o aparelho bloqueado, deslize seu dedo de baixo para cima, de forma a abrir a <em>Central de Controle</em>. Nela, abra o aplicativo <em>relógio</em>.</p>

<p><strong>2-</strong> Abra a sessão <em>Alarme</em> do aplicativo Relógio e pressione o botão <em>Power</em> até que o iOS lhe pergunte se você deseja desligar o aparelho.</p>

<p><strong>3-</strong> Toque rapidamente no botão <em>Cancelar</em> e, imediatamente após isto pressione <em>duas vezes</em> o botão <em>Home</em>, sendo que a segunda vez precisa ser por um pouco mais de tempo. Dois segundos são o suficiente. Em seguida, solte o botão Home.</p>

<p><strong>4-</strong> Você agora verá o <em>Gerenciador de Tarefas</em> com as aplicações em execução. Escolha a aplicação <em>Câmera</em> e a partir dela você poderá nevegar pelas fotos armazenadas no aparelho.</p>

<p><strong>N</strong>a prática&hellip;</p>

<iframe width="420" height="315" src="http://blog.marcelocavalcante.net//www.youtube.com/embed/v6h_xcER00c" frameborder="0" allowfullscreen></iframe>


<p><strong>L</strong>indo&hellip;</p>

<p><strong>C0ngr4tul4ti0n5 4ppl3!</strong></p>

<p><strong>L</strong>et&rsquo;s H4ck and H4v3 Fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tornando Seu SSH Mais Seguro]]></title>
    <link href="http://blog.marcelocavalcante.net/blog/2013/08/28/tornando-seu-ssh-mais-seguro/"/>
    <updated>2013-08-28T11:20:00-03:00</updated>
    <id>http://blog.marcelocavalcante.net/blog/2013/08/28/tornando-seu-ssh-mais-seguro</id>
    <content type="html"><![CDATA[<p><img class="left" src="/imgs/openssh.png" title="&lsquo;OpenSSH&rsquo;" >
<strong>O</strong> <em>SSH</em> (Secure Shell) é um dos protocolos mais utilizados atualmente para transferência de arquivos ou mesmo conexão remota, principalmente em ambientes Linux/Unix e, por si só, já tem se provado ser confiável e seguro. O mesmo passou a ser o principal substituto ao <em>TELNET</em> por possuir a vantagem da criptografia na conexão entre o cliente e o servidor, além da possibilidade de criação de túneis, o que chamamos de <em>tunneling</em>, oferecendo assim a capacidade de redirecionar pacotes de dados. Mas não é por isso que devemos nos descuidar&hellip;</p>

<p><strong>S</strong>empre existe espaço para melhorias.</p>

<p><strong>A</strong>s configurações do servidor SSH, geralmente, ficam localizadas em <em>/etc/ssh/sshd_config</em>. Vale lembrar que a cada alteração feita neste arquivo será necessário reiniciar o serviço SSH para que suas alterações possam ser efetivadas.</p>

<p><strong>I</strong>ndo ao que interessa:</p>

<p><strong>1- Altere a porta de escuta do SSH</strong></p>

<p><strong>P</strong>or padrão o SSH aceita conexões na porta 22, portanto é importante alterar esta porta para dificultar as tentativas de ataques aleatórios de brute-force que buscam máquinas que disponibilizam o SSH através da porta padrão. Preferivelmente, é interessante optar por uma porta posterior a 1024, visto que a maioria dos softwares de escaneamento de portas e serviços não fazem uma varredura por portas muito altas. Esta é geralmente uma das primeiras configurações no arquivo <em>/etc/ssh/sshd_config</em>, conforme pode ser visto abaixo:</p>

<p><code>
 Port 22
</code></p>

<p><strong>2- Permita apenas o protocolo SSH 2</strong></p>

<p><strong>D</strong>ependendo de sua distribuição Linux, o padrão poderá ser a utilização de ambos os protocolos, 1 e 2. A versão 1 do protocolo SSH possui vulnerabilidades bastante conhecidas, portanto é preferível que utilize apenas o protocolo de versão 2, diminuindo assim suas chances de um ataque de inserção, por exemplo, conforme possível com a versão 1 do protocolo. Procure pela seguinte linha de configuração e altere-a mantendo apenas a opção <em>2</em>:</p>

<p><code>
 Protocol 2,1
</code></p>

<p><strong>3- Decida quais usuários poderão logar-se via SSH</strong></p>

<p><strong>P</strong>ermitir que qualquer usuário possa logar-se via SSH não é aconselhável, da mesma forma que permitir que o usuário root efetue login via SSH também é extremamante desencorajado devido às vulnerabilidades envolvidas. Por possuírem determinados (ou todos, no caso do root) privilégios no sistema, alguns usuários simplesmente não devem ter permissão de login via SSH, evitando assim que alguém utilize ferramentas de brute-force e consiga, por quebra de senha, logar-se em seu servidor com um usuário privilegiado. Para proibir o login do usuário root via SSH, altere a seguinte linha para <em>no</em>:</p>

<p><code>
 PermitRootLogin yes
</code></p>

<p><strong>P</strong>ara definir quais usuários poderão ter acesso via SSH, insira o nome dos mesmos na seguinte linha, conforme exemplo abaixo:</p>

<p><code>
 AllowUsers usuario1 usuario2 usuario3
</code></p>

<p><strong>4- Utilize uma chave pública DSA como mecanismo de autenticação</strong></p>

<p><strong>A</strong>o invés de utilizar nomes de usuários e senhas para autenticar-se via SSH, você pode utilizar chaves públicas DSA. Outra opção é utilizar ambos os mecanismos, usuário e senha + chave. Uma das maiores vantagens de se utilizar chaves como mecanismo de autenticação é que você impossibilitará o acesso indevido através de ataques de força bruta ou brute force, pois você não precisará de um login e senha para logar-se ao servidor ou estação. Ao invés disso, você utilizará um par de chaves &ndash; uma pública e uma privada. No cenário de chaves DSA, a chave privada fica em sua máquina e uma cópia da chave pública fica no servidor que você deseja acessar via SSH.</p>

<p><strong>A</strong>o tentar logar-se em um servidor configurado para autenticação via chave DSA, o mesmo verifica as chaves de ambos os lados e, se elas combinarem, autoriza seu login, caso contrário nega sua conexão.</p>

<p><strong>N</strong>o arquivo de configuração do servidor SSH você irá procurar os seguintes parâmetros e deixá-los da seguinte forma:</p>

<p><code>
 RSAAuthentication yes
 PubkeyAuthentication yes
 AuthorizedKeysFile %h/.ssh/authorized_keys
</code></p>

<p><strong>C</strong>aso você deseje utilizar <em>apenas</em> a autenticação por chaves DSA, você precisará desabilitar a autenticação por senha, deixando como <em>no</em> o seguinte parâmetro:</p>

<p><code>
 PasswordAuthentication no
</code></p>

<p><strong>A</strong>gora que as regras de configuração para a autenticação via chaves foram criadas, vamos criar as chaves em si.</p>

<p><strong>E</strong>m sua máquina, vamos digitar o seguinte comando para a criação de suas chaves pública e privada:</p>

<p><code>
 $ ssh-keygen -t dsa -C "$(whoami)@$(hostname)-$(date -I)"
</code></p>

<p><strong>O</strong> sistema lhe perguntará se você deseja escolher um diretório no qual salvar suas chaves. Caso você não especifique nenhum, ele salvará no diretório .ssh que se encontra no home de seu usuário <em>(~/.ssh/id_dsa)</em>. Em seguida lhe perguntará se você deseja criar uma senha para sua chave (não é obrigatório).</p>

<p><strong>A</strong>o finalizar este procedimento você receberá a confirmação de que o procedimento foi realizado. Algo similar a isto:</p>

<p><code>
 Your identification has been saved in /home/username/.ssh/id_dsa.
 Your public key has been saved in /home/username/.ssh/id_dsa.pub.
 The key fingerprint is:
 dd:15:ee:24:20:14:11:01:b8:72:a2:0f:99:4c:79:7f username@localhost-2013-08-28
 The key's randomart image is:
 +--[DSA  1024]---+
 |     ..oB=.   .  |
 |    .    . . . . |
 |  .  .      . +  |
 | oo.o    . . =   |
 |o+.+.   S . . .  |
 |=.   . E         |
 | o    .          |
 |  .              |
 |                 |
 +-----------------+
</code></p>

<p><strong>O</strong> próximo passo é copiar a sua chave pública para o servidor que você deseja acessar via SSH. Você pode copiar de algumas formas diferentes:</p>

<p><strong>4.1 &ndash; Copiando manualmente</strong></p>

<p><strong>C</strong>opie o conteúdo retornado através do seguinte comando:</p>

<p><code>
 $ cat ~/.ssh/id_dsa.pub
</code></p>

<p><strong>O</strong> retorno será algo similar a isto:</p>

<p><code>
 ssh-dss AAAAB3NzaC1kc3MAAACBAKWJtlUANTuqKy1NN4bb5qBJLZVMnR+nr84hk7EWnHmpJgipRZ8Y/tUDJTpCab
 GwoMNYmPZaz62Nm5/F5Nl9yzgMmxfGja8OYt3bwir6A379NOWFM2NBq7Q107uH4L+MFszXKoCVn6rM9SddkAJL1V66
 eGX+Y+r1o/8wG773h9P5AAAAFQDh09qovWFzKJk0E58c0oRz9S4UAQAAAIBuVxw+LZDrWVVCLr4WMubRPJuFzXqqHN
 re9RUZ2kMrUENnAenYyJgjcBg7uJJA/wMfn7Oe32e4hvpU7SsXEUf7xT1sKb/UFyX9qTr5G0kkU6t8IYPjIQaqRIOQ
 mnRiqm7JCDd1GTAFU9n/ocK4sNPZDL8KeEEquZmk+ihKcu9FLwAAAIBlz+K7fcZSlA5hKewHOF7fA9IdwdMsbc2Ri7
 bSw4Fv70rQeMnYYUDeHQQJHeJJyScmuHswordGXYKe2tsf7fYn11CW46P9WxCRcargojxJNrRHlF5WiK15fhNMLtfx
 7/+CSmoXnEUCw8uCCBVduGLyevZ3WC+FEx7/aqJjuUCNJg== username@localhost-2013-08-28
</code></p>

<p><strong>É</strong> exatamente este conteúdo que precisa ser copiado.</p>

<p><strong>E</strong>m seguida você precisará colar este conteúdo no servidor desejado, porém incrementando dentro do seguinte arquivo (no servidor): <em>~/.ssh/authorized_keys</em></p>

<p><strong>P</strong>ara facilitar, você poderá já ter copiado o arquivo da chave completo para o servidor. Veja nos próximos métodos algumas formas de o fazer.</p>

<p><strong>4.2 &ndash; Método Simples &ndash; Deve ser usado antes de configurar o servidor para permitir autenticação por chaves</strong></p>

<p><strong>S</strong>e o seu arquivo de chave é <em>~/.ssh/id_dsa</em>, você poderá simplesmente digitar o seguinte comando para enviar a chave para o servidor:</p>

<p><code>
 $ ssh-copy-id servidor-remoto.com.br
</code></p>

<p><strong>C</strong>aso o nome de usuário em sua máquina seja diferente do nome de usuário no servidor, lembre-se de adicionar o nome do usuário do servidor antes do endereço do mesmo:</p>

<p><code>
 $ ssh-copy-id nome-de-usuario@servidor-remoto.com.br
</code></p>

<p><strong>C</strong>aso o servidor esteja recebendo as conexões SSH em uma porta diferente da padrão (22), utilize (supondo que estamos utilizando a 221):</p>

<p><code>
 $ ssh-copy-id -p 221 nome-de-usuario@servidor-remoto.com.br
</code></p>

<p><strong>4.3 &ndash; Método Tradicional &ndash; Deve ser usado antes de configurar o servidor para permitir autenticação por chaves</strong></p>

<p><strong>P</strong>or padrão a chave pública precisa ser concatenada no arquivo <em>~/.ssh/authorized_keys</em>. Comece copiando a chave pública para o servidor remoto:</p>

<p><code>
 $ scp ~/.ssh/id_dsa.pub nome-do-usuario@servidor-remoto.com.br:
</code></p>

<p><strong>O</strong> comando acima copiará a chave pública para o diretório home do usuário citado para o servidor via scp. Não esqueça de inluir o <em>:</em> ao final do endereço do servidor.</p>

<p><strong>C</strong>aso o diretório <em>~/.ssh</em> ainda não exista no servidor, você precisará criá-lo. O mesmo com o arquivo <em>authorized_keys</em>:</p>

<p><code>
 $ ssh nome-do-usuario@servidor-remoto.com.br
 nome-do-usuario@servidor-remoto's password:
 $ mkdir ~/.ssh
 $ cat ~/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys
 $ rm ~/id_dsa.pub
 $ chmod 600 ~/.ssh/authorized_keys
</code></p>

<p><strong>O</strong>s últimos dois comandos removem a chave pública do diretório do servidor e definem as permissões para o arquivo <em>authorized_keys</em> de forma que ele apenas possa ser lido ou escrito por você, o dono.</p>

<p><strong>P</strong>ronto, sua chave já está no servidor após seguir uma das dicas acima.</p>

<p><strong>L</strong>embre-se sempre de reiniciar o serviço ssh após efetuar qualquer alteração de configuração.</p>

<p><strong>D</strong>icas simples de serem implementadas mas que irão melhorar bastante a segurança de seu servidor SSH. ;]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Navegador Anti-Censura do Pirate Bay Supera 100.000 Downloads]]></title>
    <link href="http://blog.marcelocavalcante.net/blog/2013/08/16/navegador-anti-censura-do-pirate-bay-supera-100-dot-000-downloads/"/>
    <updated>2013-08-16T09:37:00-03:00</updated>
    <id>http://blog.marcelocavalcante.net/blog/2013/08/16/navegador-anti-censura-do-pirate-bay-supera-100-dot-000-downloads</id>
    <content type="html"><![CDATA[<p><img class="left" src="/imgs/piratebrowser.jpg" title="&lsquo;Pirate Browser&rsquo;" ></p>

<p><strong>P</strong>ara quem ainda não sabe, o The Pirate Bay (TPB) é auto-intitulado <em>&ldquo;O tracker BitTorrent mais resiliente da galáxia&rdquo;</em>. De fato, ninguém pode negar a referência do The Pirate Bay no mundo dos torrents, certo?! O projeto foi criado entre 2003 e 2004 pela organização anticopyright sueca Piratbyrån, tornando-se independente em meados de Outubro de 2004.</p>

<p><strong>E</strong>ntre idas e vindas, o The Pirate Bay lança uma nova <em>afronta direta</em> às autoridades e empresas que sempre tentaram impedir suas atividades. O <em>Pirate Browser</em>.</p>

<p><strong>O</strong> Pirate Browser é o navegador lançado pelo projeto The Pirate Bay, cuja proposta é ser um navegador anti-censura, o qual permite que pessoas possam burlar filtros de acesso existentes em provedores de internet (ISP) e, assim, possam acessar sites bloqueados pelos mesmos. O navegador foi lançado em forma de <em>presente</em> aos seus usuários, visto ter sido lançado na data de comemoração de 10 anos do serviço.</p>

<p><strong>N</strong>ão tratando-se de um navegador realmente novo, o Pirate Browser é na verdade uma versão <em>customizada</em> do já conhecido navegador <em>Firefox</em>, da Mozilla. O diferencial é que ele vem equipado com alguns plugins e patches, como um cliente Tor, bem como otimizações para acelerar o carregamento de páginas, através de configurações de proxy. A equipe do The Pirate Bay faz questão de informar que a ferramenta é apenas uma forma de burlar as censuras impostas na Internet, não garantindo qualquer anonimato aos usuários da mesma, conforme palavras de Winston, um dos responsáveis pelo projeto:</p>

<blockquote><p><em>Não está fornecendo anonimato, tampouco seguro ao ponto de esconder sua identidade. O PirateBrowser foi feito apenas para contornar a censura e o bloqueio de sites. Se fizéssemos um navegador completamente anônimo, apenas iríamos tornar a navegação mais lenta.</em> &ndash; Winston.</p></blockquote>

<p><strong>C</strong>om menos de 5 dias após seu lançamento, o navegador já recebeu mais de <em>100.000</em> downloads através do link direto e arquivo torrent oficial, o qual estava sendo compartilhado por mais de <em>5.000</em> pessoas no momento de seu lançamento.</p>

<p><strong>A</strong>pesar de os próprios responsáveis pelo projeto afirmarem estar supresos pela quantidade de downloads, visto que eles realmente não esperavam por isto, afirmam que esta é apenas a primeira ferramenta que o projeto The Pirate Bay lançará.</p>

<blockquote><p><em>Não imaginei que se disseminaria assim tão rapidamente. Acredito que as pessoas realmente querem acessar os sites que seus governos e cortes estão tentando esconder deles.</em> &ndash; Winston.</p></blockquote>

<p><strong>P</strong>ara que não conhece, ou pouco conhece, a história do projeto The Pirate Bay, recomendo fortemente o filme <strong>TPB AFK: The Pirate Bay Away from Keyboard</strong>.</p>

<p><img class="center" src="/imgs/tpb_afk.jpg" title="&lsquo;TPB AFK&rsquo;" ></p>

<p><strong>T</strong>rata-se de um documentário sobre a vida dos três fundadores do site de compartilhamento de arquivos The Pirate Bay, dirigido por <em>Simon Klose</em>. As gravações do documentário começaram no verão de 2008, e foram concluídas em 25 de Agosto de 2012.</p>

<p><strong>E</strong> a vida segue&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dica Rápida - Linux - Melhorando a Política de Senhas]]></title>
    <link href="http://blog.marcelocavalcante.net/blog/2013/08/12/dica-rapida-linux-melhorando-a-politica-de-senhas/"/>
    <updated>2013-08-12T08:41:00-03:00</updated>
    <id>http://blog.marcelocavalcante.net/blog/2013/08/12/dica-rapida-linux-melhorando-a-politica-de-senhas</id>
    <content type="html"><![CDATA[<p><img class="center" src="/imgs/url.jpg" title="&lsquo;password&rsquo;" ></p>

<p><strong>N</strong>a dica anterior mencionei o uso do comando <em>chage</em> para <strong>forçar</strong> a alteração de senha por parte do usuário em sistemas Linux, mas e se além disso fosse possível melhorar esta prática, tornando a política de senhas de usuários um pouco mais segura?</p>

<p><strong>O</strong> chage também nos permite determinar quando exatamente desejamos que a senha daquele usuário expire, de forma que ele será forçado a criar uma nova senha após aquele determinado tempo. Isto é útil para evitar que uma mesma senha seja utilizada por um longo período de tempo. Particularmente, gosto de forçar a alteração de senhas a cada mês, mas isto dependerá dos sistemas que são acessados e de o quão críticas são as informações e sistemas em jogo.</p>

<p><strong>O</strong> comando chage altera o número de dias entre a alteração de uma senha e sua alteração anterior. Esta informação fica registrada no sistema e será utilizada para determinar quando um usuário precisará alterar sua senha. Esta e outras configurações ficam armazenadas no arquivo de configuração <em>/etc/login.defs</em>, o qual determina configurações que englobem todos os usuários do sistema, inclusive um período máxima antes de uma senha ser expirada.</p>

<p><strong>P</strong>ara verificar as informações sobre quando uma senha expira, digite:</p>

<p><code>
 # chage -l NomeDoUsuário
</code></p>

<p><strong>O</strong> comando acima lhe retornará informações gerais sobre aquela conta, tais como: data de última mudança de senha, data em que a senha irá expirar, status atual da senha, número mínimo entre troca de senhas, número máximo entre troca de senhas, número de dias de alerta sobre a mudança de senha, etc.</p>

<p><strong>P</strong>ara efetivar a política de mudança de senha após um determinado tempo, você pode editar diretamente o arquivo <em>/etc/shadow</em> ou utilizar o comando <em>chage</em>, o qual recomendo ao invés do /etc/shadow.</p>

<p><strong>N</strong>o arquivo <em>/etc/shadow</em>, a ordem dos campos é a seguinte:</p>

<p><code>
 {NomeDeUsuário}:{Senha}:{ÚltimaAlteraçãoDeSenha}:{Minimum_days}:{Maximum_days}:{Warn}:{Inactive}:{Expire}:
</code></p>

<p>Onde,</p>

<p><strong>Minimum_days:</strong> <em>Quantididade mínima de dias entre alterações de senhas. Ex: Uma quantia mínima de dias antes que o usuário possa alterar sua senha.</em></p>

<p><strong>Maximum_days:</strong> <em>Quantidade máxima de dias pelos quais uma senha será válida (após os quais os o usuário é forçado a alterar sua senha).</em></p>

<p><strong>Warn:</strong> <em>O número de dias antes de a senha expirar nos quais o usuário será alertado sobre a sua senha expirar em breve.</em></p>

<p><strong>Expire:</strong> <em>Quantidade de dias desde 1 de Janeiro de 1970 em que a conta expirará. Ex: uma data específica pode ser informada para que, a partir de tal data a senha não possa mais ser utilizada.</em></p>

<p><strong>C</strong>onforme informei anteriormente, costumo recomendar a utilização do comando <em>chage</em> ao invás da edição do arquivo <em>/etc/shadow</em>, o que minimiza as chances de erros.</p>

<p><code>
 # chage -M 60 -m 7 -W 7 NomeDeUsuário
</code></p>

<p><strong>O</strong>nde, da mesma forma, <strong>M</strong> = Maximum_days, <strong>m</strong> = Minimum_days e <strong>W</strong> = warn.</p>

<p><strong>B</strong>om proveito&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dica Rápida - Linux - Forçar Usuário A Trocar Senha Após Primeiro Login]]></title>
    <link href="http://blog.marcelocavalcante.net/blog/2013/08/06/dica-rapida-linux-forcar-usuario-a-trocar-senha-apos-primeiro-login/"/>
    <updated>2013-08-06T08:20:00-03:00</updated>
    <id>http://blog.marcelocavalcante.net/blog/2013/08/06/dica-rapida-linux-forcar-usuario-a-trocar-senha-apos-primeiro-login</id>
    <content type="html"><![CDATA[<p><img class="center" src="/imgs/password.jpg" title="&lsquo;password&rsquo;" ></p>

<p><strong>É</strong> natural encontrar pessoas que utilizam linux a pouco tempo (ou que nunca utilizaram) questionando aspectos simples que seguem o jargão: <em>&ldquo;Mas no Windows eu consigo fazer isso, enquanto que no Linux&hellip;.&rdquo;</em></p>

<p><strong>I</strong>sso não é novidade alguma e, de fato, é um comportamento esperado, embora demonstre apenas uma mera falta de boa vontade para pesquisar um pouco. O fato é que por vezes encontro pessoas me questionando sobre alguns destes <em>recursos em falta</em> no mundo Linux, quando na verdade eles, na grande maioria das vezes, não estão em falta.</p>

<p><strong>U</strong>m exemplo recente disto se deu quando um colega (não se preocupe, seu nome está a salvo) me perguntou:</p>

<blockquote><p><em>Porque o Linux não tem um recurso para forçar um usuário a alterar sua senha após o primeiro login? Isso me ajuda muito como SysAdmin em servidores Windows.</em></p></blockquote>

<p><strong>D</strong>evo concordar com ele no sentido de que este recurso ajuda muito a vida de um SysAdmin. Sejamos justos, as pessoas vivem esquecendo suas senhas. Segunda-feira? Dia mundial do <em>&ldquo;esqueci minha senha, você pode gerar outra por favor?&rdquo;</em></p>

<p><strong>P</strong>orém, devo acrescentar que o Linux possui sim este recurso (e não é uma novidade). O chage é apenas uma das formas de o fazer.</p>

<p><strong>S</strong>upondo que seu usuário esqueceu sua senha e você deseja possibilitar que ele crie uma nova. Você pode mudar a senha dele para qualquer coisa que venha em sua mente, por exemplo: <em>123mudar456</em></p>

<p><strong>E</strong>m seguida, digite o seguinte comando:</p>

<p><code>
 # chage -d 0 {nome-do-usuário}
</code></p>

<p><strong>S</strong>upondo que eu tenha alterado a senha do usuário <em>linus.torvalds</em> para <em>123mudar456</em>, o comando seria:</p>

<p><code>
 # chage -d 0 linus.torvalds
</code></p>

<p><strong>O</strong> parâmetro -d determina quando a senha do mesmo expira, ou deverá ser trocada. Você pode determinar uma data específica, a qual deve ser indicada no formato AAAA-MM-DD, porém, ao invés da data, o 0 indica que a senha deverá ser trocada após o primeiro login daquele usuário.</p>

<p><strong>S</strong>imples, certo?!</p>
]]></content>
  </entry>
  
</feed>
