<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Marcelo Cavalcante Rocha ~]]></title>
  <link href="http://kalib.github.io/atom.xml" rel="self"/>
  <link href="http://kalib.github.io/"/>
  <updated>2018-04-01T16:25:43-04:00</updated>
  <id>http://kalib.github.io/</id>
  <author>
    <name><![CDATA[Marcelo Cavalcante Rocha - Kalib]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chef: Aautomação e Gerenciamento de Configuração]]></title>
    <link href="http://kalib.github.io/blog/2018/04/01/chef-aautomacao-e-gerenciamento-de-configuracao/"/>
    <updated>2018-04-01T11:22:00-04:00</updated>
    <id>http://kalib.github.io/blog/2018/04/01/chef-aautomacao-e-gerenciamento-de-configuracao</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://kalib.github.io/imgs/cheflogo.png" title="'Chef'" ></p>

<h2>Uma coisa de cada vez</h2>

<p><strong>C</strong>hef é uma popular ferramenta de Gerenciamento de Configurações criado pela empresa de mesmo nome, Chef. O <a href="https://www.chef.io">Chef</a> é desenvolvido em <a href="http://www.ruby-lang.org">Ruby</a> e <a href="https://www.erlang.org">Erlang</a>, utiliza uma linguagem DSL (domain-specific language) em Ruby puro para escrever arquivos de configuração de sistemas chamados &ldquo;recipes&rdquo; (receitas).</p>

<p><strong>A</strong>ntes de falarmos sobre o Chef é importante entender primeiramente o conceito e utilidade de ferramentas de Gerenciamento de Configuração.</p>

<h2>Gerenciamento de Configuração</h2>

<p><strong>G</strong>erenciamento de Configuração, ou CM (Configuration Management), é um processo de engenharia de sistemas que visa garantir a consistência entre ativos físicos e lógicos em um ambiente operacional. O processo de gerenciamento de configuração busca identificar e rastrear itens individuais de configuração, documentando capacidades funcionais e interdependências. Administradores, técnicos e desenvolvedores de sistemas podem utilizar ferramentas de Gerenciamento de Configuração para verificar o efeito que uma mudança em um item de configuração terá em outros sistemas.</p>

<p><strong>E</strong>m palavras simples, o objetivo de uma ferramenta de gerenciamento de configuração é simplificar a vida de quem administra serviços e sistemas/usr/share/licenses/teamviewer/LICENSE garantindo uma uniformidade no quesito configuração.</p>

<p><strong>C</strong>omo exemplo prático e simplista, imagine um servidor web que será responsável por hospedar um pequeno site em php. Este servidor possuirá alguns atributos/aplicativos/configurações, tais como:</p>

<ul>
<li>Apache instalado;</li>
<li>Alterações específicas nos arquivos de configuração do Apache;</li>
<li>Serviço do Apache ativo e iniciado;</li>
<li>Arquivos referentes ao site em si em um diretório específico;</li>
<li>Permissões específicas atribuídas ao diretório específico do site;</li>
<li>etc&hellip;</li>
</ul>


<p><strong>C</strong>onfigurar tudo isso manualmente em um único servidor é simples. Você poderia conectar-se via SSH no servidor, instalar o apache com o gerenciador de pacotes da distribuição utilizada, configurar o que for necessário no apache, iniciar o serviço, etc, etc, etc. Mas o que fazer quando sua infraestrutura cresce? Quando se quer maior disponibilidade do site, quando agora você roda este site em um cluster com 5 servidores?</p>

<p><strong>B</strong>asicamente a mesma coisa, certo? Você pode se conectar em cada um dos servidores e repetir os mesmos passos. O problema se dá justamente nessa repetição de passos, onde você pode cometer erros, perder tempo, etc. Além disso, o que acontece se um colega seu modificar algo em um dos servidores e não lhe avisar? E se ele esquecer de replicar esta mudança para os demais?</p>

<p><strong>É</strong> fácil achar diversas razões pelas quais torna-se difícil administrar e gerenciar configurações em ambientes mais complexos. A ideia por trás de uma ferramenta de Gerenciamento de Configuração é justamente reduzir esta complexidade, eliminando a necessidade de se conectar manualmente em diversos servidores para aplicar as mesmas rotinas, passos e configurações.</p>

<p><strong>A</strong>través de arquivos de texto podemos literalmente descrever o estado e ações desejadas para nossos serviços e sistemas. Por exemplo: Posso dizer que possuo um grupo de servidores chamado WebServer, o qual contém 10 servidores com o SO CentOS 7. Posso incluir a informação de que preciso que todos eles estejam com a versão X do Apache instalada e que o serviço esteja ativo e rodando. Além disso, posso dizer que quero que no diretório /var/www/meusite/ contenha todo o conteúdo que está em um mapeamento de rede específico, ou mesmo em um repositório que possuo no github.</p>

<p><strong>A</strong>o invés de me conectar em cada um dos 10 servidores para fazer tudo isso, um simples comando será o suficiente. O comando em específico dependerá da solução adotada, visto que existem diversas ferramentas de CM (Gerenciamento de Configuração). Mas, basicamente, ele irá ler o(s) arquivo(s) de &ldquo;instruções&rdquo; que nós definimos e saberá em quais servidores ele deverá instalar o Apache e configurar de acordo com o especificado, nos dando apenas o resultado final em forma de relatório simples.</p>

<p><strong>E</strong> se alguém da equipe alterar um arquivo de configuração diretamente em um dos servidores? A ferramenta, em sua próxima execucação, irá identificar que o estado desejado para aquele meu grupo de servidores está diferente em um dos servidores. Ela então irá modificar aquele arquivo específico naquele servidor para que ele volte ao seu estado desejado.</p>

<p><strong>A</strong>lém desta segurança, nśo agora passamos a ter um ponto único de modificação. Ao desejarmos mudar algo, o faremos apenas no nosso &ldquo;código&rdquo;, ao invés de o fazer nos 10 servidores manualmente.</p>

<p><strong>O</strong> mesmo benefício se dá em caso de erros e falhas: um ponto único de correção.</p>

<p><strong>C</strong>om este mecanismo de descrever o estado de nossa infraestrutura em arquivos de texto/código, entramos em um novo conceito: Infrastructure as Code, ou Infraestrutura como Código. Uma vez que temos nossa infraestrutura em formato de códivo, podemos literalmente versionar e gerenciar nossa infraestrutura com repositórios Git, por exemplo.</p>

<h2>O que é Chef?</h2>

<p><strong>C</strong>onforme dito mais acima, Chef é uma das mais populares ferramentas de Gerenciamento de Configuração disponíveis atualmente. É compatível e facilmente integrado à plataformas de computação em nuvem, tais como Internap, Amazon EC2, Google Cloud Platform, OpenStack, SoftLayer, Microsoft Azure e Rackspace, provendo e configurando servidores automaticamente.</p>

<p><strong>O</strong> usuário escreve &ldquo;recipes&rdquo; (receitas) que descrevem como o Chef deve gerenciar aplicações em servidores e utilitários. Estes &ldquo;recipes&rdquo;, os quais podem ser agrupados em &ldquo;cookbooks&rdquo; (livros de receitas) descrevem uma série de recursos que devem estar em um determinado estado. Este recursos podem ser pacotes, serviços ou mesmo arquivos.</p>

<p><strong>C</strong>hef pode rodar em um modo cliente/servidor ou standalone, com o chamado &ldquo;chef-solo&rdquo;. No modo cliente/servidor, o cliente Chef envia uma série de atributos sobre o node ou cliente/host para o Chef server. O Chef server utiliza <a href="https://lucene.apache.org/solr">Solr</a> para indexar estes atributos e provê uma API para a qual os clientes possam fazer consultas. As recipes podem fazer requisições à esta base de atributos e utilizar os dados resultantes para configurar o cliente ou node.</p>

<p><strong>E</strong>mbora inicialmente o Chef fosse utilizado para gerenciar exclusivamente máquinas Linux, as versões mais atuais também suportam máquinas Windows.</p>

<p><strong>A</strong> ideia para este post é dar uma breve introdução ao Chef, portanto não vou entrar em maiores detalhes do funcionamento por hora.</p>

<h3>Resources</h3>

<p><strong>C</strong>omo dito antes, um Resource é uma descrição de estado desejado para um determinado item. Estes resources são gerenciados através de recipes.</p>

<p><strong>U</strong>m resource possui basicamente 4 componentes fundamentais que são definidos em um bloco de código Ruby:</p>

<ul>
<li>Resource Type &ndash; Tipo de resource (Pode ser um pacote, serviço, arquivo&hellip;)</li>
<li>Resource Name &ndash; Nome do resource</li>
<li>Resource Properties &ndash; Propriedades do resource</li>
<li>Actions &ndash; Ações a serem aplicadas ao resource</li>
</ul>


<p><strong>U</strong>m exemplo de recipe para instalar o Apache em um servidor Ubuntu, por exemplo, seria o seguinte:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package 'httpd' do
</span><span class='line'>    action :install
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>No exemplo acima temos o tipo de resource como sendo &ldquo;package&rdquo;, o nome do resource como sendo &ldquo;httpd&rdquo; e a ação &ldquo;install&rdquo;.</p>

<p><strong>O</strong> que vai acontecer aqui? Bem simples, certo? O pacote httpd (Apache) será instalado. Mas o que acontece caso o pacote httpd já esteja instalado?</p>

<p><strong>N</strong>ada. Uma das características do Chef é a idempotência. Na matemática e ciência da computação, a idempotência é a propriedade que algumas operações têm de poderem ser aplicadas várias vezes sem que o valor do resultado se altere após a aplicação inicial. Ou seja, O Chef primeiramente confere se o estado desejado já está aplicado e, caso sim, ignora aquela instrução.</p>

<p><strong>N</strong>ovamente&hellip; A ideia para este post é dar uma breve introdução ao Chef, portanto não vou entrar em maiores detalhes sobre os tipos de resources e suas possíveis ações. Vamos ao que interessa&hellip;</p>

<h2>Instalando o Chef</h2>

<p><strong>C</strong>onforme explicado acima, o Chef pode ser utilizado em modo cliente/servidor ou standalone. Para esta introdução utilizaremos standalone para simplificar as coisas.</p>

<p><strong>P</strong>ara instalar podemos utilizar o gerenciador de pacotes da distribuição Linux que utilizamos ou baixando o chefdk (Development Kit) através da página de <a href="https://downloads.chef.io/chefdk">downloads do chef</a>.</p>

<h3>Arch Linux</h3>

<p><strong>N</strong>o meu caso, utilizarei o pacote <a href="https://aur.archlinux.org/packages/chef-dk/">chef-dk</a> existente para o Arch Linux, mas sinta-se livre para baixar diretamente no site e executar o pacote de acordo com sua distribuição.</p>

<p><strong>1- Baixar o pacote do AUR:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://aur.archlinux.org/cgit/aur.git/snapshot/chef-dk.tar.gz</span></code></pre></td></tr></table></div></figure>


<p><strong>2- Descompactar e Compilar:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ tar -xvzf chef-dk.tar.gz
</span><span class='line'>
</span><span class='line'>$ cd chef-dk
</span><span class='line'>
</span><span class='line'>$ makepkg</span></code></pre></td></tr></table></div></figure>


<p><strong>3- Instalar o pacote:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo pacman -U chef-dk-2.5.3-1-x86_64.pkg.tar.xz</span></code></pre></td></tr></table></div></figure>


<p><strong>4- Confirmar que deu tudo certo:</strong>*</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chef --version
</span><span class='line'>
</span><span class='line'>Chef Development Kit Version: 2.5.3
</span><span class='line'>chef-client version: 13.8.5
</span><span class='line'>delivery version: master (73ebb72a6c42b3d2ff5370c476be800fee7e5427)
</span><span class='line'>berks version: 6.3.1
</span><span class='line'>kitchen version: 1.20.0
</span><span class='line'>inspec version: 1.51.21</span></code></pre></td></tr></table></div></figure>


<h3>Centos, Debian, Ubuntu&hellip;</h3>

<p><strong>N</strong>o CentOS, Ubuntu, Debian ou outras distribuições, o procedimento será relativamente parecido, portanto vejamos como seria no caso do CentOS baixando o arquivo diretamente do site de downloads:</p>

<p><strong>1- Baixar o arquivo .rpm para Red Hat:</strong> <a href="https://downloads.chef.io/chefdk">Aqui</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://packages.chef.io/files/stable/chefdk/2.5.3/el/7/chefdk-2.5.3-1.el7.x86_64.rpm</span></code></pre></td></tr></table></div></figure>


<p><strong>2- Instalar via RPM:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo rpm -ivh chefdk-2.5.3-1.el7.x86_64.rpm</span></code></pre></td></tr></table></div></figure>


<p><strong>3- Confirmar que deu tudo certo:</strong>*</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chef --version
</span><span class='line'>
</span><span class='line'>Chef Development Kit Version: 2.5.3
</span><span class='line'>chef-client version: 13.8.5
</span><span class='line'>delivery version: master (73ebb72a6c42b3d2ff5370c476be800fee7e5427)
</span><span class='line'>berks version: 6.3.1
</span><span class='line'>kitchen version: 1.20.0
</span><span class='line'>inspec version: 1.51.21</span></code></pre></td></tr></table></div></figure>


<h2>Testando o Chef Localmente</h2>

<p><strong>P</strong>ara facilitar o entendimento, vamos criar uma recipe simples para aplicarmos localmente.</p>

<p><strong>V</strong>amos começar criando uma recipe simples. Para isso, criaremos um arquivo chamado <strong>exemplo.rb</strong> com o seguinte conteúdo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package 'apache' do
</span><span class='line'>        package_name 'httpd'
</span><span class='line'>        action :install
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><strong>O</strong> que temos aqui?</p>

<ul>
<li>Resource Type: package (Pois queremos instalar o pacote httpd)</li>
<li>Resource Name: apache (Embora o nome do pacote no CentOS seja httpd, o nome do nosso resource aqui é apache, mas poderia ser qualquer coisa que desejarmos)</li>
<li>Resource Properties: Aqui temos apenas <em>package_name</em> como propriedade, no qual damos o nome do pacote desejado. OBS: Caso não utilizemos a propriedade <em>package_name</em>, ele buscará por um pacote com mesmo nome do resource. No nosso caso, demos o nome <em>apache</em> para nosso resource, portanto ele buscaria por um pacote chamado <em>apache</em> e falharia, pois no CentOS este pacote não existe.</li>
<li>Actions: install (Temos apenas uma ação para esta recipe, que é justamente a de instalar o pacote, CASO já não esteja instalado (idempotência))</li>
</ul>


<p><strong>S</strong>alve o arquivo e verifique o mesmo com os dois passos a seguir:</p>

<p><strong>1-</strong> Verifique se a sintaxe ruby está correta:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ruby -c exemplo.rb
</span><span class='line'>
</span><span class='line'>Syntax OK</span></code></pre></td></tr></table></div></figure>


<p><strong>2-</strong> Utilize uma ferramenta do chef para verificar se a recipe está de acordo com o esperado pelo Chef:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># foodcritic exemplo.rb
</span><span class='line'>Checking 1 files
</span><span class='line'>x
</span><span class='line'>FC011: Missing README in markdown format: ../README.md:1
</span><span class='line'>FC031: Cookbook without metadata.rb file: ../metadata.rb:1
</span><span class='line'>FC071: Missing LICENSE file: ../LICENSE:1</span></code></pre></td></tr></table></div></figure>


<p>PS: Não se espante por enquanto com estes Warnings. Ele apenas está indicando que não possuímos um metadata, um readme e uma licença, pois não os criamos para este exemplo.</p>

<p><strong>V</strong>erificado o código e aprovado, vamos executar esta recipe localmente.
<em>(Repare no retorno que será apresentado, onde ele verifica o tipo de resource e identifica que estamos rodando em uma máquina CentoOS, portanto ele utiliza por padrão o yum para instalar o pacote desejado.)</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># chef-client --local-mode exemplo.rb
</span><span class='line'>
</span><span class='line'>[2018-04-01T19:18:00+00:00] WARN: No config file found or specified on command line, using command line options.
</span><span class='line'>[2018-04-01T19:18:00+00:00] WARN: No cookbooks directory found at or above current directory.  Assuming /root.
</span><span class='line'>Starting Chef Client, version 13.8.5
</span><span class='line'>resolving cookbooks for run list: []
</span><span class='line'>Synchronizing Cookbooks:
</span><span class='line'>Installing Cookbook Gems:
</span><span class='line'>Compiling Cookbooks...
</span><span class='line'>[2018-04-01T19:18:03+00:00] WARN: Node kalib6.mylabserver.com has an empty run list.
</span><span class='line'>Converging 1 resources
</span><span class='line'>Recipe: @recipe_files::/root/exemplo.rb
</span><span class='line'>  * yum_package[apache] action install
</span><span class='line'>    - install version 2.4.6-67.el7.centos.6 of package httpd
</span><span class='line'>
</span><span class='line'>Running handlers:
</span><span class='line'>Running handlers complete
</span><span class='line'>Chef Client finished, 1/1 resources updated in 16 seconds
</span><span class='line'>[2018-04-01T19:18:17+00:00] WARN: No config file found or specified on command line, using command line options.</span></code></pre></td></tr></table></div></figure>


<p><strong>S</strong>imples, certo? O pacote httpd (Apache) foi instalado em nosso CentOS. Verificando o status do serviço httpd, veremos que o serviço não está rodando e também não está ativo.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># systemctl status httpd
</span><span class='line'>● httpd.service - The Apache HTTP Server
</span><span class='line'>   Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled; vendor preset: disabled)
</span><span class='line'>   Active: inactive (dead)
</span><span class='line'>     Docs: man:httpd(8)
</span><span class='line'>           man:apachectl(8)</span></code></pre></td></tr></table></div></figure>


<p><strong>I</strong>sto está correto, afinal o Chef vai deixar a máquina no estado que determinamos. E o determinado foi apenas instalar o pacote httpd. Mas de nada ele serve sem estar rodando como serviço, portanto vamos editar nossa recipe exemplo.rb e incluir nela um novo resource, desta vez um resource do tipo <em>service</em>, ou serviço. Sim, podemos ter diversos resources em uma mesma recipe. ;]</p>

<p><strong>E</strong>dite sua recipe para que ela possua o seguinte conteúdo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package 'apache' do
</span><span class='line'>        package_name 'httpd'
</span><span class='line'>        action :installchef_httpd_default.png
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>service 'httpd' do
</span><span class='line'>        action [:enable, :start]
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><strong>O</strong> que adicionamos aqui?</p>

<ul>
<li>Resource Type: service (Pois queremos gerenciar o serviço httpd)</li>
<li>Resource Name: httpd (Poderíamos ter utilizado qualquer nome, mas para simplificar e não precisarmos utilizar uma propriedade de nome, deixaremos o resource com o nome do serviço, <em>httpd</em>)</li>
<li>Actions: enable e start (Como nosso objetivo é não apenas iniciar o serviço, mas também deixá-lo habilitado para ser iniciado automaticamente após reinicialização, utilizaremos o <em>enable</em> e o <em>start</em>) &ndash;> equivalente aos comandos <em>systemctl enable httpd</em> e <em>systemctl start httpd</em></li>
</ul>


<p><strong>N</strong>ovamente vamos verificar nosso código via ruby e foodcritic:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ruby -c exemplo.rb && foodcritic exemplo.rb</span></code></pre></td></tr></table></div></figure>


<p><strong>E</strong> executar nossa recipe. (Novamente, uma vez que o pacote httpd já está instalado, esta parte da recipe será ignorada automaticamente pelo Chef.)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># chef-client --local-mode exemplo.rb
</span><span class='line'>[2018-04-01T19:32:26+00:00] WARN: No config file found or specified on command line, using command line options.
</span><span class='line'>[2018-04-01T19:32:26+00:00] WARN: No cookbooks directory found at or above current directory.  Assuming /root.
</span><span class='line'>Starting Chef Client, version 13.8.5
</span><span class='line'>resolving cookbooks for run list: []
</span><span class='line'>Synchronizing Cookbooks:
</span><span class='line'>Installing Cookbook Gems:
</span><span class='line'>Compiling Cookbooks...
</span><span class='line'>[2018-04-01T19:32:28+00:00] WARN: Node kalib6.mylabserver.com has an empty run list.
</span><span class='line'>Converging 2 resources
</span><span class='line'>Recipe: @recipe_files::/root/exemplo.rb
</span><span class='line'>  * yum_package[apache] action install (up to date)
</span><span class='line'>  * service[httpd] action enable
</span><span class='line'>    - enable service service[httpd]
</span><span class='line'>  * service[httpd] action start
</span><span class='line'>    - start service service[httpd]
</span><span class='line'>
</span><span class='line'>Running handlers:
</span><span class='line'>Running handlers complete
</span><span class='line'>Chef Client finished, 2/3 resources updated in 06 seconds
</span><span class='line'>[2018-04-01T19:32:33+00:00] WARN: No config file found or specified on command line, using command line options.</span></code></pre></td></tr></table></div></figure>


<p><strong>A</strong>gora podemos verificar que nosso serviço httpd está de fato rodando.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># systemctl status httpd && ps aux | grep httpd
</span><span class='line'>● httpd.service - The Apache HTTP Server
</span><span class='line'>   Loaded: loaded (/usr/lib/systemd/system/httpd.service; enabled; vendor preset: disabled)
</span><span class='line'>   Active: active (running) since Sun 2018-04-01 19:32:33 UTC; 1min 17s ago
</span><span class='line'>     Docs: man:httpd(8)
</span><span class='line'>           man:apachectl(8)
</span><span class='line'> Main PID: 2409 (httpd)
</span><span class='line'>   Status: "Total requests: 0; Current requests/sec: 0; Current traffic:   0 B/sec"
</span><span class='line'>   CGroup: /system.slice/httpd.service
</span><span class='line'>           ├─2409 /usr/sbin/httpd -DFOREGROUND
</span><span class='line'>           ├─2410 /usr/sbin/httpd -DFOREGROUND
</span><span class='line'>           ├─2411 /usr/sbin/httpd -DFOREGROUND
</span><span class='line'>           ├─2412 /usr/sbin/httpd -DFOREGROUND
</span><span class='line'>           ├─2413 /usr/sbin/httpd -DFOREGROUND
</span><span class='line'>           └─2414 /usr/sbin/httpd -DFOREGROUND
</span><span class='line'>
</span><span class='line'>Apr 01 19:32:33 kalib6.mylabserver.com systemd[1]: Starting The Apache HTTP Server...
</span><span class='line'>Apr 01 19:32:33 kalib6.mylabserver.com systemd[1]: Started The Apache HTTP Server.
</span><span class='line'>root      2409  0.0  0.2 226040  4948 ?        Ss   19:32   0:00 /usr/sbin/httpd -DFOREGROUND
</span><span class='line'>apache    2410  0.0  0.1 226040  2872 ?        S    19:32   0:00 /usr/sbin/httpd -DFOREGROUND
</span><span class='line'>apache    2411  0.0  0.1 226040  2872 ?        S    19:32   0:00 /usr/sbin/httpd -DFOREGROUND
</span><span class='line'>apache    2412  0.0  0.1 226040  2872 ?        S    19:32   0:00 /usr/sbin/httpd -DFOREGROUND
</span><span class='line'>apache    2413  0.0  0.1 226040  2872 ?        S    19:32   0:00 /usr/sbin/httpd -DFOREGROUND
</span><span class='line'>apache    2414  0.0  0.1 226040  2872 ?        S    19:32   0:00 /usr/sbin/httpd -DFOREGROUND
</span><span class='line'>root      2425  0.0  0.0 112660   976 pts/0    R+   19:33   0:00 grep --color=auto httpd</span></code></pre></td></tr></table></div></figure>


<p><strong>A</strong>lém disso, você pode testar seu novo servidor web diretamente em seu browser. Caso esteja executando tudo em localhost, pode utilizar <em>localhost</em> como endereço. Caso contrário, pode utilizar o endereço ip da máquina em questão.</p>

<p><img class="center" src="http://kalib.github.io/imgs/chef_httpd_default.png" title="'Chef'" ></p>

<p><strong>A</strong> página padrão do Apache não é algo que queremos, portanto vamos criar nosso próprio site (Hello World) para exemplificar melhor. Para isto editaremos novamente nossa recipe e incluiremos mais um resource, do tipo <em>file</em>, ou arquivo. O conteúdo de sua recipe deverá ficar assim:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package 'apache' do
</span><span class='line'>        package_name 'httpd'
</span><span class='line'>        action :install
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>service 'httpd' do
</span><span class='line'>        action [:enable, :start]
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>file '/var/www/html/index.html' do
</span><span class='line'>        content 'Hello World!'
</span><span class='line'>        mode '0755'
</span><span class='line'>        owner 'root'
</span><span class='line'>        group 'apache'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><strong>O</strong> que adicionamos aqui?</p>

<ul>
<li>Resource Type: file (Pois queremos gerenciar o nosso arquivo index.html, o quão, caso não exista, será criado)</li>
<li>Resource Name: /var/www/html/index.html (Poderíamos ter utilizado qualquer nome, mas para simplificar e não precisarmos utilizar uma propriedade de nome, deixaremos o resource com o nome do arquivo que vamos utilizar, <em>/var/www/html/index.html</em>)</li>
<li>Content: Hello World! (Para simplificar teremos uma simples string <em>Hello World!</em> como conteúdo de nosso site)</li>
<li>Mode: Permissão que desejamos atribuir ao arquivo index.html</li>
<li>Owner: Dono que deve ser atribuído ao arquivo index.html</li>
<li>Group: Grupo que deve ser atribuído ao arquivo index.html</li>
</ul>


<p><strong>N</strong>ovamente vamos verificar nosso código via ruby e foodcritic:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ruby -c exemplo.rb && foodcritic exemplo.rb</span></code></pre></td></tr></table></div></figure>


<p><strong>E</strong> executar nossa recipe. (Assim como anteriormente, o Chef ignorará as instruções referentes aos resources que já se encontram no estado desejado)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># chef-client --local-mode exemplo.rb          
</span><span class='line'>[2018-04-01T19:48:00+00:00] WARN: No config file found or specified on command line, using command line options.
</span><span class='line'>[2018-04-01T19:48:00+00:00] WARN: No cookbooks directory found at or above current directory.  Assuming /root.
</span><span class='line'>Starting Chef Client, version 13.8.5
</span><span class='line'>resolving cookbooks for run list: []
</span><span class='line'>Synchronizing Cookbooks:
</span><span class='line'>Installing Cookbook Gems:
</span><span class='line'>Compiling Cookbooks...
</span><span class='line'>[2018-04-01T19:48:02+00:00] WARN: Node kalib6.mylabserver.com has an empty run list.
</span><span class='line'>Converging 3 resources
</span><span class='line'>Recipe: @recipe_files::/root/exemplo.rb
</span><span class='line'>  * yum_package[apache] action install (up to date)
</span><span class='line'>  * service[httpd] action enable (up to date)
</span><span class='line'>  * service[httpd] action start (up to date)
</span><span class='line'>  * file[/var/www/html/index.html] action create
</span><span class='line'>    - create new file /var/www/html/index.html
</span><span class='line'>    - update content in file /var/www/html/index.html from none to 7f83b1
</span><span class='line'>    --- /var/www/html/index.html        2018-04-01 19:48:06.829566745 +0000
</span><span class='line'>    +++ /var/www/html/.chef-index20180401-2631-164958p.html     2018-04-01 19:48:06.829566745 +0000
</span><span class='line'>    @@ -1 +1,2 @@
</span><span class='line'>    +Hello World!
</span><span class='line'>    - change mode from '' to '0755'
</span><span class='line'>    - change owner from '' to 'root'
</span><span class='line'>    - change group from '' to 'apache'
</span><span class='line'>    - restore selinux security context
</span><span class='line'>
</span><span class='line'>Running handlers:
</span><span class='line'>Running handlers complete
</span><span class='line'>Chef Client finished, 1/4 resources updated in 06 seconds
</span><span class='line'>[2018-04-01T19:48:07+00:00] WARN: No config file found or specified on command line, using command line options.</span></code></pre></td></tr></table></div></figure>


<p><strong>P</strong>odemos verificar que o Chef criou o nosso arquivo index.html, atribuindo o dono, grupo e permissão que indicamos:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ls -lh /var/www/html/
</span><span class='line'>total 4.0K
</span><span class='line'>-rwxr-xr-x. 1 root apache 12 Apr  1 19:48 index.html</span></code></pre></td></tr></table></div></figure>


<p>Também podemos voltar em nosso navegador e atualizar a página para que vejamos o nosso Hello World ao invés da página padrão do Apache.</p>

<p><img class="center" src="http://kalib.github.io/imgs/chef_httpd_hw.png" title="'Chef'" ></p>

<h2>Vale a pena?</h2>

<p><strong>P</strong>ara realizarmos este mesmo processo todo manualmente, na mesma máquina CentoOS seria mais rápido do que utilizando o Chef. Vamos rever:</p>

<p><strong>O</strong> que precisamos?</p>

<ul>
<li>Instalar o pacote httpd</li>
<li>Habilitar e Iniciar o serviço httpd</li>
<li>Criar o arquivo index.html com o conteúdo &ldquo;Hello World!&rdquo;</li>
</ul>


<p><strong>F</strong>azendo manualmente seria apenas uma questão de executarmos X comandos:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># yum install httpd
</span><span class='line'>
</span><span class='line'># systemctl enable httpd && systemctl start httpd
</span><span class='line'>
</span><span class='line'># echo "Hello World!" &gt; /var/www/html/index.html
</span><span class='line'>
</span><span class='line'># chmod 0755 /var/www/html/index.html && chown root:apache /var/www/html/index.html</span></code></pre></td></tr></table></div></figure>


<p><strong>S</strong>im, é verdade que fazendo manualmente neste caso seria MUITO mais rápido. O importante é lembrar do que falamos anteriormente. E se não for apenas 1 servidor? E se for um grupo? E se você ao invés de apenas 3 resources, tiver 15? ou 40? E se alguém modificar algo em algum dos resources? Como você saberá? Vai verificar todos um a um para identificar o que precisa ser corrigido?</p>

<h1>Vantagens:</h1>

<p><strong>I</strong>magine que algum membro de sua equipe alterou a permissão do arquivo index.html sem lhe avisar, por exemplo ele foi lá e&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># chmod 0666 /var/www/html/index.html</span></code></pre></td></tr></table></div></figure>


<p><strong>L</strong>embrando que em nossa recipe exemplo.rb, definimos a permissão 0755. Neste caso, sempre que executarmos a recipe, ela vai verificar todos os resources e corrigir o que quer que tenha sido alterado.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># chef-client --local-mode exemplo.rb
</span><span class='line'>[2018-04-01T20:04:08+00:00] WARN: No config file found or specified on command line, using command line options.
</span><span class='line'>[2018-04-01T20:04:08+00:00] WARN: No cookbooks directory found at or above current directory.  Assuming /root.
</span><span class='line'>Starting Chef Client, version 13.8.5
</span><span class='line'>resolving cookbooks for run list: []
</span><span class='line'>Synchronizing Cookbooks:
</span><span class='line'>Installing Cookbook Gems:
</span><span class='line'>Compiling Cookbooks...
</span><span class='line'>[2018-04-01T20:04:10+00:00] WARN: Node kalib6.mylabserver.com has an empty run list.
</span><span class='line'>Converging 3 resources
</span><span class='line'>Recipe: @recipe_files::/root/exemplo.rb
</span><span class='line'>  * yum_package[apache] action install (up to date)
</span><span class='line'>  * service[httpd] action enable (up to date)
</span><span class='line'>  * service[httpd] action start (up to date)
</span><span class='line'>  * file[/var/www/html/index.html] action create
</span><span class='line'>    - change mode from '0666' to '0755'
</span><span class='line'>    - restore selinux security context
</span><span class='line'>
</span><span class='line'>Running handlers:
</span><span class='line'>Running handlers complete
</span><span class='line'>Chef Client finished, 1/4 resources updated in 06 seconds
</span><span class='line'>[2018-04-01T20:04:14+00:00] WARN: No config file found or specified on command line, using command line options.</span></code></pre></td></tr></table></div></figure>


<p><strong>R</strong>epare na linha *&ndash; change mode from &lsquo;0666&rsquo; to &lsquo;0755&rsquo;. O Chef acabou de corrigir automaticamente sem que nós tenhamos de vasculhar cada componente e arquivo em nosso servidor para saber o que foi alterado ou o que está fora do desejado. Novamente, aqui foi em um servidor único, com apenas um arquivo. Imagine ter que varrer manualmente diversos servidores e diversos arquivos e diretórios?</p>

<p><strong>N</strong>este exemplo, provavelmente o site poderia continuar funcionando, pois foi alterada apenas a permissão de um único arquivo, certo? Mas imagine que sem querer ele acabou parando o serviço httpd, ou até desinstalou o mesmo? Em uma instalação padrão com Chef Server, existem agendamentos que fazem com que o Chef execute as recipes a cada X minutos, portanto o serviço seria inicializado novamente automaticamente, ou mesmo instalado caso necessário.</p>

<p><strong>É</strong> fácil imaginar diversos cenários em que é útil ter a sua infraestrutura em formato de código, certo?</p>

<p><strong>I</strong>magine uma catástrofe em que seu servidor simplesmente parou de funcionar e você precisará criar outro. Novamente você teria que executar aqueles comandos. Se desde o início tivesse utilizado o Chef, ou outra ferramenta de Gerenciamento de Configuração, você poderia ter a sua recipe armazenada em um repositório Git, por exemplo, conforme mencionado no início deste post, e bastaria apenas executar o seu chef-client para instalar os pacotes necessários, habilitar e inicializar serviços necessários, criar arquivos necessários, etc.</p>

<p><strong>A</strong> imaginação é o seu limite. ;]</p>

<p><strong>E</strong>m posts futuros pretendo explorar mais a fundo o Chef, bem como outras ferramentas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conhecendo o Kubernetes - Clusters de Containers]]></title>
    <link href="http://kalib.github.io/blog/2017/06/24/conhecendo-o-kubernetes-clusters-de-containers/"/>
    <updated>2017-06-24T09:32:00-04:00</updated>
    <id>http://kalib.github.io/blog/2017/06/24/conhecendo-o-kubernetes-clusters-de-containers</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://kalib.github.io/imgs/kubernetes_logo.png" title="'Kubernetes'" ></p>

<h2>O que é Kubernetes</h2>

<p><strong>K</strong>ubernetes é uma solução Open Source desenvolvida pelo Google, originalmente chamada de K8s, como uma ferramenta para gerenciar clusters de containers (ou containeres, como prefira). Em 2005, quando a ferramenta foi desenvolvida, originalmente para uso interno, o Google doou o código à recém fundada <a href="https://www.cncf.io/">Cloud Native Computing Foundation</a>, em parceria com a <a href="https://www.linuxfoundation.org/">The Linux Foundation</a>.</p>

<p><strong>O</strong> motivo do leme em sua logomarca é devido à origem grega da palavra, que vem de Kuvernetes, que representa a pessoa que pilota o navio, timoneiro.</p>

<p><strong>C</strong>omo objetivo primário o Kubernetes provê uma plataforma de automação para deployments, escalonamento e operações de containers de aplicações em um cluster de hosts ou nodes.</p>

<p><strong>A</strong>ntes de seguir com a explicação, instalação e configuração do Kubernetes, estou supondo que você já possui algum conhecimento básico sobre o que sejam containers e tenha alguma familiaridade com o <a href="https://www.docker.com">Docker</a>. Caso não possua um entendimento básico sobre containers e Docker, sugiro que leia algo antes de seguir com este artigo. Possuo um post introdutório sobre containers com um exemplo básico e prático sobre como criar containers com Docker, bem como iniciar uma simples aplicação web &ndash;  <a href="http://kalib.github.io/blog/2015/08/20/docker-uma-alternativa-elegante-para-containers-no-linux/">aqui</a>.</p>

<p><strong>O</strong> Kubernetes é formado por uma série de componentes ou blocos que, quando utilizados coletivamente, fornecem um método de deployment, manutenção e escalonamento de clusters de aplicações baseadas em containers. Estes componentes, ou primitives como o Kubernetes os chama, foram desenvolvidos com o intuito de serem independentes, de forma que quase não se faz necessário ter conhecimento entre si para que possam funcionar e trabalhar juntos, visto que todos se comunicam e interligam através de uma API, sejam componentes internos do Kubernetes ou mesmo extensões e containers.</p>

<p><strong>E</strong>mbora tenha sido inicialmente desenvolvido para o deployment e utilização de <strong>bilhões de containers</strong> internamente no Google, desde que seu código passou a ser distribuído abertamente com a licença <a href="http://commons.apache.org/proper/commons-daemon/license.html">Apache Commons</a> o Kubernetes tem sido adotado formalmente por praticamente todos os grandes provedores de serviços em nuvem.</p>

<h2>Arquitetura do Kubernetes</h2>

<p><img class="center" src="http://kalib.github.io/imgs/kubernetes_architecture.png" title="'Kubernetes Architecture'" ></p>

<p><strong>D</strong>entre os principais componentes do Kubernetes, vamos destacar os seguintes:</p>

<ul>
<li><p><strong>Master ou Master Controller</strong> &ndash; Host que será o gerenciador principal do Kubernetes, responsável por gerenciar os Minions ou Nodes do Cluster;</p></li>
<li><p><strong>Nodes ou Minions</strong> &ndash; Embora normalmente a nomenclatura em diversos serviços de tecnolocia seja Node, o Kubernetes prefere chamar de Minions os hosts que fazem parte de um Cluster gerenciado pelo próprio Kubernetes. Este minion pode ser um servidor físico ou virtual, necessitando possuir um serviço de gerenciamento de containers, como o Docker, por exemplo;</p></li>
<li><p><strong>ETCD</strong> &ndash; Embora este seja um serviço independente, estou listando-o aqui pois este será fundamental em seu ciclo de desenvolvimento com o Kubernetes. Cada Minion deverá rodar o <a href="https://coreos.com/etcd/docs/latest/">ETCD</a> (serviço de comunicação e gerenciamento de configurações no formato par de Chave/Valor). O ETCD é utilizado para troca e armazenamento de informações sobre os containers, pods, minions, etc.</p></li>
<li><p><strong>Pods</strong> &ndash; São grupos de containers (um ou mais) rodando em um único minion do cluster. Cada Pod receberá um endereço IP único no Cluster como forma de possibilitar a utilização de portas sem a necessidade de se preocupar com conflitos;</p></li>
<li><p><strong>Labels</strong> &ndash; São informações de identificação na configuração e gerenciamento dos objetos (como Pods ou Minions) formados de pares &ldquo;chave:valor&rdquo;;</p></li>
<li><p><strong>Controllers</strong> &ndash; Além do Master Controller, dependendo do tamanho de sua infraestrutura e quantidade de Pods e Minions, você pode optar por ter mais de um Controller para dividir a carga e tarefas de gerenciamento. Os Controllers gerenciam um grupo de pods e, dependendo do estado de configuração desejada, podem acionar outros Controllers para lidar com as replicações e escalonamento. Os Controllers também são responsáveis pela substituiçao de Pods, caso um entre em estado de falha.</p></li>
</ul>


<h2>Instalação</h2>

<p><strong>V</strong>amos ao que interessa&hellip;</p>

<p><strong>N</strong>ovamente estou supondo que você já possui alguma familiaridade com Containers, Docker e, por consequência, com GNU/Linux.</p>

<p><strong>E</strong>estarei utilizando 4 servidores virtuais rodando CentOS 7 nos exemplos a seguir, mas fica a seu critério decidir quantos utilizar.</p>

<p><em>Certamente você optar por utilizar outra distribuição, seja Debian, Ubuntu, etc.. Uma vez que optei pelo CentOS 7, estarei utilizando comandos voltados para esta distro, mas sinta-se livre para adaptar seus comandos, como substituir o &ldquo;yum&rdquo; pelo &ldquo;apt-get&rdquo;, &ldquo;pacman&rdquo;, etc..</em></p>

<p><strong>E</strong>m minha configuração chamarei os servidores da seguinte forma:</p>

<ul>
<li>centos-master</li>
<li>centos-minion1</li>
<li>centos-minion2</li>
<li>centos-minion3</li>
</ul>


<p><strong>A</strong> primeira coisa que se deve fazer sempre que se pensa em trabalhar com clusters, independente de ser um cluster de containers ou não, é ter a certeza de que os servidores terão uma correta sincronização de relógios entre si. A forma mais simples e eficiente no nosso contexto é com a utilização do NTP, portanto comece instalando o NTP nos 4 servidores, bem como habilitando o serviço e iniciando-o:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># yum install -y ntp</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># systemctl enable ntpd && systemctl start ntpd</span></code></pre></td></tr></table></div></figure>


<p><strong>C</strong>aso queira certificar-se de que o serviço está realmente rodando:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># systemctl status ntpd
</span><span class='line'>
</span><span class='line'>● ntpd.service - Network Time Service
</span><span class='line'>   Loaded: loaded (/usr/lib/systemd/system/ntpd.service; enabled; vendor preset: disabled)
</span><span class='line'>   Active: active (running) since Sat 2017-06-24 17:46:02 UTC; 3s ago
</span><span class='line'>  Process: 1586 ExecStart=/usr/sbin/ntpd -u ntp:ntp $OPTIONS (code=exited, status=0/SUCCESS)
</span><span class='line'> Main PID: 1587 (ntpd)
</span><span class='line'>   Memory: 2.1M
</span><span class='line'>   CGroup: /system.slice/ntpd.service
</span><span class='line'>           └─1587 /usr/sbin/ntpd -u ntp:ntp -g</span></code></pre></td></tr></table></div></figure>


<p><strong>P</strong>inga?</p>

<p><strong>É</strong> importante nos certificarmos de que os servidores conseguem se comunicar e de que conseguem resolver nomes corretamente.</p>

<p><strong>N</strong>este exemplo, conforme informado mais acima, estamos utilizando 4 servidores com os seguintes nomes: <em>centos-master</em>, <em>centos-minion1</em>, <em>centos-minion2</em> e <em>centos-minion3</em>, portanto vamos editar o arquivo <strong>/etc/hosts</strong> de cada um deles para que possam se comunicar pelos nomes que desejamos:</p>

<p><strong>Insira as seguintes linhas no arquivo /etc/hosts dos 4 servidores:</strong></p>

<p><em>Lembre-se de substituir os IPs pelos IPs dos servidores em seu ambiente</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Ip local do servidor master
</span><span class='line'>172.31.22.126   centos-master
</span><span class='line'>
</span><span class='line'># Ip local do minion1
</span><span class='line'>172.31.120.16   centos-minion1
</span><span class='line'>
</span><span class='line'># Ip local do minion2
</span><span class='line'>172.31.25.6     centos-minion2
</span><span class='line'>
</span><span class='line'># Ip local do minion3
</span><span class='line'>172.31.123.22   centos-minion3</span></code></pre></td></tr></table></div></figure>


<p>Feito isto, tente pingar do master para os 3 minions utilizando os nomes especificados no /etc/hosts:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@kalib1 ~]# ping centos-minion1
</span><span class='line'>PING centos-minion1 (172.31.120.16) 56(84) bytes of data.
</span><span class='line'>64 bytes from centos-minion1 (172.31.120.16): icmp_seq=1 ttl=64 time=1.06 ms
</span><span class='line'>
</span><span class='line'>[root@kalib1 ~]# ping centos-minion2
</span><span class='line'>PING centos-minion2 (172.31.25.6) 56(84) bytes of data.
</span><span class='line'>64 bytes from centos-minion2 (172.31.25.6): icmp_seq=1 ttl=64 time=0.588 ms
</span><span class='line'>
</span><span class='line'>[root@kalib1 ~]# ping centos-minion3
</span><span class='line'>PING centos-minion3 (172.31.123.22) 56(84) bytes of data.
</span><span class='line'>64 bytes from centos-minion3 (172.31.123.22): icmp_seq=1 ttl=64 time=1.24 ms</span></code></pre></td></tr></table></div></figure>


<p><strong>V</strong>ocê pode realizar o mesmo teste a partir dos minions, pingando entre si e também para o centos-master.</p>

<p><strong>U</strong>ma vez que tenhamos certeza de que todos os hosts se comunicam, é hora de instalar mais alguns pacotes necessários.</p>

<p><strong>P</strong>rimeiramente, vamos configurar o repositório do Docker para o CentOS 7:</p>

<ul>
<li>Configurações de repositório retiradas dos repositórios CBS do Centos: <a href="http://cbs.centos.org/repos/virt7-docker-common-release/">http://cbs.centos.org/repos/virt7-docker-common-release/</a></li>
</ul>


<p><strong>V</strong>amos criar o seguinte arquivo de repositório:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim /etc/yum.repos.d/virt7-docker-common-release.repos</span></code></pre></td></tr></table></div></figure>


<p><strong>O</strong> conteúdo deste arquivo será o seguinte:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[virt7-docker-common-release]
</span><span class='line'>name=virt7-docker-common-release
</span><span class='line'>baseurl=http://cbs.centos.org/repos/virt7-docker-common-release/x86_64/os/
</span><span class='line'>gpgcheck=0</span></code></pre></td></tr></table></div></figure>


<p><em>Este arquivo deverá ser criado nos 4 servidores.</em></p>

<p><strong>E</strong>m seguida, vamos atualizar a nossa base de repositórios e pacotes, também <strong>nos 4 servidores</strong>, bem como habilitar o novo repositório para instalar os pacotes docker e kubernetes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># yum update</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># yum install -y --enablerepo=virt7-docker-common-release docker kubernetes</span></code></pre></td></tr></table></div></figure>


<p><strong>C</strong>omo dito na introdução, também precisaremos do etcd para o armazenamento e troca de configurações, portanto vamos instalá-lo também nos 4 hosts:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># yum instal -y etcd</span></code></pre></td></tr></table></div></figure>


<h2>Configuração</h2>

<p><strong>V</strong>amos começar com a configuração básica dos serviços envolvidos. Primeiramente, vamos abrir o arquivo de configuração do kubernetes e fazer algumas alterações:</p>

<p><em>/etc/kubernetes/config</em></p>

<p><strong>N</strong>o arquivo config altere as seguintes linhas:</p>

<p><em>Edite o valor do parâmetro KUBE_MASTER, de forma que nosso master possa ser encontrado pelo nome que definimos no hosts file. O valor original é &ldquo;&mdash;master=<a href="http://127.0.0.1:8080">http://127.0.0.1:8080</a>&rdquo;, portanto mudaremos para o seguinte:</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>KUBE_MASTER="--master=http://centos-master:8080"</span></code></pre></td></tr></table></div></figure>


<p><strong>A</strong>inda neste arquivo de configuração, vamos inserir a configuração do serviço ETCD, portanto inclua a seguinte linha ao final do arquivo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>KUBE_ETCD_SERVERS="--etcd-servers=http://centos-master:2379"</span></code></pre></td></tr></table></div></figure>


<p><strong>S</strong>eu arquivo de configuração deverá estar similar a este:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>###
</span><span class='line'># kubernetes system config
</span><span class='line'>#
</span><span class='line'># The following values are used to configure various aspects of all
</span><span class='line'># kubernetes services, including
</span><span class='line'>#
</span><span class='line'>#   kube-apiserver.service
</span><span class='line'>#   kube-controller-manager.service
</span><span class='line'>#   kube-scheduler.service
</span><span class='line'>#   kubelet.service
</span><span class='line'>#   kube-proxy.service
</span><span class='line'># logging to stderr means we get it in the systemd journal
</span><span class='line'>KUBE_LOGTOSTDERR="--logtostderr=true"
</span><span class='line'>
</span><span class='line'># journal message level, 0 is debug
</span><span class='line'>KUBE_LOG_LEVEL="--v=0"
</span><span class='line'>
</span><span class='line'># Should this cluster be allowed to run privileged docker containers
</span><span class='line'>KUBE_ALLOW_PRIV="--allow-privileged=false"
</span><span class='line'>
</span><span class='line'># How the controller-manager, scheduler, and proxy find the apiserver
</span><span class='line'>KUBE_MASTER="--master=http://centos-master:8080"
</span><span class='line'>
</span><span class='line'>KUBE_ETCD_SERVERS="--etcd-servers=http://centos-master:2379"</span></code></pre></td></tr></table></div></figure>


<p><strong>R</strong>epita esta mesma configuração nos 4 hosts. Todos eles devem utilizar exatamente os mesmos valores utilizados aqui, apontando KUBE_MASTER e KUBE_ETCD_SERVERS para centos-master, visto que este será o responsável por gerenciar todos os nossos minions.</p>

<p><strong>U</strong>ma vez que o arquivo de configuração do kubernetes esteja pronto nos 4 hosts, vamos configurar o serviço de API do kubernetes:</p>

<p><em>/etc/kubernetes/apiserver</em></p>

<p><strong>Esta configuração abaixo será apenas para o Master.</strong></p>

<p><em>Edite o valor do parâmetro KUBE_API_ADDRESS, que originalmente é &ldquo;&mdash;insecure-bind-address=127.0.0.1&rdquo;, de forma que possamos novamente receber comunicação dos demais hosts.</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>KUBE_API_ADDRESS="--address=0.0.0.0"</span></code></pre></td></tr></table></div></figure>


<p><em>Descomente as linhas KUBE_API_PORT e KUBELET_PORT, para que possamos estabelecer as portas de comunicação com a API:</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># The port on the local server to listen on.
</span><span class='line'>KUBE_API_PORT="--port=8080"
</span><span class='line'>
</span><span class='line'># Port minions listen on
</span><span class='line'>KUBELET_PORT="--kubelet-port=10250"</span></code></pre></td></tr></table></div></figure>


<p><em>Em nosso exemplo não utilizaremos o parâmetro KUBE_ADMISSION_CONTROL, o qual nos permite ter mais controles e restrições sobre quais nodes ou minios podem entrar em nosso ambiente, portanto vamos apenas comentar esta linha por enquanto:</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># default admission control policies
</span><span class='line'># KUBE_ADMISSION_CONTROL="--admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota"</span></code></pre></td></tr></table></div></figure>


<p><em>Nosso arquivo /etc/kubernetes/apiserver deverá estar assim:</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>##
</span><span class='line'># kubernetes system config
</span><span class='line'>#
</span><span class='line'># The following values are used to configure the kube-apiserver
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'># The address on the local server to listen to.
</span><span class='line'>KUBE_API_ADDRESS="--address=0.0.0.0"
</span><span class='line'>
</span><span class='line'># The port on the local server to listen on.
</span><span class='line'>KUBE_API_PORT="--port=8080"
</span><span class='line'>
</span><span class='line'># Port minions listen on
</span><span class='line'>KUBELET_PORT="--kubelet-port=10250"
</span><span class='line'>
</span><span class='line'># Comma separated list of nodes in the etcd cluster
</span><span class='line'>KUBE_ETCD_SERVERS="--etcd-servers=http://127.0.0.1:2379"
</span><span class='line'>
</span><span class='line'># Address range to use for services
</span><span class='line'>KUBE_SERVICE_ADDRESSES="--service-cluster-ip-range=10.254.0.0/16"
</span><span class='line'>
</span><span class='line'># default admission control policies
</span><span class='line'># KUBE_ADMISSION_CONTROL="--admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota"
</span><span class='line'>
</span><span class='line'># Add your own!
</span><span class='line'>KUBE_API_ARGS=""</span></code></pre></td></tr></table></div></figure>


<p><strong>S</strong>alve e feche o arquivo. Novamente, esta configuração deve ser feita apenas para o Master.</p>

<p><strong>A</strong>gora vamos configurar o serviço ETCD:</p>

<p><em>/etc/etcd/etcd.conf</em></p>

<p><strong>Esta configuração abaixo será apenas para o Master.</strong></p>

<p><em>Edite os valores dos parâmetros ETCD_LISTEN_CLIENT_URLS e ETCD_ADVERTISE_CLIENT_URLS, que originalmente apontam para localhost. Como desejamos que nosso etcd escute requisições dos demais hosts, altere para o seguinte:</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ETCD_LISTEN_CLIENT_URLS="http://0.0.0.0:2379"
</span><span class='line'>...
</span><span class='line'>...
</span><span class='line'>ETCD_ADVERTISE_CLIENT_URLS="http://0.0.0.0:2379"</span></code></pre></td></tr></table></div></figure>


<p><strong>N</strong>ovamente, não é necessário alterar a configuração do etcd nos demais hosts, apenas no Master.</p>

<p><strong>U</strong>ma vez que as configurações iniciais foram feitas, vamos habilitar e iniciar os serviços necessários <strong>no Master</strong>, sendo eles:</p>

<ul>
<li>etcd</li>
<li>kube-apiserver</li>
<li>kube-controller-manager</li>
<li>kube-scheduler</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># systemctl enable etcd kube-apiserver kube-controller-manager kube-scheduler</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># systemctl start etcd kube-apiserver kube-controller-manager kube-scheduler</span></code></pre></td></tr></table></div></figure>


<p><strong>O</strong>s 4 serviços devem estar rodando. Para termos certeza, vamos checar o status dos mesmos:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># systemctl status etcd kube-apiserver kube-controller-manager kube-scheduler | grep "(running)"
</span><span class='line'>   Active: active (running) since Sat 2017-06-24 21:45:37 UTC; 1min ago
</span><span class='line'>   Active: active (running) since Sat 2017-06-24 21:46:13 UTC; 1min ago
</span><span class='line'>   Active: active (running) since Sat 2017-06-24 21:44:25 UTC; 1min ago
</span><span class='line'>   Active: active (running) since Sat 2017-06-24 21:44:25 UTC; 1min ago</span></code></pre></td></tr></table></div></figure>


<p><strong>N</strong>ovamente, estes serviços serão iniciados no Master, e não nos nodes/minions, visto que estes utilizarão outros serviços.</p>

<p><strong>A</strong>gora vamos configurar o seguinte arquivo nos nodes/minions:</p>

<p><em>/etc/kubernetes/kubelet</em></p>

<p><strong>Este arquivo apenas deverá ser editado nos nodes/minions, não no Master.</strong></p>

<p><em>Vamos alterar o valor do parâmetro KUBELET_ADDRESS para que aceite comunicação não apenas do localhost:</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>KUBELET_ADDRESS="--address=0.0.0.0"</span></code></pre></td></tr></table></div></figure>


<p><em>Descomentaremos também a linha KUBELET_PORT, para que possamos ter uma porta definida para a comunicação do kubelet:</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># The port for the info server to serve on
</span><span class='line'>KUBELET_PORT="--port=10250"</span></code></pre></td></tr></table></div></figure>


<p><em>Vamos alterar o valor do parâmetro KUBELET_HOSTNAME para o nome que definimos <strong>para cada um dos minions</strong>, portanto em cada um deles este será um valor diferente. Supondo que este seja o minion1, utilizaremos:</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>KUBELET_HOSTNAME="--hostname-override=centos-minion1"</span></code></pre></td></tr></table></div></figure>


<p><em>Vamos também alterar o valor para KUBELET_API_SERVER, apontando para o nosso Master:</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>KUBELET_API_SERVER="--api-servers=http://centos-master:8080"</span></code></pre></td></tr></table></div></figure>


<p><em>Vamos comentar a linha KUBELET_POD_INFRA_CONTAINER, visto que não utilizaremos uma infraestrutura de containers externa, pois estaremos utilizando nossos próprios PODs e containers:</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># pod infrastructure container
</span><span class='line'>#KUBELET_POD_INFRA_CONTAINER="--pod-infra-container-image=registry.access.redhat.com/rhel7/pod-infrastructure:latest"</span></code></pre></td></tr></table></div></figure>


<p><em>Nosso arquivo deverá estar assim: (Lembrando que o parâmetro KUBELET_HOSTNAME deverá ser diferente para cada um dos 3 minions, respectivamente: centos-minion1, centos-minion2 e centos-minion3)</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>###
</span><span class='line'># kubernetes kubelet (minion) config
</span><span class='line'>
</span><span class='line'># The address for the info server to serve on (set to 0.0.0.0 or "" for all interfaces)
</span><span class='line'>KUBELET_ADDRESS="--address=0.0.0.0"
</span><span class='line'>
</span><span class='line'># The port for the info server to serve on
</span><span class='line'>KUBELET_PORT="--port=10250"
</span><span class='line'>
</span><span class='line'># You may leave this blank to use the actual hostname
</span><span class='line'>KUBELET_HOSTNAME="--hostname-override=centos-minion1"
</span><span class='line'>
</span><span class='line'># location of the api-server
</span><span class='line'>KUBELET_API_SERVER="--api-servers=http://centos-master:8080"
</span><span class='line'>
</span><span class='line'># pod infrastructure container
</span><span class='line'>#KUBELET_POD_INFRA_CONTAINER="--pod-infra-container-image=registry.access.redhat.com/rhel7/pod-infrastructure:latest"
</span><span class='line'>
</span><span class='line'># Add your own!
</span><span class='line'>KUBELET_ARGS=""</span></code></pre></td></tr></table></div></figure>


<p><strong>U</strong>ma vez que estas configurações também estão feitas nos 3 minions, vamos habilitar e iniciar os serviços necessários nos minions:</p>

<ul>
<li>kube-proxy</li>
<li>kube-kubelet</li>
<li>docker</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># systemctl enable kube-proxy kubelet docker</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># systemctl start kube-proxy kubelet docker</span></code></pre></td></tr></table></div></figure>


<p><strong>N</strong>ovamente, vamos ter certeza de que os 3 serviços estão rodando:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># systemctl status kube-proxy kubelet docker | grep "(running)"
</span><span class='line'>   Active: active (running) since Sat 2017-06-24 21:44:23 UTC; 1h 16min ago
</span><span class='line'>   Active: active (running) since Sat 2017-06-24 21:44:27 UTC; 1h 16min ago
</span><span class='line'>   Active: active (running) since Sat 2017-06-24 21:44:27 UTC; 1h 16min ago</span></code></pre></td></tr></table></div></figure>


<p><strong>N</strong>ovamente, estes 3 serviços devem ser habilitados e iniciados nos 3 minions.</p>

<p><strong>N</strong>este momento já temos nosso cluster rodando, com um master e 3 minions. :D</p>

<h2>Testando o Cluster com o Kubernetes</h2>

<p><strong>A</strong>gora que temos a configuração básica de nosso Master Controller e de 3 minions, vamos testar nosso cluster.</p>

<p><strong>U</strong>tilizaremos o utilitário kubectl (KubeControl) disponível com o kubernetes. Caso tenha interesse em ver os parâmetros e funções do mesmo&hellip; <em>$ man kubectl</em></p>

<p><strong>V</strong>amos verificar a lista dos nodes ou minions que temos neste momento registrados em nosso Cluster. Vamos digitar alguns comandos em nosso Master Controller (centos-master):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@kalib1 ~]# kubectl get nodes
</span><span class='line'>NAME             STATUS    AGE
</span><span class='line'>centos-minion1   Ready     17m
</span><span class='line'>centos-minion2   Ready     15m
</span><span class='line'>centos-minion3   Ready     10m</span></code></pre></td></tr></table></div></figure>


<p><strong>O</strong>s três nodes criados e configurados anteriormente já são reconhecidos pelo nosso Kubernetes através do Master Controller. Além de registrados, estão com o status Ready, o que indica que estão prontos para funcionar e executar o que precisarmos.</p>

<p><em>Caso deseje conhecer mais parâmetros que a função <strong>get</strong> do kubectl possui, podemos invocar o manual desta função: $ man kubectl-get</em></p>

<p><strong>A</strong>lém do status, podemos conseguir diversas outras informações dos nodes através do <em>kubectl</em>: <em>(Ex: kubectl describe nodes)</em> Isto lhe daria informações sobre todos os nodes. Vamos experimentar com um node em específico.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@kalib1 ~]# kubectl describe node centos-minion1
</span><span class='line'>Name:                   centos-minion1
</span><span class='line'>Role:
</span><span class='line'>Labels:                 beta.kubernetes.io/arch=amd64
</span><span class='line'>                        beta.kubernetes.io/os=linux
</span><span class='line'>                        kubernetes.io/hostname=centos-minion1
</span><span class='line'>Taints:                 &lt;none&gt;
</span><span class='line'>CreationTimestamp:      Tue, 20 Jun 2017 19:27:31 +0000
</span><span class='line'>Phase:
</span><span class='line'>Conditions:
</span><span class='line'>  Type                  Status  LastHeartbeatTime                       LastTransitionTime                      Reason     Message
</span><span class='line'>  ----                  ------  -----------------                       ------------------                      ------     -------
</span><span class='line'>  OutOfDisk             False   Sun, 25 Jun 2017 01:39:38 +0000         Fri, 23 Jun 2017 17:31:44 +0000         KubeletHasSufficientDisk    kubelet has sufficient disk space available
</span><span class='line'>  MemoryPressure        False   Sun, 25 Jun 2017 01:39:38 +0000         Tue, 20 Jun 2017 19:27:31 +0000         KubeletHasSufficientMemory  kubelet has sufficient memory available
</span><span class='line'>  DiskPressure          False   Sun, 25 Jun 2017 01:39:38 +0000         Tue, 20 Jun 2017 19:27:31 +0000         KubeletHasNoDiskPressure    kubelet has no disk pressure
</span><span class='line'>  Ready                 True    Sun, 25 Jun 2017 01:39:38 +0000         Fri, 23 Jun 2017 17:31:54 +0000         KubeletReady                        kubelet is posting ready status
</span><span class='line'>Addresses:              172.31.120.16,172.31.120.16,centos-minion1
</span><span class='line'>Capacity:
</span><span class='line'> alpha.kubernetes.io/nvidia-gpu:        0
</span><span class='line'> cpu:                                   1
</span><span class='line'> memory:                                1015348Ki
</span><span class='line'> pods:                                  110
</span><span class='line'>Allocatable:
</span><span class='line'> alpha.kubernetes.io/nvidia-gpu:        0
</span><span class='line'> cpu:                                   1
</span><span class='line'> memory:                                1015348Ki
</span><span class='line'> pods:                                  110
</span><span class='line'>System Info:
</span><span class='line'> Machine ID:                    f9afeb75a5a382dce8269887a67fbf58
</span><span class='line'> System UUID:                   EC2C8A0E-91D6-F54E-5A49-534A6A903FDA
</span><span class='line'> Boot ID:                       20961efd-c946-481a-97cb-7788209551ae
</span><span class='line'> Kernel Version:                3.10.0-327.28.2.el7.x86_64
</span><span class='line'> OS Image:                      CentOS Linux 7 (Core)
</span><span class='line'> Operating System:              linux
</span><span class='line'> Architecture:                  amd64
</span><span class='line'> Container Runtime Version:     docker://1.12.6
</span><span class='line'> Kubelet Version:               v1.5.2
</span><span class='line'> Kube-Proxy Version:            v1.5.2
</span><span class='line'>ExternalID:                     centos-minion1
</span><span class='line'>Non-terminated Pods:            (0 in total)
</span><span class='line'>  Namespace                     Name            CPU Requests    CPU Limits      Memory Requests Memory Limits
</span><span class='line'>  ---------                     ----            ------------    ----------      --------------- -------------
</span><span class='line'>Allocated resources:
</span><span class='line'>  (Total limits may be over 100 percent, i.e., overcommitted.
</span><span class='line'>  CPU Requests  CPU Limits      Memory Requests Memory Limits
</span><span class='line'>  ------------  ----------      --------------- -------------
</span><span class='line'>  0 (0%)        0 (0%)          0 (0%)          0 (0%)
</span><span class='line'>Events:
</span><span class='line'>  FirstSeen     LastSeen        Count   From                            SubObjectPath   Type            Reason             Message
</span><span class='line'>  ---------     --------        -----   ----                            -------------   --------        ------             -------
</span><span class='line'>  15m           15m             1       {kubelet centos-minion1}                        Normal          Starting           Starting kubelet.
</span><span class='line'>  15m           15m             1       {kubelet centos-minion1}                        Warning         ImageGCFailed      unable to find data for container /
</span><span class='line'>  15m           15m             2       {kubelet centos-minion1}                        Normal          NodeHasSufficientDisk       Node centos-minion1 status is now: NodeHasSufficientDisk
</span><span class='line'>  15m           15m             2       {kubelet centos-minion1}                        Normal          NodeHasSufficientMemory     Node centos-minion1 status is now: NodeHasSufficientMemory
</span><span class='line'>  15m           15m             2       {kubelet centos-minion1}                        Normal          NodeHasNoDiskPressure       Node centos-minion1 status is now: NodeHasNoDiskPressure
</span><span class='line'>  15m           15m             1       {kubelet centos-minion1}                        Warning         Rebooted           Node centos-minion1 has been rebooted, boot id: 20961efd-c946-481a-97cb-7788209551ae</span></code></pre></td></tr></table></div></figure>


<p><strong>O</strong>bviamente recebemos um retorno com muitas informações em formato Json, o que nem sempre é como esperamos. Existem formas de filtrar os resultados e conseguir informações mais precisas, como o bom e velho grep:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@kalib1 ~]# kubectl describe node centos-minion1 | grep Addresses
</span><span class='line'>Addresses:              172.31.120.16,172.31.120.16,centos-minion1</span></code></pre></td></tr></table></div></figure>


<p><strong>V</strong>ocê também pode utilizar expressões regulares e a sintaxe do próprio Kubernetes para consultas mais complexas, como por exemplo, formatar a minha saída Json de forma a pegar apenas a listagem de status dos meus nodes que estão com Ready = True:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@kalib1 ~]# kubectl get nodes -o jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'| tr ';' "\n" | grep "Ready=True"
</span><span class='line'>
</span><span class='line'>Ready=True
</span><span class='line'>Ready=True
</span><span class='line'>Ready=True</span></code></pre></td></tr></table></div></figure>


<p><strong>A</strong> sua criatividade é o limite. ;]</p>

<p><strong>N</strong>ão temos nenhum pod configurado, mas também poderíamos utilizar <em>kubectl get</em> para conseguir a listagem de nossos pods:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@kalib1 ~]# kubectl get pods
</span><span class='line'>
</span><span class='line'>No resources found.</span></code></pre></td></tr></table></div></figure>


<h2>Criando pods</h2>

<p><strong>A</strong>ssim como com o Docker, Ansible e algumas outras ferramentas, utilizaremos a linguagem <a href="https://pt.wikipedia.org/wiki/YAML">YAML</a> para criar nossos arquivos de configuração.</p>

<p><strong>C</strong>riaremos um diretório chamado <em>Builds</em> em nosso Master Controller apenas para melhor organizar nossos arquivos de configuração e ficar mais fácil encontrá-los no futuro:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># mkdir Builds
</span><span class='line'>
</span><span class='line'># cd Builds</span></code></pre></td></tr></table></div></figure>


<p><strong>P</strong>ara criarmos Pods, o que fazemos na verdade é criar arquivos de configuração que vão dizer ao Kubernetes qual o estado em que desejamos nossa infraestrutura. O papel do Kubernetes é ler esta configuração e assegurar que o estado de nossa infraestrutura reflita o estado desejado.</p>

<p><strong>P</strong>ara facilitar, vamos utilizar exemplos encontrados na própria documentação do Kubernetes. Comecemos com a criação de um Pod para um servidor web Nginx.</p>

<p><strong>V</strong>amos criar um arquivo chamado nginx.yaml dentro do diretório Builds que criamos anteriormente:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># vim nginx.yaml</span></code></pre></td></tr></table></div></figure>


<p><strong>N</strong>o arquivo indicaremos alguns atributos ou variáveis, bem como seus respectivos valores:</p>

<ul>
<li>apiVersion &ndash; Indica a versão da API do kubernetes utilizada</li>
<li>kind &ndash; o tipo de recurso que desejamos</li>
<li>metadata &ndash; dados referentes ao recurso desejado</li>
<li>spec &ndash; especificações sobre o que este recurso irá conter</li>
</ul>


<p><strong>V</strong>amos criar um Pod contendo um único container rodando a versão 1.7.9 do nginx bem como disponibilizando a porta 80 para receber conexões. Este deverá ser o conteúdo do arquivo <em>nginx.yaml</em>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apiVersion: v1
</span><span class='line'>kind: Pod
</span><span class='line'>metadata:
</span><span class='line'>  name: nginx
</span><span class='line'>spec:
</span><span class='line'>  containers:
</span><span class='line'>    - name: nginx
</span><span class='line'>      image: nginx:1.7.9
</span><span class='line'>      ports:
</span><span class='line'>      - containerPort: 80</span></code></pre></td></tr></table></div></figure>


<p><strong>A</strong>ntes de executarmos, vamos nos certificar novamente de duas coisas:</p>

<ul>
<li>Que realmente não temos nenhum Pod criado e ativo;</li>
<li>Que não temos nenhum container rodando em nossos nodes.</li>
</ul>


<p><em>No centos-master:</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@kalib1 Builds]# kubectl get pods
</span><span class='line'>
</span><span class='line'>No resources found.</span></code></pre></td></tr></table></div></figure>


<p><em>No centos-minion1: (Execute o mesmo comando nos demais nodes (centos-minion2 e centos-minion3))</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@kalib2 ~]# docker ps
</span><span class='line'>
</span><span class='line'>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span></code></pre></td></tr></table></div></figure>


<p><em>Novamente: Se você não faz ideia do que acabei de digitar, (docker ps) volte e leia um pouco sobre <a href="http://kalib.github.io/blog/2015/08/20/docker-uma-alternativa-elegante-para-containers-no-linux/">Docker</a> antes de seguir com este artigo.</em></p>

<p><strong>C</strong>omo podemos ver, não temos nenhum Pod, bem como nenhum container rodando em nossos nodes.</p>

<p><strong>V</strong>amos utilizar <em>kubectl create</em> para criar o Pod utilizando o arquivo que criamos <em>nginx.yaml</em>: <em>Executaremos este comando no Master Controller &ndash; centos-master</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@kalib1 Builds]# kubectl create -f nginx.yaml
</span><span class='line'>
</span><span class='line'>pod "nginx" created</span></code></pre></td></tr></table></div></figure>


<p><strong>O</strong> Kubernetes está dizendo que nosso Pod &ldquo;nginx&rdquo; foi criado. Vamos verificar:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@kalib1 Builds]# kubectl get pods
</span><span class='line'>
</span><span class='line'>NAME      READY     STATUS    RESTARTS   AGE
</span><span class='line'>nginx     1/1       Running   0          1m</span></code></pre></td></tr></table></div></figure>


<p><strong>O</strong> pod está criado e rodando. Agora, execute novamente <em>docker ps</em> nos 3 nodes para identificar em qual deles o container foi criado. Sim, como não especificamos nada, o Kubernetes vai verificar os recursos disponíveis no momento e vai lançar onde ele achar mais adequado.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@kalib4 ~]# docker ps
</span><span class='line'>
</span><span class='line'>CONTAINER ID        IMAGE                                      COMMAND                  CREATED             STATUS              PORTS               NAMES
</span><span class='line'>6de8e22e1536        nginx:1.7.9                                "nginx -g 'daemon off"   2 minutes ago       Up 2 minutes                            k8s_nginx.b0df00ef_nginx_default_d4debd3a-594c-11e7-b587-06827a5b32d4_583881e0
</span><span class='line'>ae49b36ae11b        gcr.io/google_containers/pause-amd64:3.0   "/pause"                 2 minutes ago       Up 2 minutes                            k8s_POD.b2390301_nginx_default_d4debd3a-594c-11e7-b587-06827a5b32d4_fb5c834f</span></code></pre></td></tr></table></div></figure>


<p><strong>S</strong>im, existem dois containers rodando. Um deles é o nosso &ldquo;nginx&rdquo;, enquanto que o outro é um container padrão do google chamado &ldquo;/pause&rdquo;, o qual será responsável pela manutenção de alguns recursos de nosso cluster.</p>

<p><strong>P</strong>odemos novamente pedir a descrição deste pod que acabamos de criar:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@kalib1 Builds]# kubectl describe pod nginx
</span><span class='line'>
</span><span class='line'>Name:           nginx
</span><span class='line'>Namespace:      default
</span><span class='line'>Node:           centos-minion3/172.31.123.22
</span><span class='line'>Start Time:     Sun, 25 Jun 2017 02:20:18 +0000
</span><span class='line'>Labels:         &lt;none&gt;
</span><span class='line'>Status:         Running
</span><span class='line'>IP:             172.17.0.2
</span><span class='line'>Controllers:    &lt;none&gt;
</span><span class='line'>Containers:
</span><span class='line'>  nginx:
</span><span class='line'>    Container ID:               docker://6de8e22e153618271bb6e8095c68070126541331c8acfc3f5d1a654f4b978454
</span><span class='line'>    Image:                      nginx:1.7.9
</span><span class='line'>    Image ID:                   docker-pullable://docker.io/nginx@sha256:e3456c851a152494c3e4ff5fcc26f240206abac0c9d794affb40e0714846c451
</span><span class='line'>    Port:                       80/TCP
</span><span class='line'>    State:                      Running
</span><span class='line'>      Started:                  Sun, 25 Jun 2017 02:20:27 +0000
</span><span class='line'>    Ready:                      True
</span><span class='line'>    Restart Count:              0
</span><span class='line'>    Volume Mounts:              &lt;none&gt;
</span><span class='line'>    Environment Variables:      &lt;none&gt;
</span><span class='line'>Conditions:
</span><span class='line'>  Type          Status
</span><span class='line'>  Initialized   True
</span><span class='line'>  Ready         True
</span><span class='line'>  PodScheduled  True
</span><span class='line'>No volumes.
</span><span class='line'>QoS Class:      BestEffort
</span><span class='line'>Tolerations:    &lt;none&gt;
</span><span class='line'>Events:
</span><span class='line'>  FirstSeen     LastSeen        Count   From                            SubObjectPath           Type            Reason     Message
</span><span class='line'>  ---------     --------        -----   ----                            -------------           --------        ------     -------
</span><span class='line'>  6m            6m              1       {default-scheduler }                                    Normal          Scheduled  Successfully assigned nginx to centos-minion3
</span><span class='line'>  6m            6m              1       {kubelet centos-minion3}        spec.containers{nginx}  Normal          Pulling    pulling image "nginx:1.7.9"
</span><span class='line'>  6m            6m              2       {kubelet centos-minion3}                                Warning         MissingClusterDNS   kubelet does not have ClusterDNS IP configured and cannot create Pod using "ClusterFirst" policy. Falling back to DNSDefault policy.
</span><span class='line'>  6m            6m              1       {kubelet centos-minion3}        spec.containers{nginx}  Normal          Pulled     Successfully pulled image "nginx:1.7.9"
</span><span class='line'>  6m            6m              1       {kubelet centos-minion3}        spec.containers{nginx}  Normal          Created    Created container with docker id 6de8e22e1536; Security:[seccomp=unconfined]
</span><span class='line'>  6m            6m              1       {kubelet centos-minion3}        spec.containers{nginx}  Normal          Started    Started container with docker id 6de8e22e1536</span></code></pre></td></tr></table></div></figure>


<p><strong>O</strong>bviamente que isto é apenas a configuração mais básica que se possa imaginar, sem storage, mapeamentos de portas, redirecionamentos, rotas, etc. A ideia é apenas uma apresentação inicial..o que é o Kubernetes.</p>

<p><strong>H</strong>appy Hacking</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recebendo Alarmes do AWS Diretamente no Slack]]></title>
    <link href="http://kalib.github.io/blog/2017/03/11/recebendo-alarmes-do-aws-diretamente-no-slack/"/>
    <updated>2017-03-11T12:03:00-05:00</updated>
    <id>http://kalib.github.io/blog/2017/03/11/recebendo-alarmes-do-aws-diretamente-no-slack</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://kalib.github.io/imgs/aws_slack.png" title="'AWS_Slack'" ></p>

<p><strong>A</strong>ntes de entrar na configuração dos serviços, talvez seja necessário apresentar o <a href="http://www.slack.com">Slack</a>, visto que muitos ainda não conhecem ou utilizam esta poderosa e versátil ferramenta de comunicação instantânea para times.</p>

<p><strong>S</strong>lack é uma plataforma para comunicação entre times que desejam um ambiente mais dinâmico e ágil. Diferentemente de muitas plataformas de chat disponíveis, como o Google Hangouts, o Slack nos permite criar canais distintos com membros distintos de um mesmo time fazendo parte daquele canal específico. Não, não estou falando de chat em grupo, mas sim canais específicos que permitem integrações com serviços distintos, como receber notificações sobre commits feitos em um repositório ou branch específico no github, notificações de tickets abertos em ferramentas como o Jira, por exemplo, etc. O Slack é completamente programável e escalável, o que nos permite ter inúmeras funcionalidas.</p>

<p><strong>P</strong>rovavelmente não seja necessário apresentar o AWS, ou Amazon Web Services, visto que já está no mercado desde 2006, no entanto cabe um resumo para os que não estão familiarizados com o mesmo (embora o público alvo deste post seja quem já possui alguma familiaridade com AWS).</p>

<p><strong>A</strong>ws ou Amazon Web Services é uma plataforma de serviços em nuvem segura, oferecendo poder computacional, armazentamento de banco de dados, distribuição de conteúdo e outras funcionalidades.</p>

<p><strong>P</strong>or que eu deveria ter alarmes e notificações do AWS em um serviço de chat como o Slack quando já recebo estas notificações por email?</p>

<p><strong>É</strong> verdade que o uso mais comum para envio de alarmes e notificações do AWS costuma ser via email, no entanto fica fácil identificar alguns problemas com este método. O principal e mais recorrente que vejo é o caso de as notificações caírem em um email específico visto por poucas pessoas (na maioria das vezes) ou nem visto sequer, pois geralmente as pessoas ficam cansadas de olhar notificações e ter sua caixa de entrada entupida com eles portanto criam filtros que jogam os emails de notificação para um diretório que dificilmente será checado.</p>

<p><strong>O</strong>utro problema comum com esta prática é a demora até que alguém leia a notificação no meio de tantos outros na pasta ou filtro criado e, muitas vezes, quando se vê a notificação, o problema já está aguardando uma solução há horas.</p>

<p><strong>D</strong>eixando claro, não estou defendendo a ideia de abolir as notificações por email. Eu mesmo utilizo ambos, afinal o email continua bastante eficiente para fins de armazenamento e checagem histórica, por exemplo.</p>

<p><strong>U</strong>ma vez que nos dias atuais os times de TI estão cada vez mais unificados e dinâmicos, buscando incorporar uma mentalidade DevOps e Agile, a comunicação rápida e eficiente se torna um fator primordial para o sucesso de qualquer projeto. Ter um local centralizado para conversar com os demais membros do time, trocar arquivos, detalhes de projetos, receber notificações de commits, prazos, tickets, documentação e, por que não, notificações de monitoramento e alarmes, torna-se essencial.</p>

<p><strong>V</strong>amos então entender como funcionaria uma solução para enviar as notificações e alarmes do AWS para o Slack.</p>

<p><strong>O</strong> que utilizaremos:</p>

<ol>
<li>No Slack:

<ul>
<li>Um plugin ou Slack App chamado <strong>Incoming WebHooks</strong></li>
<li>O nome de um canal para envio das notificações</li>
</ul>
</li>
<li>No AWS:

<ul>
<li>Serviço <strong>SNS Topic</strong></li>
<li>Serviço <strong>CloudWatch</strong></li>
<li>Serviço <strong>Lambda Function</strong></li>
</ul>
</li>
</ol>


<p><strong>V</strong>amos lá&hellip;</p>

<p><strong>Slack</strong></p>

<p><strong>V</strong>amos começar escolhendo o canal no Slack no qual desejo receber a minha notificação ou alarme: #devops</p>

<p><em>Estou supondo que você já utiliza o Slack e já possui um time criado no mesmo. Caso ainda não, crie um time no Slack seguindo os passos descritos no <a href="https://slack.com/">site oficial</a> antes de seguir em frente&hellip; ;]</em></p>

<p><strong>O</strong> próximo passo é configurar a integração instalando o Plugin ou Slack App <strong>Incoming WebHooks</strong>. Para isto, acesse a página de apps de seu time no Slack: <a href="https://SEUTIME.slack.com/apps">https://SEUTIME.slack.com/apps</a></p>

<p><strong>P</strong>esquise por Incoming WebHooks e você terá apenas um resultado, portanto clique sem medo.</p>

<p><img class="center" src="http://kalib.github.io/imgs/slack1.png" title="'Incoming WebHook'" ></p>

<p><strong>C</strong>lique no pequeno lápis que se encontrará no canto direito para editar as configurações do Incoming WebHook. Os únicos campos que precisaremos editar neste momento são os seguintes:
  * Post to Channel &ndash; Aqui indicarei o meu canal: #devops
  * Customize Name &ndash; Aqui indicarei um nome qualquer: AWS-Alerts</p>

<p><strong>Importante:</strong> Repare que nesta página de configurações ele lhe passará uma entrada ou URL com o código para o seu WebHook. Esta informação estará listada em <strong>Webhook URL</strong> e será algo como: *<a href="https://hooks.slack.com/services/T434P71A4/U4G3JUG13/kPjvXY4Kd8wPm4TvrEqhN6Dv*.">https://hooks.slack.com/services/T434P71A4/U4G3JUG13/kPjvXY4Kd8wPm4TvrEqhN6Dv*.</a> Copie esta informação em algum local de fácil acesso pois precisaremos desta URL para a configuração que faremos a seguir no AWS.</p>

<p><strong>S</strong>alve suas configurações e vamos configurar os serviços do AWS para que nosso WebHook possa receber as informações devidamente.</p>

<p><strong>Amazon Web Services</strong></p>

<p><strong>S</strong>e você já possui alguma familiaridade com o AWS, sabe que existem duas formas principais para administração e gerenciamento de nossos serviços: Pela interface web de gerenciamento (GUI) OU pela linha de comandos através da AWS CLI Tool que se comunica com a API do AWS. Este procedimento, assim como praticamente todos os outros, pode ser realizado por ambos os meios.</p>

<p><strong>S</strong>e você também gosta de automação, provavelmente prefere utilizar a CLI, no entanto irei listar aqui o procedimento em ambos os meios.</p>

<p><strong>Passo 1: Criando um SNS Topic para receber os alarmes</strong></p>

<p><strong>1.1 &ndash; Pela Interface Web de Gerenciamento (GUI)</strong></p>

<ul>
<li>A partir da Dashboard principal, clique ou busque pelo serviço SNS;</li>
<li>Crie um novo SNS Topic:

<ul>
<li>No menu da lateral esquerda, clique em <strong>Topics</strong>;</li>
<li>Clique em <strong>Create new topic</strong>;</li>
<li>Preencha os campos <strong>Name</strong> (obrigatório) e <strong>Display Name</strong> (opcional) para o seu tópico. Para este exemplo utilizarei <em>aws-slack-alerts</em> como <strong>Name</strong> e <em>aws-slack</em> como <strong>Display Name</strong>; <em>(O Display Name só é necessário em caso de você também desejar enviar notificações por SMS)</em></li>
<li>Clique em <strong>Create Topic</strong></li>
</ul>
</li>
<li>Agora você já deve ser capaz de ver seu SNS Topic na lista.</li>
</ul>


<p><strong>1.2 &ndash; Pela AWS CLI Tool</strong></p>

<p><em>Estou assumindo que se você optou por utilizar este método, é porque já possui sua CLI configurada e autenticando em sua conta do AWS com sua chave. Caso você não saiba do que estou falando, sugiro que siga a <a href="https://aws.amazon.com/pt/cli/?sc_channel=PS&amp;sc_campaign=acquisition_CA&amp;sc_publisher=google&amp;sc_medium=command_line_b&amp;sc_content=aws_cli_bmm&amp;sc_detail=%2Baws%20%2Bcli&amp;sc_category=command_line&amp;sc_segment=161196437429&amp;sc_matchtype=b&amp;sc_country=CA&amp;s_kwcid=AL!4422!3!161196437429!b!!g!!%2Baws%20%2Bcli&amp;ef_id=V8jOHQAABelSRAnr:20170311204146:s">documentação oficial</a> para isto.</em></p>

<ul>
<li>Pela CLI tool, digite o seguinte comando, indicando a região na qual você deseja criar seu tópico e o nome desejado:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">aws</span> <span class="n">sns</span> <span class="n">create</span><span class="o">-</span><span class="n">topic</span>
</span><span class='line'>    <span class="o">--</span><span class="n">region</span> <span class="n">us</span><span class="o">-</span><span class="n">west</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="o">--</span><span class="n">name</span> <span class="n">aws</span><span class="o">-</span><span class="n">slack</span><span class="o">-</span><span class="n">alerts</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>IMPORTANTE:</strong> Você receberá um identificador (TopicArn) para este alarme. Você precisará dele no passo seguinte.</li>
<li>Caso queira ter certeza, você pode listar seus tópicos utilizando:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">aws</span> <span class="n">sns</span> <span class="nb">list</span><span class="o">-</span><span class="n">topics</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Passo 2: Criando um Alarme no serviço CloudWatch</strong></p>

<p><strong>2.1 &ndash; Pela Interface Web de Gerenciamento (GUI)</strong></p>

<ul>
<li>A partir da Dashboard principal, clique ou busque pelo serviço <strong>CloudWatch</strong>;</li>
<li>Crie um novo Alarme:

<ul>
<li>Clique em <strong>Alarms</strong>;</li>
<li>Clique no botão <strong>Create Alarm</strong>;</li>
<li>Escolha a categoria do alarme desejado. Para este exemplo utilizarei <strong>ELB Metric > Per-LB Metrics</strong> <em>(Dentre as várias categorias disponíveis, esta se refere à Load Balancers)</em>;</li>
<li>Selecione a métrica exata desejada. No caso deste exemplo, preciso selecionar a métrica e o Load Balancer desejado. Ao escolher a métrica e o alvo (em meu caso um Load Balancer) clique em <strong>Next</strong>. Neste exemplo eu escolhi a métrica <strong>HTTPCode_Backend_5XX</strong> <em>(para monitorar 500 errors)</em> e um Load Balancer chamado <strong>LB-GuySpyV3</strong>;</li>
<li>O próximo passo é definir um nome e uma descrição para este <strong>Alarme</strong>, bem como definir as triggers e períodos de monitoramento. Neste exemplo utilizei o nome <strong>LB-GuySpyV3-ELB_500</strong> para meu alarme; <em>(Não entrarei em detalhes quanto ao uso das triggers, visto que para cada tipo ou categoria de métrica, as triggers serão diferentes, bem como o cenário de seu ambiente e nível de criticidade. Em resumo, se você deseja monitorar o uso de CPU de um determinado servidor, a trigger seria o gatilho que ativaria o alarme, por exemplo: Só quero ser alarmado se o uso de CPU neste servidor ou instância for >= 90% e assim permanecer por pelo menos 60 segundos, ou por dois períodos seguidos de 60seg.)</em></li>
<li>Na seção <strong>Actions</strong> da configuração do Alarme defina o <strong>State</strong> e indique que a notificação deverá ser enviada <strong>(Send notification to)</strong> para o <strong>SNS Topic</strong> que criamos anteriormente. Para este exemplo optei por <strong>State is ALARM</strong> e decidi enviar as notificações para <strong>aws-slack-alerts</strong>, sendo este o SNS Topic que criei no início;</li>
<li>Finalize clicando em <strong>Create Alarm</strong>.</li>
</ul>
</li>
</ul>


<p>  <strong>2.2 &ndash; Pela AWS CLI Tool</strong></p>

<p>  <em>Novamente&hellip; Estou assumindo que se você optou por utilizar este método, é porque já possui sua CLI configurada e autenticando em sua conta do AWS com sua chave. Caso você não saiba do que estou falando, sugiro que siga a <a href="https://aws.amazon.com/pt/cli/?sc_channel=PS&amp;sc_campaign=acquisition_CA&amp;sc_publisher=google&amp;sc_medium=command_line_b&amp;sc_content=aws_cli_bmm&amp;sc_detail=%2Baws%20%2Bcli&amp;sc_category=command_line&amp;sc_segment=161196437429&amp;sc_matchtype=b&amp;sc_country=CA&amp;s_kwcid=AL!4422!3!161196437429!b!!g!!%2Baws%20%2Bcli&amp;ef_id=V8jOHQAABelSRAnr:20170311204146:s">documentação oficial</a> para isto.</em></p>

<ul>
<li>Pela CLI tool, digite o seguinte comando, indicando os atributos abaixo:

<ul>
<li><strong>region</strong> <em>(Região)</em>;</li>
<li><strong>alarm-name</strong> <em>(Nome do alarme)</em>;</li>
<li><strong>alarm-description</strong> <em>(Descrição do alarme)</em>;</li>
<li><strong>alarm-actions</strong> <em>(Definir a ação do alarme &ndash; Apontar para o TopicArn do SNS Topic que criamos anteriormente)</em>;</li>
<li><strong>metric-name</strong> <em>(Nome da Métrica desejada)</em>;</li>
<li><strong>namespace AWS/ELB &mdash;statistic</strong> <em>(Estatística desejada para aquela métrica, neste caso utilizarei Sum (Soma) ao invés de Average (Média))</em>;</li>
<li><strong>dimensions</strong> <em>(O alvo desta métrica de monitoramento, no nosso caso um Load Balancer)</em>;</li>
<li><strong>period</strong> e <strong>evaluation-periods</strong> <em>(Períodos desejados para a trigger)</em>;</li>
<li><strong>threshold</strong> <em>(O valor desejado: Neste exemplo estou colocando o valor como 1, portanto receberei o alarme caso seja >= 1. Sim, eu sei que receberei o alarme a cada minuto, mas estou fazendo isto de propósito para recebermos a notificação a fim de teste. Nunca utilize um threshold desses em produção. :p)</em>;</li>
<li><strong>comparison-operator</strong> <em>(Operador de comparação desejado, neste caso >=)</em>;</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">aws</span> <span class="n">cloudwatch</span> <span class="n">put</span><span class="o">-</span><span class="n">metric</span><span class="o">-</span><span class="n">alarm</span> <span class="o">--</span><span class="n">region</span> <span class="n">us</span><span class="o">-</span><span class="n">west</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="o">--</span><span class="n">alarm</span><span class="o">-</span><span class="n">name</span> <span class="s">&quot;LB-GuySpyV3-ELB_500&quot;</span>
</span><span class='line'>    <span class="o">--</span><span class="n">alarm</span><span class="o">-</span><span class="n">description</span> <span class="s">&quot;Sends 500-errors to Slack&quot;</span>
</span><span class='line'>    <span class="o">--</span><span class="n">actions</span><span class="o">-</span><span class="n">enabled</span>
</span><span class='line'>    <span class="o">--</span><span class="n">alarm</span><span class="o">-</span><span class="n">actions</span> <span class="s">&quot;TheTopicArn from last step&quot;</span>
</span><span class='line'>    <span class="o">--</span><span class="n">metric</span><span class="o">-</span><span class="n">name</span> <span class="s">&quot;HTTPCode_Backend_5XX&quot;</span>
</span><span class='line'>    <span class="o">--</span><span class="n">namespace</span> <span class="n">AWS</span><span class="o">/</span><span class="n">ELB</span> <span class="o">--</span><span class="n">statistic</span> <span class="s">&quot;Sum&quot;</span>
</span><span class='line'>    <span class="o">--</span><span class="n">dimensions</span> <span class="s">&quot;Name=LoadBalancerName,Value=LB-GuySpyV3&quot;</span>
</span><span class='line'>    <span class="o">--</span><span class="n">period</span> <span class="mi">60</span>
</span><span class='line'>    <span class="o">--</span><span class="n">evaluation</span><span class="o">-</span><span class="n">periods</span> <span class="mi">60</span>
</span><span class='line'>    <span class="o">--</span><span class="n">threshold</span> <span class="mi">1</span>
</span><span class='line'>    <span class="o">--</span><span class="n">comparison</span><span class="o">-</span><span class="n">operator</span> <span class="s">&quot;GreaterThanOrEqualToThreshold&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>Passo 3: Criando uma Função Lambda como Assinante (Subscriber) do nosso SNS Topic</strong></p>

<p><strong>3.1 &ndash; Pela Interface Web de Gerenciamento (GUI)</strong></p>

<ul>
<li>A partir da Dashboard principal, clique ou busque pelo serviço <strong>Lambda</strong>;</li>
<li>Crie uma <strong>Nova Função Lambda</strong>:

<ul>
<li>Clique em <strong>Create a Lambda Function</strong>;</li>
<li>Na tela <strong>Select Blueprint</strong> clique na opção <strong>cloudwatch-alarm-to-slack</strong>; <em>(Você poderá precisar buscar por esta opção)</em></li>
<li>O próximo passo será a tela <strong>Configure Triggers</strong>. Selecione o <strong>SNS Topic</strong> que foi criado anteriormente (aws-slack-alerts neste exemplo) e marque a opção <strong>Enable Trigger</strong> e clique em Next;</li>
<li>Em <strong>Configure Function</strong> dê um Nome e uma Descrição para a função e escolha <strong>Node.js.4.3</strong> como <strong>Runtime</strong>;</li>
<li>No campo <strong>Lambda Function Code</strong> cole o seguinte código: <a href="https://gist.github.com/tomfa/b33f768908b0a83987d26f269e377e95">Disponível no github</a>

<ul>
<li>(Você deverá setar os valores das variáveis <strong>CHANNEL</strong> e <strong>PATH</strong>, onde CHANNEL é o canal do Slack para o qual você deseja mandar as notificações e PATH é a URL de seu WebHook, recebida quando configuramos o Incoming WebHook no Slack)</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">var</span> <span class="n">https</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s">&#39;https&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">var</span> <span class="n">util</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s">&#39;util&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">var</span> <span class="n">CHANNEL</span> <span class="o">=</span> <span class="s">&quot;#devops&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">var</span> <span class="n">PATH</span> <span class="o">=</span> <span class="s">&quot;/services/T434P71A4/U4G3JUG13/kPjvXY4Kd8wPm4TvrEqhN6Dv&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">exports</span><span class="o">.</span><span class="n">handler</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">JSON</span><span class="o">.</span><span class="n">stringify</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'>    <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s">&#39;From SNS:&#39;</span><span class="p">,</span> <span class="n">event</span><span class="o">.</span><span class="n">Records</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">Sns</span><span class="o">.</span><span class="n">Message</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="n">postData</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;channel&quot;</span><span class="p">:</span> <span class="n">CHANNEL</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;username&quot;</span><span class="p">:</span> <span class="s">&quot;AWS SNS&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;text&quot;</span><span class="p">:</span> <span class="s">&quot;*&quot;</span> <span class="o">+</span> <span class="n">event</span><span class="o">.</span><span class="n">Records</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">Sns</span><span class="o">.</span><span class="n">Subject</span> <span class="o">+</span> <span class="s">&quot;*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;icon_emoji&quot;</span><span class="p">:</span> <span class="s">&quot;:aws:&quot;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="n">message</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="n">Records</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">Sns</span><span class="o">.</span><span class="n">Message</span><span class="p">;</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">severity</span> <span class="o">=</span> <span class="s">&quot;good&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="n">dangerMessages</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="s">&quot; but with errors&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot; to RED&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;During an aborted deployment&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;Failed to deploy application&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;Failed to deploy configuration&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;has a dependent object&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;is not authorized to perform&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;Pending to Degraded&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;Stack deletion failed&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;Unsuccessful command execution&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;You do not have permission&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;Your quota allows for 0 more running instance&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="n">warningMessages</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="s">&quot; aborted operation.&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot; to YELLOW&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;Adding instance &quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;Degraded to Info&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;Deleting SNS topic&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;is currently running under desired capacity&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;Ok to Info&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;Ok to Warning&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;Pending Initialization&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;Removed instance &quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;Rollback of environment&quot;</span>
</span><span class='line'>        <span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">var</span> <span class="n">dangerMessagesItem</span> <span class="ow">in</span> <span class="n">dangerMessages</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">indexOf</span><span class="p">(</span><span class="n">dangerMessages</span><span class="p">[</span><span class="n">dangerMessagesItem</span><span class="p">])</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">severity</span> <span class="o">=</span> <span class="s">&quot;danger&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">//</span> <span class="n">Only</span> <span class="n">check</span> <span class="k">for</span> <span class="n">warning</span> <span class="n">messages</span> <span class="k">if</span> <span class="n">necessary</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">severity</span> <span class="o">==</span> <span class="s">&quot;good&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">var</span> <span class="n">warningMessagesItem</span> <span class="ow">in</span> <span class="n">warningMessages</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">message</span><span class="o">.</span><span class="n">indexOf</span><span class="p">(</span><span class="n">warningMessages</span><span class="p">[</span><span class="n">warningMessagesItem</span><span class="p">])</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">severity</span> <span class="o">=</span> <span class="s">&quot;warning&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">postData</span><span class="o">.</span><span class="n">attachments</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s">&quot;color&quot;</span><span class="p">:</span> <span class="n">severity</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&quot;text&quot;</span><span class="p">:</span> <span class="n">message</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">method</span><span class="p">:</span> <span class="s">&#39;POST&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">hostname</span><span class="p">:</span> <span class="s">&#39;hooks.slack.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">port</span><span class="p">:</span> <span class="mi">443</span><span class="p">,</span>
</span><span class='line'>        <span class="n">path</span><span class="p">:</span> <span class="n">PATH</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="n">req</span> <span class="o">=</span> <span class="n">https</span><span class="o">.</span><span class="n">request</span><span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="n">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">res</span><span class="o">.</span><span class="n">setEncoding</span><span class="p">(</span><span class="s">&#39;utf8&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">res</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s">&#39;data&#39;</span><span class="p">,</span> <span class="n">function</span> <span class="p">(</span><span class="n">chunk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">context</span><span class="o">.</span><span class="n">done</span><span class="p">(</span><span class="n">null</span><span class="p">,</span> <span class="n">postData</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">req</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s">&#39;error&#39;</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s">&#39;problem with request: &#39;</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="n">message</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">req</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">util</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;%j&quot;</span><span class="p">,</span> <span class="n">postData</span><span class="p">));</span>
</span><span class='line'>    <span class="n">req</span><span class="o">.</span><span class="n">end</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>O <strong>Handler</strong> deverá ser o default <code>index.handler</code>;

<ul>
<li>Para <strong>role</strong> selecione <strong>Create a custom role</strong>; <em>(Isto será necessário apenas para a sua primeira função)</em></li>
<li>Na tela seguinte selecione <strong>lambda_basic_execution</strong> como <strong>IAM role</strong> e deixe o <strong>Policy Name</strong> com seu valor default. O AWS irá criar uma política de segurança padrão que nos dará os privilégios necessários. Clique em <strong>Allow</strong>;</li>
<li>Certifique-se de que o valor para <strong>VPC</strong> na seção <strong>Advanced Settings</strong> seja <strong>No VPC</strong>;
Clique em <strong>Next</strong>, reveja suas configurações e clique em <strong>Create Function</strong>;</li>
</ul>
</li>
<li>Aguarde seu alarme acontecer e receba a notificação no Slack. :D</li>
</ul>


<p>O resultado em seu Slack será algo assim&hellip;</p>

<p><img class="center" src="http://kalib.github.io/imgs/slack2.png" title="'Notification_Slack'" ></p>

<p><strong>P</strong>arabéns, você já está recebendo suas notificações via Slack. Basta criar outros alarmes no AWS utilizando a mesma Lambda Function e o mesmo SNS Topic.</p>

<p><strong>H</strong>appy Hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker - Uma alternativa elegante para containers no Linux]]></title>
    <link href="http://kalib.github.io/blog/2015/08/20/docker-uma-alternativa-elegante-para-containers-no-linux/"/>
    <updated>2015-08-20T11:01:00-04:00</updated>
    <id>http://kalib.github.io/blog/2015/08/20/docker-uma-alternativa-elegante-para-containers-no-linux</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://kalib.github.io/imgs/dockerlogo.png" title="'Docker'" ></p>

<p><strong>A</strong>ntes de falar sobre o Docker, é importante que se entenda o conceito de um container, portanto vamos começar do básico. A imagem acima, logomarca do Docker, deixa claro o que é um container. A baleia, representando um navio, carregando diversos caixotes ou containers ilustra o conceito físico de um container. Nada mais do que um enorme caixote que possui o intuito de isolar algo. Quando um grande navio transporta mercadorias de um porto para outro, ele costuma trazer diversos containers separando estas mercadorias, de forma que as coisas não fiquem misturadas e bagunçadas. A forma de separação vai depender dos critérios de organização utilizados pela embarcação, seja por proprietário, seja por categoria de produtos, etc. De qualquer forma, embora cada container possua seus elementos próprios, todos os containers compartilham alguns recursos básicos, como por exemplo a embarcação, que é o meio de transporte para todos os containers ali contidos.</p>

<p><strong>D</strong>a mesma forma se dá no mundo dos computadores, onde o conceito de containers surgiu para separar e isolar alguns recursos e aplicações, otimizando os recursos que servem como base e que podem ser utilizados de forma compartilhada, como por exemplo o kernel do Sistema Operacional. De certa forma isto nos faz lembrar um pouco da virtualização, onde cada máquina virtual compartilha os recursos da máquina física, no entanto existe uma diferença clara no contexto de containers, visto que em um cenário de virtualização você precisará possuir um SO instalado na máquina física, com seu kernel e todos os seus recursos, e um SO instalado em sua máquina virtual, também com seu kernel e todos os seus recursos. Quando falamos em containers, imagine que você só precisará do kernel, bem como vários outros recursos, na máquina que será a hospedeira do container (a embarcação).</p>

<p><strong>C</strong>ontainers Linux surgiram como uma tecnologia chave para empacotamento e entrega de aplicativos, combinando a leveza do isolamento de aplicativos com a flexibilidade de métodos de deploy baseados em imagens.</p>

<p><strong>U</strong>ma das formas mais simples de se imaginar a vantagem da utilização de containers é imaginar que você possui uma empresa que hospeda servidores de aplicações para seus clientes. Se um novo cliente surge querendo hospedar a aplicação dele, você subirá uma nova máquina virtual, o que inclui todo um novo sistema operacional, enquanto que em uma solução baseada em containers você poderá ter apenas a sua máquina com um único kernel Linux provendo as priorizações de recursos (CPU, memória, I/O, rede, etc.) sem a necessidade de dar boot em um novo sistema operacional (máquinia virtual) na qual rodará a aplicação deste cliente.</p>

<p><strong>D</strong>izem que uma imagem vale mais que mil palavras&hellip;</p>

<p><img class="center" src="http://kalib.github.io/imgs/docker_vmdiagram.png" title="'Virtual Machine Diagram'" ></p>

<p><strong>N</strong>a imagem acima temos o cenário convencional com a utilização de <strong>Máquinas Virtuais</strong>. Em suma, temos um host físico, com seu respectivo SO e kernel. Acima deles temos a camada de virtualização ou HyperVisor, enquanto que acima desta teremos as máquinas virtuais, com seus respectivos SOs (cada um com seu kernel) instalados. No caso temos 3 VMs, com 3 SOs (cada um com seu kernel). Na camada acima encontramos o que realmente é necessário para o app do cliente funcionar, que são as bibliotecas e os binários. Por fim, o App do cliente em si.</p>

<p><strong>V</strong>ejamos como fica o cenário com a utilização de containers, docker neste caso&hellip;</p>

<p><img class="center" src="http://kalib.github.io/imgs/docker_diagram.png" title="'Docker Diagram'" ></p>

<p><strong>N</strong>o cenário com o Docker percebemos que a camada de SO das VMs sumiu, visto que ela não é mais necessária. Ao invés de Máquinas Virtuais, agora nós temos 3 containers, onde cada container roda os binários e bibliotecas de um SO, porém se aproveitando do kernel já existente no Host.</p>

<p><strong>C</strong>om este grau de modularização nós ganhamos maior flexibilidade e agilidade no deploy de ambientes e aplicações.</p>

<p><strong>U</strong>ma das vantagens da utilização do Docker é a existência de um repositório de imagens prontas que ficam disponibilizadas livremente para quem desejar utilizar. Seja uma imagem pronta de um container com CentOS, Ubuntu, etc.. Já existem centenas e centenas de imagens prontas para uso, sendo esta uma base de compartilhamento comunitário, mas&hellip;</p>

<p><strong>V</strong>amos ao que interessa&hellip;</p>

<p><strong>N</strong>os exemplos a seguir, estou utilizando o Ubuntu Server 15.04, visto que estou atualmente realizando uma POC de VPS com um novo host, portanto aproveitarei para fazer disto uma parte de meus testes nesta VPS. Sinta-se livre para utilizar sua máquina física com Ubuntu, com Debian, ou mesmo uma máquina virtual, caso não goste de realizar testes em sua máquina física, o resultado será o mesmo. Para que tudo funcione como esperamos, só existem 2 pré-requisitos a serem atendidos:</p>

<p>1- O kernel do Linux que será utilizado deve ser igual ou superior ao 3.8;</p>

<p>2- Caso você esteja realizando os testes em uma VM, seria interessante que sua máquina física tivesse comunicação com a VM. Isso pode ser testado com um ping da máquina física para a VM. No caso de sua máquina virtual ser instalada com interface gráfica, esta comunicação não será necessária, pois o único momento em que utilizaremos isto será para abrir um navegador e fazer um teste de acesso ao endereço da máquina virtual.</p>

<p><strong>V</strong>amos lá. Para ter a certeza de que você atende o pré-requisito de kernel, utilize o comando &ldquo;uname -r&rdquo;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> kalib@cloudcaverna:~$ uname -r
</span><span class='line'> 3.19.0-25-generic</span></code></pre></td></tr></table></div></figure>


<p><strong>E</strong>stou com o kernel 3.19, portanto superior ao kernel 3.8 que é o pré-requisito mínimo. Vamos em frente.</p>

<p><strong>P</strong>rimeiramente, vamos instalar o Docker. Seja lá qual for sua distribuição Linux, digite o comando: <strong>(O comando deve ser executado com o usuário root ou com o comando sudo!)</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> # curl -sSL https://get.docker.com | sh</span></code></pre></td></tr></table></div></figure>


<p><strong>E</strong>le baixará e executará um script de instalação, no meu caso do Ubuntu ele irá instalar um repositório e em seguida instalará o docker. O próximo passo será iniciar o serviço do docker:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> # /etc/init.d/docker start
</span><span class='line'> [ ok ] Starting docker (via systemctl): docker.service.</span></code></pre></td></tr></table></div></figure>


<p><strong>O</strong> docker possui uma série de scripts/comandos próprios para facilitar a sua administração, como por exemplo um script de <strong>ps</strong>, para que possamos ter a certeza de que ele está rodando e, além disso, saber se existem containers em execução, da mesma forma que faríamos com o ps do linux para ver os processos em andamento.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> # docker ps
</span><span class='line'>
</span><span class='line'> CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span></code></pre></td></tr></table></div></figure>


<p><strong>P</strong>odemos ver que o docker está rodando, no entanto nenhum container está em execução. Na verdade, não temos nenhum container criado, portanto obviamente não poderia estar em execução.</p>

<p><strong>A</strong>lém do ps, podemos utilizar o script <strong>images</strong> para ver quais imagens de containers já possuímos para uso:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> # docker images
</span><span class='line'>
</span><span class='line'> REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span></code></pre></td></tr></table></div></figure>


<p><strong>D</strong>a mesma forma, não temos ainda nenhuma imagem baixada para uso.</p>

<p><strong>U</strong>ma vez que estamos falando de containers, conforme dito anteriormente, a ideia é isolar ao máximo e otimizar o que precisamos para este container, portanto precisamos informar o processo que desejamos iniciar no container em questão.</p>

<p><strong>V</strong>amos criar um container do Ubuntu, por exemplo, na versão 15.04, lançada em Abril deste ano, e vamos iniciar juntamente com ele o processo /bin/bash. O comando utilizado será: docker run -i -t ubuntu:15.04 /bin/bash</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> # docker run -i -t ubuntu:15.04 /bin/bash
</span><span class='line'>
</span><span class='line'> Unable to find image 'ubuntu:15.04' locally
</span><span class='line'> 15.04: Pulling from library/ubuntu
</span><span class='line'>
</span><span class='line'> 6e6a100fa147: Pull complete
</span><span class='line'> 13c0c663a321: Pull complete
</span><span class='line'> 2bd276ed39d5: Pull complete
</span><span class='line'> 013f3d01d247: Already exists
</span><span class='line'> library/ubuntu:15.04: The image you are pulling has been verified. Important: image verification is a tech preview feature and should not be relied on to provide security.
</span><span class='line'>
</span><span class='line'> Digest: sha256:b2d4940544e515d4bc62b2a9ad3e6137b3e1e0937a41fdc1f0f30d12935e5b09
</span><span class='line'> Status: Downloaded newer image for ubuntu:15.04
</span><span class='line'>
</span><span class='line'> root@d70562e7533c:/#</span></code></pre></td></tr></table></div></figure>


<p><strong>É</strong> importante reparar que na primeira linha de execução ele me trouxe um alerta informando que não foi possível encontrar a imagem &ldquo;ubuntu:15.04&rdquo; localmente. Como disse acima, não temos ainda nenhuma imagem baixada, portanto ele não encontrou localmente e foi baixar diretamente no repositório de imagens do docker.</p>

<p><strong>O</strong> procedimento foi extremamente rápido, certo? Acredite ou não, você já possui um container Ubuntu rodando em sua máquina. ;] Ainda não acredita? Repare novamente no seu prompt de comandos, veja que logo que ele finalizou o processo ele lhe deixou em um prompt &ldquo;estranho&rdquo;. No caso do meu exemplo acima, perceba que ao concluir o processo ele me deixou com o prompt assim:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> root@d70562e7533c:/#</span></code></pre></td></tr></table></div></figure>


<p><strong>N</strong>ão, minha máquina não se chama d70562e7533c. Tenho certeza de que a sua também não se chama.. seja lá qual for a combinação de caracteres que lhe foi apresentada no prompt. Na verdade, sempre que iniciamos um container, o comportamento default é que você já é logado nele. Em suma, seu container com ubuntu 15.04 já foi criado e você já está logado nele, e esta combinação de caracteres estranha é o ID que foi dado ao seu container.</p>

<p><strong>A</strong>inda não acredita? Bom, você pode, por exemplo, dar um <strong>cat /etc/issue</strong>, para ver que você está de fato rodando um ubuntu 15.04. Claro, no meu caso não haverá diferença, pois minha máquina que está rodando o docker também é ubuntu 15.04.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> root@d70562e7533c:/# cat /etc/issue
</span><span class='line'>
</span><span class='line'> Ubuntu 15.04 \n \l
</span><span class='line'>
</span><span class='line'> root@d70562e7533c:/#</span></code></pre></td></tr></table></div></figure>


<p><strong>O*utro teste, seria rodar </strong>ps -ef** no container. Você verá que não existe nenhum processo rodando. Aliás, haverá apenas 1 processo (além do próprio ps), que foi o processo indicado na criação: /bin/bash. Desta forma você terá a certeza de que não está no prompt de sua máquina mesmo, visto que na sua certamente existem dezenas ou centenas de processos rodando, do kernel, do usuário, etc.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> root@d70562e7533c:/# ps -ef
</span><span class='line'>
</span><span class='line'> UID        PID  PPID  C STIME TTY          TIME CMD
</span><span class='line'> root         1     0  0 13:36 ?        00:00:00 /bin/bash
</span><span class='line'> root         9     1  0 13:44 ?        00:00:00 ps -ef
</span><span class='line'>
</span><span class='line'> root@d70562e7533c:/#</span></code></pre></td></tr></table></div></figure>


<p><strong>D</strong>a mesma forma você poderá experimentar outros comandos para testar (caso ainda não esteja acreditando que de forma tão &ldquo;oi, simples assim&rdquo; você já está com seu container pronto): ls, apt-get update, etc.. Tudo funcionando como se fosse uma máquina real, ou virtual, no entanto sem um kernel, visto que ela está utilizando o kernel da máquina host.</p>

<p><strong>A</strong>gora que temos a certeza de que estamos em nosso container, você pode sair do container e voltar para sua máquina host. Para isso você precisará pressionar as teclas <strong>Ctrl + P + Q</strong>. Desta forma, você verá que seu prompt voltará para seu host enquanto que seu container continuará rodando, você apenas saiu do prompt do mesmo.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> root@d70562e7533c:/# root@cloudcaverna:~#
</span><span class='line'>
</span><span class='line'> root@cloudcaverna:~#</span></code></pre></td></tr></table></div></figure>


<p><strong>V</strong>amos verificar novamente o ps do docker, visto que da última vez ele estava vazio. Desta vez ele nos mostrará um processo em execução, que no caso é o container que criamos.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> root@cloudcaverna:~# docker ps
</span><span class='line'>
</span><span class='line'> CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
</span><span class='line'> d70562e7533c        ubuntu:15.04        "/bin/bash"         15 minutes ago      Up 15 minutes                           modest_khorana</span></code></pre></td></tr></table></div></figure>


<p><strong>N</strong>o retorno podemos ver o ID do nosso container, o nome da imagem que ele utiliza, o comando em execução, o tempo desde sua criação, o seu status, portas e nome.</p>

<p><strong>O</strong> container ID poderá ser utilizado para voltar para nosso container através do comando <strong>docker attach &lt;container-id></strong>: (Após digitar o comando, pressione novamente Enter para liberar o prompt)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> root@cloudcaverna:~# docker attach d70562e7533c
</span><span class='line'>
</span><span class='line'> root@d70562e7533c:/#</span></code></pre></td></tr></table></div></figure>


<p><strong>N</strong>o exemplo anterior nós utilizamos a combinação <strong>Ctrl + P + Q</strong> para sair do container mantendo-o rodando. Vamos experimentar utilizar desta vez <strong>Ctrl + D</strong>. Desta forma você não apenas está saindo mas também desligando o container. Execute novamente a lista de processos/containers do docker para ver:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> root@cloudcaverna:~# docker ps
</span><span class='line'>
</span><span class='line'> CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span></code></pre></td></tr></table></div></figure>


<p><strong>N</strong>o entanto, é importante lembrar que a imagem do Ubuntu 15.04 que baixamos, continua disponível para o caso de precisarmos criar novos containers Ubuntu 15.04:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> root@cloudcaverna:~# docker images
</span><span class='line'>
</span><span class='line'> REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'> ubuntu              15.04               013f3d01d247        17 hours ago        131.4 MB</span></code></pre></td></tr></table></div></figure>


<p><strong>S</strong>imples&hellip; Mas vamos fazer algo mais próximo do mundo real, afinal um container apenas com o Ubuntu rodando, ou qualquer outra que seja a distribuição escolhida, não tem muita utilidade, portanto vamos criar um container rodando um servidor web, para o caso de querermos hospedar um site ou aplicalção web neste container. Por ser mais leve e simples, vou utilizar o nginx no exemplo. Vamos utilizar o comando <strong>docker run -i -t -p 8080:80 ubuntu:15.04 /bin/bash</strong></p>

<p><strong>N</strong>o comando acima estamos dizendo que queremos criar um novo container ubuntu 15.04 rodando o /bin/bash. Desta vez temos um parâmetro que não utilizamos anteriormente. O <strong>p</strong> serve para indicar a utilização de portas. Quando utilizamos <strong>p 8080:80</strong> estamos dizendo que vamos utilizar a porta 80 no container e que ela estará mapeada na porta 8080 do nosso host ou hospedeiro. Ou seja, quando instalarmos o Nginx no ubuntu do container, você poderá através de seu host abrir o navegador e acessar o seu endereço ip ou nome de host (caso você possua resolução de nomes funcionando) na porta 8080.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> root@cloudcaverna:~# docker run -i -t -p 8080:80 ubuntu:15.04 /bin/bash
</span><span class='line'>
</span><span class='line'> root@08abb8611700:/#</span></code></pre></td></tr></table></div></figure>


<p><strong>O</strong> processo foi bem mais rápido desta vez, visto que já tínhamos a imagem do container ubuntu 15.04, portanto não tivemos a necessidade de baixar outra imagem. O seu container já está criado e você já está logado no prompt do mesmo, conforme pode ver através do ID do container que apareceu em seu prompt.</p>

<p><strong>V</strong>amos agora instalar o servidor web nginx para realizarmos o nosso teste. Para isso vamos atualizar os repositórios e em seguida instalar o pacote: <strong>apt-get update &amp;&amp; apt-get install -y nginx</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> root@08abb8611700:/# apt-get update && apt-get install -y nginx
</span><span class='line'>
</span><span class='line'> Ign http://archive.ubuntu.com vivid InRelease
</span><span class='line'> Ign http://archive.ubuntu.com vivid-updates InRelease
</span><span class='line'> Get:1 http://archive.ubuntu.com vivid/main Sources [1358 kB]
</span><span class='line'> Get:2 http://archive.ubuntu.com vivid/restricted Sources [7100 B]
</span><span class='line'> ...
</span><span class='line'> Building dependency tree       
</span><span class='line'> Reading state information... Done
</span><span class='line'> The following extra packages will be installed:
</span><span class='line'>  fontconfig-config fonts-dejavu-core geoip-database init-system-helpers libexpat1 libfontconfig1 libfreetype6 libgd3 libgeoip1 libicu52
</span><span class='line'>  libjbig0 libjpeg-turbo8 libjpeg8 libpng12-0 libssl1.0.0 libtiff5 libvpx1 libx11-6 libx11-data libxau6 libxcb1 libxdmcp6 libxml2 libxpm4
</span><span class='line'>  libxslt1.1 nginx-common nginx-core sgml-base ucf xml-core
</span><span class='line'> Suggested packages:
</span><span class='line'>  libgd-tools geoip-bin fcgiwrap nginx-doc ssl-cert sgml-base-doc debhelper
</span><span class='line'> The following NEW packages will be installed:
</span><span class='line'>  fontconfig-config fonts-dejavu-core geoip-database init-system-helpers libexpat1 libfontconfig1 libfreetype6 libgd3 libgeoip1 libicu52
</span><span class='line'>  libjbig0 libjpeg-turbo8 libjpeg8 libpng12-0 libssl1.0.0 libtiff5 libvpx1 libx11-6 libx11-data libxau6 libxcb1 libxdmcp6 libxml2 libxpm4
</span><span class='line'>  libxslt1.1 nginx nginx-common nginx-core sgml-base ucf xml-core
</span><span class='line'> 0 upgraded, 31 newly installed, 0 to remove and 0 not upgraded.
</span><span class='line'> Need to get 14.0 MB of archives.
</span><span class='line'> After this operation, 53.3 MB of additional disk space will be used.
</span><span class='line'> ...
</span><span class='line'> Get:1 http://archive.ubuntu.com/ubuntu/ vivid/main libexpat1 amd64 2.1.0-6ubuntu1 [70.6 kB]
</span><span class='line'> Processing triggers for systemd (219-7ubuntu6) ...
</span><span class='line'>
</span><span class='line'> root@08abb8611700:/#</span></code></pre></td></tr></table></div></figure>


<p><strong>C</strong>ortei bastante a saída visto ser desnecessária, mas uma vez que o nginx esteja instalado, vamos iniciá-lo: <strong>/etc/init.d/nginx start</strong>. Em seguida, vamos utilizar o ps para ver os processos que estão rodando no nosso container:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> root@08abb8611700:/# /etc/init.d/nginx start
</span><span class='line'>
</span><span class='line'> root@08abb8611700:/# ps -ef
</span><span class='line'>
</span><span class='line'> UID        PID  PPID  C STIME TTY          TIME CMD
</span><span class='line'> root         1     0  0 14:10 ?        00:00:00 /bin/bash
</span><span class='line'> root       609     1  0 14:19 ?        00:00:00 nginx: master process /usr/sbin/nginx
</span><span class='line'> www-data   610   609  0 14:19 ?        00:00:00 nginx: worker process
</span><span class='line'> www-data   611   609  0 14:19 ?        00:00:00 nginx: worker process
</span><span class='line'> www-data   612   609  0 14:19 ?        00:00:00 nginx: worker process
</span><span class='line'> www-data   613   609  0 14:19 ?        00:00:00 nginx: worker process
</span><span class='line'> root       614     1  0 14:19 ?        00:00:00 ps -ef
</span><span class='line'>
</span><span class='line'> root@08abb8611700:/#</span></code></pre></td></tr></table></div></figure>


<p><strong>F</strong>eito isto, o serviço está rodando e já pode ser testado. Em seu host você poderá abrir o navegador e acessar o endereço local de seu host, com a porta 8080, visto que foi esta que definimos inicialmente para mapear a porta 80 do container: <strong>localhost:8080</strong></p>

<p><strong>C</strong>aso esteja utilizando uma máquina virtual para fazer seus testes, você terá duas possibilidades:
1- Caso sua máquina virtual possua alguma interface gráfica instalada, você poderá abrir o navegador da própria VM e acessar o mesmo endereço de localhost com a porta 8080;
2- Caso sua VM não esteja com nenhum ambiente gráfico instalado, você poderá utilizar aplicações de CLI para testar (ex: lynx, curl, etc.) ou usar o navegador da máquina que serve de host para sua VM, levando em conta que você fez o teste descrito no início para ter certeza de que sua máquina física consegue se comunicar com sua VM. Neste caso, em sua máqunina física você acessará o endereço de sua vm no navegador, com a porta 8080.</p>

<p><strong>R</strong>esultado? O Nginx em nosso container rodando perfeitamente.</p>

<p><img class="center" src="http://kalib.github.io/imgs/docker_nginx8080.png" title="'Nginx on Docker'" ></p>

<p><strong>D</strong>a mesma forma feita anteriormente, podemos sair de nosso container com a combinação de teclas <strong>Ctrl + P + Q</strong> e verificar os processos/containers do docker em execução:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> root@08abb8611700:/# root@cloudcaverna:~#
</span><span class='line'>
</span><span class='line'> root@cloudcaverna:~# docker ps
</span><span class='line'>
</span><span class='line'> CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                  NAMES
</span><span class='line'> 08abb8611700        ubuntu:15.04        "/bin/bash"         19 minutes ago      Up 19 minutes       0.0.0.0:8080-&gt;80/tcp   jolly_hawking
</span><span class='line'>
</span><span class='line'> root@cloudcaverna:~#</span></code></pre></td></tr></table></div></figure>


<p><strong>É</strong> importante salientar que quando saímos do container com a combinação <strong>Ctrl + P + Q</strong> nós não estamos fechando o container, pois ele continua rodando, conforme pode ser visto com <strong>docker ps</strong>. No entanto, quando saímos do nosso antigo container com a combinação <strong>Ctrl + D</strong>, nós percebemos que ele finalizou de vez o container. Além de finalizar, ele excluiu o nosso container, visto que o mesmo não foi salvo, ou &ldquo;comittado&rdquo;. Se sairmos deste container no qual instalamos o nginx utilizando <strong>Ctrl + D</strong>, nós estaremos descartando tudo o que foi feito nele. Para poder finalizar o seu container sem perdê-lo, ou seja, mantendo o container salvo e tudo o que foi instalado/configurado nele, nós precisamos sair do container com a combinação <strong>Ctrl + P + Q</strong>, conforme fizemos acima, e em seguida realizar um commit deste container. Estaremos então criando uma imagem com o atual estado do container. Desta forma, se posteriormente precisarmos subir um novo container que rode o SO ubuntu 15.04 e que também possua o nginx, poderemos criar um novo container a partir desta imagem em poucos segundos. O commit se dá da seguinte forma: <strong>docker commit &lt;container-id> &lt;nome-que-vc-desejar></strong></p>

<p><strong>L</strong>embrando que o id do container pode ser conseguido através do comando <strong>docker ps</strong> e que o <strong>nome-que-vc-desejar</strong> será o nome utilizado para identificar esta sua máquina/imagem.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> root@cloudcaverna:~# docker commit 08abb8611700 cloudcaverna/ubuntu-nginx:1.0
</span><span class='line'>
</span><span class='line'> b0922bc8f41295cadadbd131c075e29288b52e8bb2d9546cb7c0327eb95fe7dc
</span><span class='line'>
</span><span class='line'> root@cloudcaverna:~#</span></code></pre></td></tr></table></div></figure>


<p><strong>U</strong>tilizei 1.0 ao final para ter uma ideia de versionamento, visto que o docker nos permite trabalhar desta forma. É uma questão de organização.</p>

<p><strong>E</strong>m seguida você pode verificar sua imagem criada através do script <strong>images</strong> do docker, bem como o seu container ainda rodando através do script <strong>ps</strong>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> root@cloudcaverna:~# docker images
</span><span class='line'>
</span><span class='line'> REPOSITORY                  TAG                 IMAGE ID            CREATED              VIRTUAL SIZE
</span><span class='line'> cloudcaverna/ubuntu-nginx   1.0                 b0922bc8f412        About a minute ago   204.6 MB
</span><span class='line'> ubuntu                      15.04               013f3d01d247        18 hours ago         131.4 MB
</span><span class='line'>
</span><span class='line'> root@cloudcaverna:~# docker ps
</span><span class='line'>
</span><span class='line'> CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                  NAMES
</span><span class='line'> 08abb8611700        ubuntu:15.04        "/bin/bash"         49 minutes ago      Up 49 minutes       0.0.0.0:8080-&gt;80/tcp   jolly_hawking
</span><span class='line'>
</span><span class='line'> root@cloudcaverna:~#</span></code></pre></td></tr></table></div></figure>


<p><strong>V</strong>amos agora criar um novo container. Aqui você pode escolher como prosseguir. Eu criarei um container com a distribuição Arch Linux rodando, mas você pode seguir e criar outra com o Ubuntu caso deseje, então vejamos as opções:</p>

<p><strong>Opção 1 &ndash; Caso escolha criar este segundo container como Arch Linux</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> root@cloudcaverna:~# docker run -i -t -p 6660:80 base/archlinux /bin/bash
</span><span class='line'>
</span><span class='line'> Unable to find image 'base/archlinux:latest' locally
</span><span class='line'> latest: Pulling from base/archlinux
</span><span class='line'>
</span><span class='line'> b31c6c1462e6: Pull complete
</span><span class='line'> b97e110c94d9: Already exists
</span><span class='line'> Digest: sha256:7905fad7578b9852999935fb0ba9c32fe16cece9e4d1d742a34f55ce9cebdfd1
</span><span class='line'> Status: Downloaded newer image for base/archlinux:latest
</span><span class='line'>
</span><span class='line'> [root@be266bf7e5a3 /]#
</span></code></pre></td></tr></table></div></figure>


<p><strong>Opção 2 &ndash; Caso deseje criar um novo container Ubuntu aproveitando a imagem que já está pronta e com nginx já instalado</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> docker run -i -t -p 6660:80 &lt;nome-que-vc-deu-para-sua-imagem&gt;</span></code></pre></td></tr></table></div></figure>


<p>Como eu dei o nome de <em>cloudcaverna/ubuntu-nginx</em>, eu utilizaria <em>docker run -i -t -p 6660:80 cloudcaverna/ubuntu-nginx</em>.</p>

<p>Desta forma você não precisará sequer instalar o nginx novamente neste container, visto que você utilizou como base uma imagem que já possuía o nginx instalado, restando apenas a você testar no navegador novamente o endereço porém trocando a porta para 6660.</p>

<p><strong>C</strong>omo eu resolvi seguir em frente com um container totalmente novo, baseado no Arch Linux, vou dar um <strong>cat /etc/issue</strong> para ver que realmente estou em um ambiente com a distribuição Arch Linux e vou instalar o nginx nele com o pacman, visto que este é o gerenciador de pacotes do Arch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [root@be266bf7e5a3 /]# cat /etc/issue
</span><span class='line'>
</span><span class='line'> Arch Linux \r (\l)
</span><span class='line'>
</span><span class='line'> [root@be266bf7e5a3 /]# pacman -Sy nginx
</span><span class='line'>
</span><span class='line'> :: Synchronizing package databases...
</span><span class='line'> core                                                        121.2 KiB   203K/s 00:01 [#################################################] 100%
</span><span class='line'> extra                                                      1773.8 KiB   644K/s 00:03 [#################################################] 100%
</span><span class='line'> community                                                     2.7 MiB   936K/s 00:03 [#################################################] 100%
</span><span class='line'> resolving dependencies...
</span><span class='line'> looking for inter-conflicts...
</span><span class='line'>
</span><span class='line'> Packages (1): nginx-1.8.0-1
</span><span class='line'>
</span><span class='line'> Total Download Size:    0.34 MiB
</span><span class='line'> Total Installed Size:   0.98 MiB
</span><span class='line'>
</span><span class='line'> :: Proceed with installation? [Y/n]
</span><span class='line'> :: Retrieving packages ...
</span><span class='line'> nginx-1.8.0-1-x86_64                                        349.5 KiB   266K/s 00:01  [#################################################] 100%
</span><span class='line'> (1/1) installing nginx                                                                [ #################################################] 100%
</span><span class='line'>
</span><span class='line'> [root@be266bf7e5a3 /]#</span></code></pre></td></tr></table></div></figure>


<p><strong>A</strong>gora que estou com o nginx rodando também neste container do Arch Linux, vou sair do container pressionando a combinação <strong>Ctrl + P + Q</strong> e em seguida rodar o script de <strong>ps</strong> do docker:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [root@be266bf7e5a3 /]# root@cloudcaverna:~#
</span><span class='line'>
</span><span class='line'> root@cloudcaverna:~# docker ps
</span><span class='line'>
</span><span class='line'> CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                  NAMES
</span><span class='line'> be266bf7e5a3        base/archlinux      "/bin/bash"         10 minutes ago      Up 10 minutes       0.0.0.0:6660-&gt;80/tcp   cocky_hoover
</span><span class='line'> 08abb8611700        ubuntu:15.04        "/bin/bash"         About an hour ago   Up About an hour    0.0.0.0:8080-&gt;80/tcp   jolly_hawking
</span><span class='line'>
</span><span class='line'> root@cloudcaverna:~#
</span><span class='line'> ```
</span><span class='line'>
</span><span class='line'> **D**esta vez eu possuo dois containers criados, sendo um com o ubuntu 15:04 e outro com o Arch Linux. Agora vou realizar o commit do meu container Arch Linux com nginx, para não perder esta imagem. Em seguida, executarei o script **images** para ver as imagens que já possuo:
</span><span class='line'>
</span><span class='line'> ```
</span><span class='line'>  root@cloudcaverna:~# docker commit be266bf7e5a3 cloudcaverna/archlinux-nginx:1.0
</span><span class='line'>
</span><span class='line'> f4ea14bf23c47466fb256fff9e3ab32ca85fb0256a05007ef4972ad7ff5f2aa9
</span><span class='line'>
</span><span class='line'> root@cloudcaverna:~# docker images
</span><span class='line'>
</span><span class='line'> REPOSITORY                     TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
</span><span class='line'> cloudcaverna/archlinux-nginx   1.0                 f4ea14bf23c4        5 seconds ago       285.9 MB
</span><span class='line'> cloudcaverna/ubuntu-nginx      1.0                 b0922bc8f412        20 minutes ago      204.6 MB
</span><span class='line'> ubuntu                         15.04               013f3d01d247        18 hours ago        131.4 MB
</span><span class='line'> base/archlinux                 latest              b97e110c94d9        8 weeks ago         278.8 MB
</span><span class='line'>
</span><span class='line'> root@cloudcaverna:~#</span></code></pre></td></tr></table></div></figure>


<p><strong>A</strong>gora vou testar no navegador o nginx deste meu segundo container, o qual defini que utilizaria a porta 6660 do meu host:</p>

<p><img class="center" src="http://kalib.github.io/imgs/docker_nginx6660_8080.png" title="'Nginx on Docker'" ></p>

<p><strong>R</strong>epare que acessei ambos os endereços, tanto o da porta 8080, o qual está apresentando o nginx do meu primeiro container, quanto o da porta 6660, que apresenta o nginx do meu segundo container. Ambos funcionando em paralelo, com ambientes distintos, sendo um Ubuntu e o outro Arch Linux, porém ambos compartilham o mesmo kernel, que é o do meu host.</p>

<p><strong>O</strong> próprio script <strong>ps</strong> do docker lhe informa as portas que estão sendo utilizadas para cada container, caso você esteja em dúvida:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> root@cloudcaverna:~# docker ps
</span><span class='line'>
</span><span class='line'> CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                  NAMES
</span><span class='line'> be266bf7e5a3        base/archlinux      "/bin/bash"         26 minutes ago      Up 26 minutes       0.0.0.0:6660-&gt;80/tcp   cocky_hoover
</span><span class='line'> 08abb8611700        ubuntu:15.04        "/bin/bash"         About an hour ago   Up About an hour    0.0.0.0:8080-&gt;80/tcp   jolly_hawking
</span><span class='line'>
</span><span class='line'> root@cloudcaverna:~#</span></code></pre></td></tr></table></div></figure>


<p><strong>D</strong>a mesma forma, você poderá fazer toda e qualquer operação que você faria em uma máquina qualquer, como por exemplo monitorar os logs de acesso do nginx. Basta se conectar em algum dos dois containers com <strong>docker attach &lt;container-id></strong> e em seguida abrir o arquivo de log do nginx com o tail: <strong>tail -f /var/log/nginx/access.log</strong>. Com o log rodando, pode acessar novamente no navegador o endereço com a porta que está mapeada para este container e você verá os logs do seu acesso.</p>

<p><strong>A</strong>nteriormente nós vimos que com a combinação <strong>Ctrl + P + Q</strong> eu consigo sair do container porém ele permanecerá rodando. Com <strong>Ctrl + D</strong> eu finalizava o container de vez. Mas, supondo que eu queira parar temporariamente o container, posso utilizar o script <strong>stop</strong> do container inserindo o id do container que desejo parar:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> root@cloudcaverna:~# docker stop be266bf7e5a3
</span><span class='line'> be266bf7e5a3
</span><span class='line'>
</span><span class='line'> root@cloudcaverna:~#</span></code></pre></td></tr></table></div></figure>


<p><strong>E</strong>xiste ainda uma forma de ver o que foi alterado no container desde sua criação. É literalmente uma espécie de &ldquo;diff&rdquo;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> root@cloudcaverna:~# docker diff 08abb8611700
</span><span class='line'> C /.wh..wh.plnk
</span><span class='line'> A /.wh..wh.plnk/93.1190648
</span><span class='line'> C /bin
</span><span class='line'> A /bin/running-in-container
</span><span class='line'> A /core
</span><span class='line'> C /etc
</span><span class='line'> C /etc/default
</span><span class='line'> A /etc/default/nginx
</span><span class='line'> A /etc/fonts
</span><span class='line'> A /etc/fonts/conf.avail
</span><span class='line'> A /etc/fonts/conf.avail/10-antialias.conf
</span><span class='line'> A /etc/fonts/conf.avail/10-autohint.conf
</span><span class='line'> A /etc/fonts/conf.avail/10-hinting-full.conf
</span><span class='line'> A /etc/fonts/conf.avail/10-hinting-medium.conf
</span><span class='line'> A /etc/fonts/conf.avail/10-hinting-slight.conf
</span><span class='line'> A /etc/fonts/conf.avail/10-hinting.conf
</span><span class='line'> A /etc/fonts/conf.avail/10-no-sub-pixel.conf
</span><span class='line'> A /etc/fonts/conf.avail/10-scale-bitmap-fonts.conf
</span><span class='line'> A /etc/fonts/conf.avail/10-sub-pixel-bgr.conf
</span><span class='line'> A /etc/fonts/conf.avail/10-sub-pixel-rgb.conf
</span><span class='line'> A /etc/fonts/conf.avail/10-sub-pixel-vbgr.conf
</span><span class='line'> A /etc/fonts/conf.avail/10-sub-pixel-vrgb.conf
</span><span class='line'> A /etc/fonts/conf.avail/10-unhinted.conf
</span><span class='line'> A /etc/fonts/conf.avail/11-lcdfilter-default.conf
</span><span class='line'> A /etc/fonts/conf.avail/11-lcdfilter-legacy.conf
</span><span class='line'> A /etc/fonts/conf.avail/11-lcdfilter-light.conf
</span><span class='line'> ...
</span><span class='line'> ...</span></code></pre></td></tr></table></div></figure>


<p><strong>A</strong> saída é extensa, portanto cortei aqui mesmo, mas você terá basicamente todo o diff do que foi alterado desde a criação do container.</p>

<p><strong>R</strong>esumidamente, esta é a função do docker. Com criatividade e disposição se faz muita coisa com ele. Não é a toa que os big players de mercado já estão utilizando bastante esta ferramenta para soluções de container, como por exemplo: Amazon, Apcera, Cisco, CoreOS, Datera, VMWare, Verizon Labs, Red Hat, Google, RackSpace, Oracle, IBM, Intel, Microsoft, HP, etc.</p>

<p><strong>L</strong>embrando que o endereço de repositórios com as imagens já existentes e disponibilizadas gratuitamente é <a href="https://hub.docker.com">https://hub.docker.com</a></p>

<p><strong>A</strong>té a próxima&hellip;</p>

<p><strong>H</strong>appy Hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Assista ao documentário sobre Aaron Swartz: O menino da internet]]></title>
    <link href="http://kalib.github.io/blog/2014/08/03/assista-ao-documentario-sobre-aaron-swartz-o-menino-da-internet/"/>
    <updated>2014-08-03T07:19:00-04:00</updated>
    <id>http://kalib.github.io/blog/2014/08/03/assista-ao-documentario-sobre-aaron-swartz-o-menino-da-internet</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://kalib.github.io/imgs/aaron-swartz-movie.jpg" title="'Aaron Swartz Movie'" >
<code>
 Informação é poder. Mas, como todo poder, há aqueles que querem mantê-la para si mesmos. O patrimônio cultural e científico do mundo, publicado ao longo dos séculos em livros e revistas, está cada vez mais szendo digitalizado e trancado por um punhado de corporações privadas. Enquanto isso, aqueles que foram bloqueados não estão em pé de braços cruzados. Eles estão bisbilhotando em buracos e escalando cercas libertando as informações trancadas pelos editores e compartilhando com seus amigos. Mas toda essa ação acontece no escuro, escondida no subterrâneo. É chamado de roubo ou pirataria, como se compartilhar uma riqueza de conhecimentos fosse o equivalente  de saquear um navio e matar sua tripulação. Mas compartilhar não é imoral - é um imperativo moral. Só os cegos pela ganância se recusam a deixar um amigo fazer uma cópia. Não há justiça em seguir leis injustas. É hora de virmos para a luz e, na grande tradição de desobediência civil, declararmos a nossa oposição a este roubo privado da cultura pública.
</code></p>

<p><strong>E</strong>ste é apenas um trecho do manifesto assinado por Aaron, entitulado &ldquo;Manifesto do guerrilheiro ao acesso livre&rdquo;.</p>

<p><strong>R</strong>ecentemente foi lançado um documentário de Brian Knappenberger sobre <em>Aaron Swartz</em>, o qual foi considerado um dos principais nomes da internet e luta pela liberdade de acesso ao conhecimento dos últimos anos.</p>

<p><strong>P</strong>ara quem ainda não sabe do que se trata, Aaron Swartz foi um dos criadores do RSS bem como do famoso site de notícias e debates Reddit.Após alguns anos lutando e enfrentando a justiça americana Aaron cometeu suicídio.</p>

<p><img class="left" src="http://kalib.github.io/imgs/aaron_swartz.jpg" title="'Aaron Swartz'" ><strong>A</strong>aron estava sendo condenado a cerca de 50 anos de prisão, bem como a pagar um montante superior a U$ 4 milhões em multas por querer tornar públicos os artigos acadêmicos e científicos que eram mantidos na base do JSTOR, o qual vendia o acesso a estes artigos que, na visão de Aaron, deveriam ser de domínio e acesso público.</p>

<p><strong>A</strong>aron sempre defendeu e lutou para que o conhecimento fosse de livre acesso a todos. Lutou tanto que acabou sendo covardemente perseguido e pressionado pelo governo americano, o que acabou por lhe deixar exausto, psicologicamente e financeiramente, ao ponto de ele desistir da luta ao invés de simplesmente &ldquo;assumir&rdquo; que estava errado e aceitar os &ldquo;acordos&rdquo; que lhe foram oferecidos pela justiça americana.</p>

<p><strong>S</strong>eu crime? A curiosidade. A fome por conhecimento. Também a vontade de expor este conhecimento a todos que o desejassem.</p>

<p><strong>P</strong>ara quem por algum motivo ainda não conhece o recurso de legendas ou caption do YoutTube, caso a legenda do filme não apareça automaticamente, basta clicar no botão de legendas/caption, habilitando-o, conforme apresentado na imagem abaixo:</p>

<p><img class="center" src="http://kalib.github.io/imgs/youtube_captions.png" title="'Youtube Captions'" ></p>

<iframe width="560" height="315" src="http://kalib.github.io//www.youtube.com/embed/2uj1EeiuK5U" frameborder="0" allowfullscreen></iframe>


<p>Link para o vídeo: <a href="https://www.youtube.com/watch?v=2uj1EeiuK5U">https://www.youtube.com/watch?v=2uj1EeiuK5U</a></p>

<p><strong>A</strong>braços,</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Alterando os parâmetros do kernel em tempo real com o Systcl]]></title>
    <link href="http://kalib.github.io/blog/2014/02/13/alterando-os-parametros-do-kernel-em-tempo-real-com-o-systcl/"/>
    <updated>2014-02-13T22:02:00-05:00</updated>
    <id>http://kalib.github.io/blog/2014/02/13/alterando-os-parametros-do-kernel-em-tempo-real-com-o-systcl</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://kalib.github.io/imgs/linux-kernel.jpg" title="'Linux Kernel'" >
<strong>O</strong> <em>kernel</em>, em se tratando de sistemas operacionais, é o núcleo e componente mais importante da maioria dos computadores. Basicamente, serve de ponte entre os aplicativos e o processamento real de dados feito a nível de hardware. É ele o responsável por gerenciar os recursos do sistema, podendo oferecer uma camada de abstração de nível mais baixo para os recursos, como processadores e dispositivos de entrada/saída, que os softwares aplicativos devem controlar para realizar sua função. Com o GNU/Linux não é diferente. O núcleo Linux (Linux Kernel) forma a estrutura do sistema operacional GNU/Linux.</p>

<p><strong>C</strong>omo é de se esperar, o kernel possui diversos parâmetros configurados que definirão as características do seu sistema, controle de dispositivos, módulos, drivers, etc. Por vezes faz-se necessário alterar algum parâmetro do kernel para alguma tarefa ou rotina específica, portanto que tal ganhar tempo e alterar um ou mais parâmetros do kernel <em>on the fly</em>?!</p>

<p><strong>O</strong> comando <em>sysctl</em> pode ajudar nesta tarefa. Ele ajuda a configurar os parâmetros do kernel em tempo de execução.</p>

<p><strong>P</strong>ara listar os atuais parâmetros de seu kernel digite:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ sysctl -a
</span><span class='line'>  
</span><span class='line'> abi.vsyscall32 = 1
</span><span class='line'> debug.exception-trace = 1
</span><span class='line'> dev.cdrom.autoclose = 1
</span><span class='line'> dev.cdrom.autoeject = 0
</span><span class='line'> dev.cdrom.check_media = 0
</span><span class='line'> dev.cdrom.lock = 1
</span><span class='line'> dev.hpet.max-user-freq = 64
</span><span class='line'> dev.mac_hid.mouse_button2_keycode = 97
</span><span class='line'> dev.mac_hid.mouse_button3_keycode = 100
</span><span class='line'> dev.mac_hid.mouse_button_emulation = 0
</span><span class='line'> dev.scsi.logging_level = 0
</span><span class='line'> fs.aio-max-nr = 65536
</span><span class='line'> fs.aio-nr = 41192
</span><span class='line'> fs.binfmt_misc.status = enabled
</span><span class='line'> fs.dentry-state = 177183        161128  45      0       0       0
</span><span class='line'> fs.dir-notify-enable = 1
</span><span class='line'> fs.epoll.max_user_watches = 1209446
</span><span class='line'> fs.file-max = 586836
</span><span class='line'> fs.file-nr = 8992       0       586836
</span><span class='line'> fs.inode-nr = 96800     290
</span><span class='line'> fs.inotify.max_user_watches = 8192
</span><span class='line'> fs.lease-break-time = 45
</span><span class='line'> kernel.sched_cfs_bandwidth_slice_us = 5000
</span><span class='line'> kernel.sched_child_runs_first = 0
</span><span class='line'> kernel.version = #1 SMP PREEMPT Fri Jan 31 10:22:54 CET 2014
</span><span class='line'> kernel.watchdog = 1
</span><span class='line'> kernel.watchdog_thresh = 10
</span><span class='line'> kernel.yama.ptrace_scope = 1
</span><span class='line'> net.core.bpf_jit_enable = 0
</span><span class='line'> net.core.busy_poll = 0
</span><span class='line'> net.ipv4.cipso_cache_bucket_size = 10
</span><span class='line'> net.ipv4.conf.all.accept_local = 0</span></code></pre></td></tr></table></div></figure>


<p><strong>O</strong> retorno deste comando é bastante extenso, portanto colei aqui apenas algumas linhas aleatórias de meu resultado.</p>

<p><strong>P</strong>ara alterar temporariamente um parâmetro, utilize o parâmetro -w do sysctl, indicando a variável que deseja alterar e o novo valor que será utilizado para a mesma.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ sysctl -w {nome-da-variável=valor}</span></code></pre></td></tr></table></div></figure>


<p><strong>N</strong>o caso acima a(s) alteração(ões) será(ão) perdida(s) após a reinicialização do sistema.</p>

<p><strong>C</strong>aso deseje realizar alterações permanentes, edite o arquivo <em>/etc/sysctl.conf</em> e em seguida aplique suas modificações com o parâmetro -p do sysctl.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ sysctl -p</span></code></pre></td></tr></table></div></figure>


<p><strong>D</strong>esta forma, após a reinicialização suas modificações permanecerão ativas.</p>

<p><strong>H</strong>appy Hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BlackArch Linux - Uma nova distribuição para Pentesters]]></title>
    <link href="http://kalib.github.io/blog/2014/01/30/blackarch-linux-uma-nova-distribuicao-para-pentesters/"/>
    <updated>2014-01-30T08:47:00-05:00</updated>
    <id>http://kalib.github.io/blog/2014/01/30/blackarch-linux-uma-nova-distribuicao-para-pentesters</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://kalib.github.io/imgs/blackarch.jpg" title="'BlackArch'" ></p>

<p><strong>U</strong>ma boa novidade para os profissionais de segurança: <a href="http://www.blackarch.org" target="_blank">BlackArch</a>! Para quem, assim como eu, gosta de como as coisas funcionam no Arch Linux essa é uma notícia particularmente boa, visto que o BlackArch não se trata realmente de uma nova distribuição, mas sim de uma <em>extensão</em> para o Arch Linux. Como assim? Bom, você possui duas opções para utilizar o BlackArch, sendo uma delas como uma distribuição completa, através de um Live CD, por exemplo, e a outra como uma extensão (um repositório de pacotes) para o Arch Linux, onde você poderá apenas inserir um repositório em sua já existente distribuição Arch Linux e ter acesso ao conjunto de ferramentas do BlackArch.</p>

<p><strong>O</strong> BlackArch, atualmente, possui suporte para as arquiteturas i686 e x86_64, com previsão de suporte para ARM em breve (Sim, meu RaspBerry poderá se tornar uma ferramenta para pentests). No mais, o BlackArch hoje possui mais de 600 ferramentas, estando este número crescendo constantemente, e utiliza grupos modulares de pacotes, facilitando a instalação dos mesmos.</p>

<p><strong>A</strong> ISO Live trás diversos gerenciadores de janelas ou ambientes gráficos, como o dwm, Fluxbox, Openbox, Awesome, Wmii, i3 e Spectrwm. É claro, ele também trás um instalador capaz de instalar a partir do fonte.</p>

<p><strong>D</strong>entre as ferramentas existentes estão: 3proxy, 42zip, acccheck, aesfix, against, airflood, airoscript, bluepot, blueprint, braces, bss, bully, cisco-ocs, cmospwd, dbd, dc3dd, deblaze, dhcpig, enumiax, fakedns, &hellip; Vocẽ não espera que eu liste todos os mais de 600, certo?</p>

<p><a href="http://blackarch.org/images/screenshots/openbox.png" target="_blank"><img class="center" src="http://kalib.github.io/imgs/openbox.png" title="'BlackArch Openbox'" ></a></p>

<p><strong>Configurando como um Repositório Não-Oficial</strong></p>

<p><strong>S</strong>e você já possui o Arch Linux instalado e deseja apenas inserir o BlackArch como um repositório em sua distro, execute os seguintes comandos como root, os quais servirão para assinar os pacotes: <em>(Se você não possui o Arch Linux instalado e/ou simplesmente deseja rodar o Live CD ou instalar o mesmo por completo, seja em uma máquina física ou virtual, siga para a seção <a href="#instalando">Instalando o BlackArch Linux utilizando a Live-ISO</a>)</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> # wget -q http://blackarch.org/keyring/blackarch-keyring.pkg.tar.xz{,.sig}
</span><span class='line'>
</span><span class='line'> # gpg --keyserver hkp://pgp.mit.edu --recv 4345771566D76038C7FEB43863EC0ADBEA87E4E3
</span><span class='line'>
</span><span class='line'> # gpg --keyserver-o no-auto-key-retrieve --with-f blackarch-keyring.pkg.tar.xz.sig
</span><span class='line'>
</span><span class='line'> # pacman-key --init
</span><span class='line'>
</span><span class='line'> # rm blackarch-keyring.pkg.tar.xz.sig
</span><span class='line'>
</span><span class='line'> # pacman --noc -U blackarch-keyring.pkg.tar.xz</span></code></pre></td></tr></table></div></figure>


<p><strong>E</strong>m seguida, adicione as seguintes linhas ao seu arquivo <em>/etc/pacman.conf</em>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  [blackarch]
</span><span class='line'>  Server = &lt;mirror_site&gt;/$repo/os/$arch</span></code></pre></td></tr></table></div></figure>


<p><strong>Substitua</strong> <em>&lt;mirror_site></em> por um mirror de sua escolha, preferencialmente um dos <strong>mirrors oficiais</strong> contidos <a href="http://blackarch.org/download.html#mirrors" target="_blank"><em>neste link</em></a>.</p>

<p><strong>U</strong>ma vez que você tenha seguido os passos acima, execute:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ sudo pacman -Syyu</span></code></pre></td></tr></table></div></figure>


<p><strong>Instalando os pacotes</strong></p>

<p><strong>A</strong>gora que você já preparou o terreno assinando e configurando o repositório do Black Arch, basta instalar os pacotes em seu Arch Linux.</p>

<p><strong>P</strong>ara listar todas as ferramentas disponíveis, execute:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ sudo pacman -Sgg | grep blackarch | cut -d' ' -f2 | sort -u</span></code></pre></td></tr></table></div></figure>


<p><strong>P</strong>ara instalar todas as ferramentas, execute:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ sudo pacman -S blackarch</span></code></pre></td></tr></table></div></figure>


<p><strong>P</strong>ara instalar uma categoria de ferramentas, execute:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ sudo pacman -S blackarch-&lt;categoria&gt;</span></code></pre></td></tr></table></div></figure>


<p><strong>P</strong>ara ver as categorias existentes no BlackArch, execute:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ sudo pacman -Sg | grep blackarch</span></code></pre></td></tr></table></div></figure>


<p><strong><a name="instalando">Instalando o BlackArch Linux utilizando a Live-ISO</a></strong></p>

<p><strong>A</strong>ntes de mais nada, <a href="http://blackarch.org/download.html" target="_blank">baixe a ISO a partir do site oficial</a>.</p>

<p><strong>E</strong>m seguida, dê boot na ISO e instale o script de instalação do BlackArch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ sudo pacman -S blackarch-install-scripts</span></code></pre></td></tr></table></div></figure>


<p><strong>A</strong>gora, basta instalar:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> # blackarch-install</span></code></pre></td></tr></table></div></figure>


<p><strong>H</strong>appy Hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dica - Escondendo Seu Endereço de Email ao Divulgar Seu Endereço de Email]]></title>
    <link href="http://kalib.github.io/blog/2014/01/23/dica-escondendo-seu-endereco-de-email-ao-divulgar-seu-endereco-de-email/"/>
    <updated>2014-01-23T09:37:00-05:00</updated>
    <id>http://kalib.github.io/blog/2014/01/23/dica-escondendo-seu-endereco-de-email-ao-divulgar-seu-endereco-de-email</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://kalib.github.io/imgs/frog_camouflage.jpg" title="'Camouflage'" ></p>

<p><strong>D</strong>a mesma forma que alguns animais só conseguem sobreviver utilizando-se de sua capacidade e/ou técnica de camuflar-se, misturando-se assim ao ambiente, para enganar seus predadores naturais, as pessoas do mundo atual praticamente precisam adotar as mesmas técnicas para manter seus endereços de email livres de um turbilhão de emails indesejados com propagandas de viagra, dicas para crescimento peniano, irregularidades em seu CPF, problemas em sua conta bancária, etc, etc.</p>

<p><strong>U</strong>m dos métodos mais simples e mais utilizado é substituir a <em>@</em> por alguma outra coisa, como por exemplo:</p>

<p><em>fulanoEMgmail.com</em>
<em>fulanoAThotmail.com</em>
&hellip;</p>

<p><strong>M</strong>as existem aqueles que podem preferir levar isto à um nível mais elevado. Que tal fazer de uma forma mais geek?</p>

<p><strong>O</strong> Linux pode lhe ajudar a fazer isto de forma inusitada, porém eficiente e confiável. Para nosso exemplo, vamos assumir que utilizaremos o email <em>fulano@marcelocavalcante.net</em>.</p>

<p><strong>E</strong>xperimente o seguinte comando:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ echo fulano@marcelocavalcante.net | tr a-z@. n-za-m.@</span></code></pre></td></tr></table></div></figure>


<p><strong>O</strong> retorno será algo como:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> shynab.zneprybpninypnagr@arg</span></code></pre></td></tr></table></div></figure>


<p><strong>I</strong>legível, certo? Parabéns, você acaba de &ldquo;camuflar&rdquo; ou &ldquo;esconder&rdquo; o seu email. Este é o seu endereço de email. Como divulgar ele para que alguém possa entendê-lo? Bom, ao invés de divulgar um endereço de email, voê vai divulgar um comando, da seguinte forma:</p>

<p><strong>echo shynab.zneprybpninypnagr@arg | tr a-z@. n-za-m.@</strong></p>

<p><strong>D</strong>esta forma, quem copiar este comando e o executar em um terminal Linux, terá o seguinte resultado:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ echo shynab.zneprybpninypnagr@arg | tr a-z@. n-za-m.@
</span><span class='line'> fulano@marcelocavalcante.net</span></code></pre></td></tr></table></div></figure>


<p><em>*D</em>esta forma você evitar que robôs ou scanners saiam vasculhando seu endereço de email indexando conteúdos aleatórios pela internet e assim, reduzindo assim as chances de o seu endereço de email cair em listas de SPAM.fff</p>

<p><strong>L</strong>egal, certo?!</p>

<p><strong>H</strong>appy Hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dica - Assistir Star Wars em um Console ou Terminal]]></title>
    <link href="http://kalib.github.io/blog/2014/01/17/dica-assistir-star-wars-em-um-console-ou-terminal/"/>
    <updated>2014-01-17T10:30:00-05:00</updated>
    <id>http://kalib.github.io/blog/2014/01/17/dica-assistir-star-wars-em-um-console-ou-terminal</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://kalib.github.io/imgs/starwars.png" title="'Star Wars'" >
<strong>Q</strong>uem disse que o terminal ou linha de comando serve apenas para trabalho e coisas chatas?</p>

<p><strong>E</strong>stá entediado em frente ao seu terminal GNU/Linux?    Que tal algo para passar o tempo e, ao mesmo tempo, lhe trazer uma certa nostalgia? Assista Star Wars sem precisar sair de sua linha de comando ou terminal.</p>

<p><strong>T</strong>udo o que você precisa digitar é:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> $ telnet towel.blinkenlights.nl</span></code></pre></td></tr></table></div></figure>


<p><strong>F</strong>eito isso, basta apreciar o show&hellip;</p>

<p><img class="center" src="http://kalib.github.io/imgs/starwars_1.png" title="'Star Wars'" ></p>

<p><img class="center" src="http://kalib.github.io/imgs/starwars_2.jpg" title="'Star Wars'" ></p>

<p><strong>H</strong>ave fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dica - Apostila Disponibilizada Gratuitamente - pfSense]]></title>
    <link href="http://kalib.github.io/blog/2014/01/14/dica-apostila-disponibilizada-gratuitamente-pfsense/"/>
    <updated>2014-01-14T08:27:00-05:00</updated>
    <id>http://kalib.github.io/blog/2014/01/14/dica-apostila-disponibilizada-gratuitamente-pfsense</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://kalib.github.io/imgs/pfsense.png" title="'pfSense'" >
<strong>G</strong>ostaria de passar adiante a notícia de que o colega <em>Leonardo Damasceno</em> acaba de compartilhar com a comunidade uma apostila de sua autoria sobre o <a href="http://www.pfsense.org"><strong>pfSense</strong></a>, de forma a divulgar mais este magnífico sistema, bem como facilitar a vida daqueles que ainda não o dominam.</p>

<p><strong>S</strong>egue link direto fornecido pelo mesmo para <a href="http://www.marcelocavalcante.net/repositorio/pfsense-leonardodamasceno.pdf"><strong>download</strong></a>. A apostila ou livro, como prefira chamar, possui aproximadamente 70 páginas de informações úteis e diretas, sem muitas complicações.</p>

<p><strong>N</strong>ão sabe o que é pfSense?</p>

<p><img class="center" src="http://kalib.github.io/imgs/pfsense1.jpg" title="'pfSense1'" ></p>

<p><strong>O</strong> pfSense é um sistema operacional baseado no <em>Free BSD</em> que pode ser instalado em um computador para servir como um firewall/roteador dedicado em uma rede. Como ferramenta <em>open source</em>, o pfSense tem se destacado nesta função, sendo considerado um dos melhores e mais confiáveis para este trabalho, oferecendo, além de sua estabilidade e confiabilidade, recursos e funções que geralmente são encontrados apenas em firewalls comerciais e caros. Não creio ser necessário lembrar a confiabilidade dos sistemas <em>Free BSD</em>&hellip;</p>

<p><img class="center" src="http://kalib.github.io/imgs/pfsense2.jpg" title="'pfSense2'" ></p>

<p><strong>E</strong>mbora seja uma versão customizada do Free BSD, não é necessário qualquer conhecimento sobre este sistema para operar o psSense, visto que ele é atualizado e completamente configurado através de uma interface web. Na maioria dos casos o pfSense tem sido aplicado como um firewall de perímetro, roteador, access point wireless, servidor DHCP, servidor DNS e VPN.</p>

<p><img class="center" src="http://kalib.github.io/imgs/pfsense3.jpg" title="'pfSense3'" ></p>

<p><strong>O</strong> mesmo apresenta diversos recursos gráficos para análise de tráfego, pacotes, performance, etc. Além de configurações avançadas para regras de firewall para LAN, WAN e utilizãção de Aliases de forma simples e intuitiva.</p>

<p><img class="center" src="http://kalib.github.io/imgs/pfsense4.jpg" title="'pfSense4'" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dica de Segurança - Previna Ataques Bloqueando Pacotes ICMP Indesejados]]></title>
    <link href="http://kalib.github.io/blog/2014/01/06/dica-de-seguranca-previna-ataques-bloqueando-pacotes-icmp-indesejados/"/>
    <updated>2014-01-06T08:40:00-05:00</updated>
    <id>http://kalib.github.io/blog/2014/01/06/dica-de-seguranca-previna-ataques-bloqueando-pacotes-icmp-indesejados</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://kalib.github.io/imgs/you_shall_not_pass.jpg" title="'Gandalf'" >
<strong>O</strong> protocolo <em>ICMP</em> pode ser utilizado para facilitar diversas rotinas e tarefas importantes de um administrador de redes, tais como na utilização de ferramentas como o <em>ping</em> e o <em>traceroute</em>, mas também pode ser manipulado por pessoas mal intencionadas que podem manipular mensagens ou pacotes ICMP para mapear sua rede.</p>

<p><strong>É</strong> comum ver administradores de rede se preocupando e fazendo um ótimo trabalho em termos de filtrar o tráfego <em>TCP</em> e/ou <em>UDP</em>, porém quase sempre esquecem de dar a mesma atenção ao tráfego <em>ICMP</em>, sendo este tão crítico quanto os dois anteriores. Uma vez que este protocolo pode ser utilizado para mapear e realizar ataques em sua rede, ele não pode simplesmente ser deixado de lado.</p>

<p><strong>I</strong>CMP, sigla para <em>Internet Control Message Protocol</em>, é um protocolo integrante do Protocolo IP utilizado para fornecer relatórios de erros à fonte original. Seu tráfego é, basicamente, baseado em mensagens trocadas entre hots, gateways, etc., cujo intuito é, principalmente, reportar erros, como por exemplo um pacote IP que não consegue chegar ao seu destino.</p>

<p><strong>P</strong>or padrão, alguns servidores e firewalls bloqueiam as respostas ICMP como medida de segurança, tentando assim bloquear os ataques que consistem na sobrecarga da memória, enviando dados (em ping) até o sistema não ter a capacidade de administrar suas próprias funções. Bom, ao mesmo tempo em que é um mecanismo de defesa interessante, este bloqueio total acaba comprometendo e atrapalhando diversas atividades do administrador de redes, não sendo portanto a estratégia mais inteligente a ser adotada.</p>

<p><strong>A</strong>o invés de bloquear o ICMP por completo, é mais interessante conhecer o que é bom e o que é ruim em termos de mensagens ICMP, de forma que sejam realizados filtros corretos. A importância desta gangorra é não permitir que o lado <em>ruim</em> do ICMP, como por exemplo ICMP Smurf, Ping of death, ataques com ICMP flood ou ICMP nuke, prejudiquem o administrador de redes que pode tirar proveito de boas ferramentas que se utilizam do ICMP, como o Ping e o Traceroute.</p>

<p><strong>A</strong> estratégia mais simples, portanto, é utilizar uma regra geral contendo exceções.</p>

<ol>
<li>Bloquear todos os tipos de tráfego ICMP;</li>
<li>Permitir ping &mdash; CMP Echo-Request outbound (saída) e Echo-Reply inbound (entrada);</li>
<li>Permitir traceroute &mdash; TTL-Exceeded e Port-Unreachable inbound (entrada);</li>
<li>Permitir path MTU &mdash; ICMP Fragmentation-DF-Set inbound (entrada).</li>
</ol>


<p><strong>É</strong> claro que este é apenas um exemplo, visto que você poderá permitir mais ou menos, de acordo com a sua necessidade.</p>

<p><strong>N</strong>ão deixemos pobre a nossa configuração, facilitando as coisas para ataques quando isto pode ser facilmente bloqueado.</p>

<p><strong>H</strong>appy Hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Criptografando sua Partição Swap com o Ecryptfs]]></title>
    <link href="http://kalib.github.io/blog/2014/01/03/criptografando-sua-particao-swap-com-o-ecryptfs/"/>
    <updated>2014-01-03T08:48:00-05:00</updated>
    <id>http://kalib.github.io/blog/2014/01/03/criptografando-sua-particao-swap-com-o-ecryptfs</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://kalib.github.io/imgs/crypto.jpg" title="'Criptografia'" >
<strong>C</strong>riptografia (Do grego <em>kryptós</em>, &ldquo;escondido&rdquo;, e <em>gráphein</em>, &ldquo;escrita&rdquo;) nada mais é do que o estudo e aplicação de técnicas com o intuito de ocultar informações, transformando a informação original em algo ilegível, exceto para seu destinatário final, o qual possui a chave ou método que será utilizado para tornar a informação legível novamente.</p>

<p><strong>A</strong>pesar de muitas pessoas acharem que criptografia é algo novo, o uso de mensagens cifradas é bastante antigo. Em tempos passados a cifragem de mensagens era utilizada, principalmente em assuntos de guerra. De acordo com estudos históricos, o primeiro uso documentado da criptografia foi em torno de <em>1900 a.c.</em>, no Egito, quando um escriba usou hieróglifos fora do padrão numa inscrição.</p>

<p><strong>A</strong>o que interessa&hellip;</p>

<p><strong>M</strong>uitas pessoas, por alguma razão (como por exemplo performance ou não gostar da ideia de digitar gigantescas senhas duranto o boot), acabam não utilizando uma LVM encriptada. Para estas pessoas existe a opção de criptografar arquivos e diretórios após a instalação do SO através de softwares como o eCryptfs. Mas, além disto, existe um outro aspecto interessante e importante que, por muitas vezes (para não dizer quase sempre) é esquecido: criptografar a swap.</p>

<p><strong>S</strong>e você é usuário GNU/Linux, muito provavelmente já sabe o que é Swap. Ela é especialmente utilizada em computadores mais antigos e que possuem pouca memória RAM. Nestes casos, um espaço do disco rígido é utilizado como swap para servir de auxílio à memória RAM em diferentes tarefas quando a mesma não for o suficiente para realizar aquelas tarefas. Por questões óbvias, a swap não é tão rápida quanto a memória principal e, além disso, a swap também possui seus pontos <em>críticos</em> em relação a segurança. A questão mais crítica da swap em termos de segurança é o fato de ela, conforme já dito, não estar localizada em sua RAM, mas sim em seu disco rígido, escrevendo informações nesta partição, deixando assim rastros de suas atividades no próprio disco rígido. Por exemplo, caso você utilize softwares de criptografia em seu computador, mas não possua sua swap criptografada, você corre o risco de ter as senhas de chaves que você digita salvas em sua swap (disco rígido). Algo não desejado, certo?</p>

<p><strong>P</strong>ara criptografar a sua swap, primeiramente instale os pacotes necessários:</p>

<p><strong>No Arch Linux</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ sudo pacman -S ecryptfs-utils cryptsetup</span></code></pre></td></tr></table></div></figure>


<p><strong>No Debian ou derivados</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ sudo apt-get install ecryptfs-utils cryptsetup</span></code></pre></td></tr></table></div></figure>


<p><strong>E</strong>m seguida, precisamos literalmente criptografar a swap utilizando o seguinte comando:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ sudo ecryptfs-setup-swap</span></code></pre></td></tr></table></div></figure>


<p><strong>N</strong>este momento, sua partição swap será desmontada, encriptada e montada novamente.</p>

<p><strong>P</strong>ara certificar-se de que o procedimento funcionou, digite o seguinte comando:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ sudo blkid | grep swap</span></code></pre></td></tr></table></div></figure>


<p><strong>V</strong>ocê deverá receber as informações sobre sua partição de swap, inclusive o indicativo <em>cryptswap</em>.</p>

<p><strong>C</strong>omo medida preventiva contra erros durante o boot, edite o arquivo <em>/etc/fstab</em>, retirando a entrada da swap não encriptada, deixando em seu lugar a entrada para a swap encriptada.</p>

<p><strong>H</strong>appy Hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Navegação Anônima Através da Rede Tor]]></title>
    <link href="http://kalib.github.io/blog/2013/12/30/navegacao-anonima-atraves-da-rede-tor/"/>
    <updated>2013-12-30T08:15:00-05:00</updated>
    <id>http://kalib.github.io/blog/2013/12/30/navegacao-anonima-atraves-da-rede-tor</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://kalib.github.io/imgs/tor_logo.png" title="'Tor'" >
<strong>O</strong> ano de 2013 foi marcado por diversos acontecimentos de grande repercussão e, sem sombra de dúvidas, um deles foi o escândalo causado pelo vazamento de dados que provaram que algumas instituições, dentre elas a <em>NSA</em> (Agência de Segurança dos Estados Unidos), estavam espionando diversas entidades, empresas e até mesmo pessoas físicas nas mais diversas regiões do globo. Escândalos a parte, estas denúncias acabaram despertando um pouco mais (uma pena que não tenha sido muito mais) nas pessoas o interesse em preservar sua privacidade.</p>

<p><strong>S</strong>endo assim, nada mais justo que dedicar o último post do ano ao <em>Tor</em>.</p>

<p><strong>A</strong>inda vivemos em um mundo (principalmente nosso querido Brasil) onde as pessoas parecem simplesmente não se importar com o quesito privacidade. Não é difícil encontrar praticamente todas as informações sobre a maioria das pessoas pois elas mesmas fazem questão de expor isto aos sete ventos através das redes e mídias sociais. Divulgam dezenas de fotos de sua pessoa, bem como de seus parentes, informam dados pessoais, rotinas, locais que frequentam, horários, local de trabalho, amizades, áreas de interesse, etc. A lista é longa&hellip;</p>

<p><strong>F</strong>elizmente algumas pessoas já começaram a atentar para a importância de manter sua privacidade e, para tal, passaram a buscar maneiras alternativas para <em>driblar</em> estas <em>espionagens</em> e outras formas de golpes tão comuns hoje em dia, mantendo assim o seu anonimato durante sua navegação. A rede <strong>Tor</strong>, ou <em>The Onion Router</em>, surgiu basicamente com este propósito.</p>

<p><strong>T</strong>or é uma rede de computadores distribuída cuja finalidade primária é manter o anonimato na <em>internet</em>. Seu objetivo básico é garantir a privacidade e anonimato do usuário que está navegando através desta rede. Apesar de o uso do Tor ser simplificado em sistemas GNU/Linux, visto que a maioria das distribuições disponibilizam o pacote do Tor, também existem versões para sistemas Windows e Mac OS. Trata-se de uma rede de túneis criptografados, onde os roteadores da rede são computadores de usuários comuns que estão rodando um programa e possuem acesso à internet.</p>

<p><strong>B</strong>asicamente, o usuário instala um programa, <em>tor-cliente</em>, em seu computador e este funcionará como um <em>proxy</em> para o mesmo. Os demais programas que o usuário utiliza para navegar na internet <em>(navegador, emule, etc.)</em> deverão ser configurados para navegar através deste proxy.</p>

<p><strong>A</strong> partir daí, quando o usuário digitar em seu navegador o endereço destino, <em><a href="http://www.google.com*">http://www.google.com*</a> por exemplo, ao invés de a sua requisição passar por roteadores convencionais para atingir o destino, ele passará por túneis criptografados da rede Tor, para então chegar ao seu destino. Nestes túneis a sua requisição e informações passam por vários </em>nós<em> da rede Tor. Um exemplo prático do anonimato provido pelo Tor é a verificação do seu próprio IP. Caso deseje realizar o teste, experimente acessar o endereço </em><a href="http://www.meuip.com.br*">http://www.meuip.com.br*</a> antes de instalar e configurar o Tor em sua máquina. Este site lhe informará o seu atual endereço IP, no caso o endereço será o do seu roteador de acesso à rede pública. Em seguida, tente acessar novamente o mesmo endereço após ter instalado e configurado o Tor. Você perceberá que ele não retornará o seu endereço IP, mas sim um endereço IP qualquer de um nó da rede Tor. Ou seja, isto atrapalha a vida de quem quer que deseje rastrear a sua máquina a partir de um endereço que você tenha acessado ou mesmo de um email que você tenha enviado.</p>

<p><strong>Instalação do Tor no Arch Linux</strong></p>

<p><strong>C</strong>onforme informei no início, o Tor está disponível para praticamente todos os sistemas operacionais, mas vou focar a explicação de instalação para a minha distribuição, Arch Linux, embora o processo seja bastante similar para as demais distribuições GNU/Linux.</p>

<ol>
<li>Instale o Tor:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ sudo pacman -S tor</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Como um opcional, instale também o frontend ou GUI, o qual é desenvolvido em QT, <em>vidalia</em>. O vidalia, além de controlar o processo Tor, permite-lhe ver e configurar o status do Tor, monitorar o uso de banda e ver, filtrar ou realizar pesquisas em mensagens de log, etc.</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ sudo pacman -S vidalia</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Inicie/Habilite o serviço utilizando o <em>systemd</em>.</li>
</ol>


<p><strong>A</strong> configuração padrão do Tor deverá funcionar para a maioria dos usuários, mas caso deseje alterar algo, verifique a documentação do Tor e altere as configurações em <em>/etc/tor/torrc</em>.</p>

<ol>
<li>Para utilizar um programa através da rede Tor, configure-o para utilizar o endereço <em>127.0.0.1</em> ou <em>localhost</em> como endereço proxy <em>SOCKS5</em> através da porta <em>9050</em> (porta padrão do Tor) ou <em>9051</em> (porta padrão utilizada quando se configura com o vidalia).</li>
</ol>


<p><strong>A</strong> rede Tor possui uma espécio de domínio próprio com terminação <em>.onion</em>, acessível apenas através da própria rede Tor. Páginas com este domínio são parte da chamada Deep Web, mas isto será assunto para um outro post por ser algo polêmico e extenso.</p>

<p><strong>D</strong>esejo a todos um feliz ano novo com liberdade, privacidade e anonimato, quando necessário!</p>

<p><strong>H</strong>appy Hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vulnerabilidade no Firefox - Descobrindo Senhas Salvas]]></title>
    <link href="http://kalib.github.io/blog/2013/12/27/vulnerabilidade-no-firefox-descobrindo-senhas-salvas/"/>
    <updated>2013-12-27T08:40:00-05:00</updated>
    <id>http://kalib.github.io/blog/2013/12/27/vulnerabilidade-no-firefox-descobrindo-senhas-salvas</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://kalib.github.io/imgs/firefox_pass.png" title="'Firefox Peaces'" >
<strong>U</strong>ma coisa é certa&hellip; usuários teimam em salvar senhas em navegadores para <em>facilitar</em> suas vidas durante a navegação na internet. Seja em emails, redes sociais, serviços online ou qualquer outra coisa, a opção <em>Salvar sua senha</em> parece possuir um enorme magnetismo ou um centro gravitacional extremamente denso a ponto de atrair o usuário para tal.</p>

<p><strong>S</strong>erá que as pessoas não entendem o quão perigosa é a ideia de <em>salvar sua senha</em> onde quer que seja? É, praticamente, o mesmo risco assumido por quem anota suas senhas em <em>post-its</em> e os colam em seu monitor ou mesa.</p>

<p><strong>H</strong>oje um colega me procurou para saber como recuperar uma senha que ele não lembrava mais. Já conhecendo o histórico do mesmo eu tinha certeza que ele tinha salvo esta senha no navegador. Então lhe mostrei como ele, ou qualquer outra pessoa, conseguiria facilmente descobrir todas as senhas salvas em seu navegador Firefox. A experiência foi boa por dois motivos:</p>

<ol>
<li>Ele conseguiu descobrir sua senha; <em>(a qual ele provavelmente não esqueceria se tivesse o costume de digitá-la sempre que necessário ao invés de salá-la no navegador)</em></li>
<li>Ele entendeu o risco que ele corre com esta prática absurda;</li>
</ol>


<p><strong>V</strong>ejamos o quão <strong>simples</strong> <em>(para não dizer estúpido)</em> é o procedimento para descobrir as senhas salvas pelo usuário no navegador Firefox.</p>

<ol>
<li>Clique no menu <strong>Firefox</strong> que se encontra no canto superior esquerdo do navegador;</li>
</ol>


<p><img class="center" src="http://kalib.github.io/imgs/firefox_pass_1.png" title="'Firefox Pass 1'" ></p>

<ol>
<li>Selecione a opção <strong>Preferências</strong> no menu e em seguida, novamente, <strong>Preferências</strong>;</li>
</ol>


<p><img class="center" src="http://kalib.github.io/imgs/firefox_pass_2.png" title="'Firefox Pass 2'" ></p>

<ol>
<li>Na aba <strong>Segurança</strong>, clique no botão <strong>Senhas Salvas</strong>;</li>
</ol>


<p><img class="center" src="http://kalib.github.io/imgs/firefox_pass_3.png" title="'Firefox Pass 3'" ></p>

<ol>
<li>Repare que na janela que será apresentada você terá uma lista de sites/serviços e usuários que deixaram suas senhas salvas. Nesta janela, clique no botão <strong>Mostrar Senhas</strong>;</li>
</ol>


<p><img class="center" src="http://kalib.github.io/imgs/firefox_pass_4.png" title="'Firefox Pass 4'" ></p>

<ol>
<li>Agora você poderá ver as senhas salvas em texto plano, limpo e claro.</li>
</ol>


<p><img class="center" src="http://kalib.github.io/imgs/firefox_pass_5.png" title="'Firefox Pass 5'" ></p>

<p><strong>Lição aprendida: Não salve suas senhas!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dica Rápida - Linux - Troubleshooting em Tempo de Execução com Strace]]></title>
    <link href="http://kalib.github.io/blog/2013/12/19/dica-rapida-linux-troubleshooting-em-tempo-de-execucao-com-strace/"/>
    <updated>2013-12-19T08:28:00-05:00</updated>
    <id>http://kalib.github.io/blog/2013/12/19/dica-rapida-linux-troubleshooting-em-tempo-de-execucao-com-strace</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://kalib.github.io/imgs/troubleshoot.jpg" title="'Troubleshooting'" >
<strong>S</strong>e algum dia você já precisou realizar uma análise para troubleshoot de algum comando em tempo de execução e não soube como fazê-lo, seus problemas acabaram. O <strong>strace</strong> faz justamente isso.</p>

<p><strong>J</strong>á trabalhei em servidores de clientes comprometidos pós-invasão cujos comandos padrões <strong>Unix</strong> haviam sido substituídos por comandos <em>similares</em> (ao menos em nome) que realizam outras tarefas sem o conhecimento dos administradores dos mesmos.</p>

<p><strong>O</strong> strace serve justamente para estes, bem como outros, casos. Ele lhe indica exatamente tudo o que acontece <em>por baixo dos panos</em> em seu sistema.</p>

<p><strong>V</strong>ejamos um exemplo.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ date
</span><span class='line'> Qui Dez 19 08:41:55 BRT 2013</span></code></pre></td></tr></table></div></figure>


<p><strong>A</strong>gora vejamos a diferença com o uso do strace.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ strace date
</span><span class='line'> execve("/usr/bin/date", ["date"], [/* 59 vars */]) = 0
</span><span class='line'> brk(0)                                  = 0x21df000
</span><span class='line'> access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
</span><span class='line'> open("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
</span><span class='line'> fstat(3, {st_mode=S_IFREG|0644, st_size=274630, ...}) = 0
</span><span class='line'> mmap(NULL, 274630, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fe0d3f3d000
</span><span class='line'> close(3)                                = 0
</span><span class='line'> open("/usr/lib/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
</span><span class='line'> read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\20\34\2\0\0\0\0\0"..., 832) = 832
</span><span class='line'> fstat(3, {st_mode=S_IFREG|0755, st_size=2031229, ...}) = 0
</span><span class='line'> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fe0d3f3c000
</span><span class='line'> mmap(NULL, 3840528, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fe0d39b8000
</span><span class='line'> mprotect(0x7fe0d3b58000, 2097152, PROT_NONE) = 0
</span><span class='line'> mmap(0x7fe0d3d58000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1a0000) = 0x7fe0d3d58000
</span><span class='line'> mmap(0x7fe0d3d5e000, 14864, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fe0d3d5e000
</span><span class='line'> close(3)                                = 0
</span><span class='line'> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fe0d3f3b000
</span><span class='line'> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fe0d3f3a000
</span><span class='line'> arch_prctl(ARCH_SET_FS, 0x7fe0d3f3b700) = 0
</span><span class='line'> mprotect(0x7fe0d3d58000, 16384, PROT_READ) = 0
</span><span class='line'> mprotect(0x60d000, 4096, PROT_READ)     = 0
</span><span class='line'> mprotect(0x7fe0d3f81000, 4096, PROT_READ) = 0
</span><span class='line'> munmap(0x7fe0d3f3d000, 274630)          = 0
</span><span class='line'> brk(0)                                  = 0x21df000
</span><span class='line'> brk(0x2200000)                          = 0x2200000
</span><span class='line'> open("/usr/lib/locale/locale-archive", O_RDONLY|O_CLOEXEC) = 3
</span><span class='line'> fstat(3, {st_mode=S_IFREG|0644, st_size=1863120, ...}) = 0
</span><span class='line'> mmap(NULL, 1863120, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fe0d37f1000
</span><span class='line'> close(3)                                = 0
</span><span class='line'> open("/etc/localtime", O_RDONLY|O_CLOEXEC) = 3
</span><span class='line'> fstat(3, {st_mode=S_IFREG|0644, st_size=714, ...}) = 0
</span><span class='line'> fstat(3, {st_mode=S_IFREG|0644, st_size=714, ...}) = 0
</span><span class='line'> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fe0d3f80000
</span><span class='line'> read(3, "TZif2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\3\0\0\0\3\0\0\0\0"..., 4096) = 714
</span><span class='line'> lseek(3, -438, SEEK_CUR)                = 276
</span><span class='line'> read(3, "TZif2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\3\0\0\0\3\0\0\0\0"..., 4096) = 438
</span><span class='line'> close(3)                                = 0
</span><span class='line'> munmap(0x7fe0d3f80000, 4096)            = 0
</span><span class='line'> fstat(1, {st_mode=S_IFCHR|0600, st_rdev=makedev(136, 2), ...}) = 0
</span><span class='line'> mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fe0d3f80000
</span><span class='line'> write(1, "Qui Dez 19 08:42:47 BRT 2013\n", 29Qui Dez 19 08:42:47 BRT 2013
</span><span class='line'> ) = 29
</span><span class='line'> close(1)                                = 0
</span><span class='line'> munmap(0x7fe0d3f80000, 4096)            = 0
</span><span class='line'> close(2)                                = 0
</span><span class='line'> exit_group(0)                           = ?
</span><span class='line'> +++ exited with 0 +++</span></code></pre></td></tr></table></div></figure>


<p><strong>O</strong> strace não é instalado por padrão em todas as distribuições, portanto é possível que você precise instalá-lo com o seu gerenciador de pacotes.</p>

<p><strong>A</strong>lém do uso regular, ele possui diversos parâmetros que podem melhorar ou filtrar o seu uso. Você pode verificar a lista de parâmetros em seu manual de uso:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ man strace</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sobre mim... Tarda mas não falha]]></title>
    <link href="http://kalib.github.io/blog/2013/12/16/sobre-mim-dot-dot-dot-tarda-mas-nao-falha/"/>
    <updated>2013-12-16T15:31:00-05:00</updated>
    <id>http://kalib.github.io/blog/2013/12/16/sobre-mim-dot-dot-dot-tarda-mas-nao-falha</id>
    <content type="html"><![CDATA[<p><strong>T</strong>arda, mas não falha&hellip; Reza o antigo ditado.</p>

<p><strong>D</strong>a mesma forma, digo-lhes que tardou, mas não falhou. Confesso que nunca parei para elaborar a página &ldquo;Sobre mim&rdquo; deste blog. O link existia no topo, mas sempre esteve &ldquo;Em construção&rdquo;. Preguiça? Falta de interesse? Esquecimento? Acho que um pouco de cada.</p>

<p><strong>H</strong>oje fui surpreendido por uma pessoa que acabou caindo no blog e em seguida me questionou sobre o porque de o blog já existir a tanto tempo e até hoje a página &ldquo;Sobre mim&rdquo; continuar contendo apenas as palavras &ldquo;Em construção&rdquo;.</p>

<p><strong>I</strong>sto me fez tomar vergonha na cara.. e hoje inseri conteúdo <a href="http://blog.marcelocavalcante.net/about/"> nesta página</a>.</p>

<p><strong>A</strong>gora sim&hellip; ;]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dica Rápida - Linux - Efeito de Texto Sendo Digitado? O pv Resolve]]></title>
    <link href="http://kalib.github.io/blog/2013/12/05/dica-rapida-linux-efeito-de-texto-sendo-digitado-o-pv-resolve/"/>
    <updated>2013-12-05T08:37:00-05:00</updated>
    <id>http://kalib.github.io/blog/2013/12/05/dica-rapida-linux-efeito-de-texto-sendo-digitado-o-pv-resolve</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://kalib.github.io/imgs/monitor.jpg" title="'Texto em Monitor'" >
<strong>C</strong>ertamente você já cansou de ver em filmes e/ou séries de TV cenas nas quais um monitor apresenta um texto que, aparentemente, está sendo digitado em tempo real. É claro que eles não possuem uma pessoa digitando aquele texto ou série de comandos no momento da gravação. Então, que tal aprender uma forma de fazer isto no Linux?</p>

<p><strong>O</strong> comando <em>pv</em> realiza perfeitamente este trabalho, podendo inclusive interagir com outros aplicativos e comandos.</p>

<p><strong>M</strong>ão na massa&hellip;</p>

<p><strong>A</strong>ntes de mais nada você precisará instalar o pv em sua distribuição. No Arch Linux, eu utilizo o pacman da forma convencional:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ sudo pacman -S pv</span></code></pre></td></tr></table></div></figure>


<p><strong>O</strong> pv está disponível nos repositórios de praticamente todas as distribuições, portanto utilize o gerenciador de pacotes de sua preferência para instalá-lo.</p>

<p><strong>A</strong> utilização é simples, bastando que você utilize algum comando que, de alguma forma, exponha algum texto na tela e em seguida redirecione esta saída para o pv. O pv possui diversos parâmetros, mas eu gosto particularmente de utilizar -qL, onde o <em>q</em> significa &ldquo;quiet&rdquo; e o <em>L</em> significa latência, em seguida insiro um valor para a latência. Vamos ao exemplo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ echo "Primeiro teste com pv" | pv -qL 20
</span><span class='line'> Primeiro teste com pv</span></code></pre></td></tr></table></div></figure>


<p><strong>S</strong>e você digitar o mesmo comando, verá que ele irá escrever o texto na tela de forma &ldquo;automática&rdquo;: &ldquo;Primeiro teste com pv&rdquo;.</p>

<p><strong>É</strong> claro, em uma gravação de Hollywood a linha na qual o comando foi passado não deveria aparecer, no caso: <em>[kalib@tuxcaverna ~]$ echo &ldquo;Primeiro teste com pv&rdquo; | pv -qL 20</em>. Que tal inserir um <em>clear</em> antes de nosso comando para limpar a tela antes da execução desejada?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ clear && echo "Primeiro teste com pv" | pv -qL 20</span></code></pre></td></tr></table></div></figure>


<p><strong>P</strong>erceba que desta vez o comando digitado não aparece na tela. A única informação que será exibida será <em>Primeiro teste com pv</em>.</p>

<p><strong>D</strong>iminuindo ou aumentando o valor da latência você diminuirá ou aumentará a velocidade de <em>digitação</em> do texto que você escolheu.</p>

<p><strong>C</strong>omo informei no início, você pode unir o pv com outros programas ou comandos. Que tal fazer com que um texto um pouco maior seja exibido?</p>

<p><strong>P</strong>ara este teste, eu criei um arquivo texto chamado <em>testepv</em>, conforme pode ser visto abaixo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ cat testepv
</span><span class='line'>
</span><span class='line'> Não obstante, a contínua expansão de nossa atividade oferece uma interessante oportunidade para verificação de todos os recursos funcionais envolvidos.
</span><span class='line'> A prática cotidiana prova que o desenvolvimento contínuo de distintas formas de atuação nos obriga à análise de alternativas às soluções ortodoxas.
</span><span class='line'> Por conseguinte, a competitividade nas transações comerciais estende o alcance e a importância da gestão inovadora da qual fazemos parte.</span></code></pre></td></tr></table></div></figure>


<p><strong>N</strong>este caso, o texto pode ser digitado <em>automaticamente</em> com o pv, da seguinte forma:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ clear && cat testepv | pv -qL 20</span></code></pre></td></tr></table></div></figure>


<p><strong>L</strong>egal? Que tal utilizarmos algo ainda melhor? Já ouviu falar no <em>figlet</em>? É outro comando/aplicativo Linux que muitas pessoas desconhecem. Comece instalando-o em seu sistema, caso você já não o possua. O figlet <em>desenha</em> o seu texto de uma forma um pouco mais <em>enfeitada</em>, se comparado ao puro <em>cat</em> ou <em>echo</em>. Exemplo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ figlet "Teste do Figlet"
</span><span class='line'>  _____         _             _         _____ _       _      _   
</span><span class='line'> |_   _|__  ___| |_ ___    __| | ___   |  ___(_) __ _| | ___| |_ 
</span><span class='line'>   | |/ _ \/ __| __/ _ \  / _` |/ _ \  | |_  | |/ _` | |/ _ \ __|
</span><span class='line'>   | |  __/\__ \ ||  __/ | (_| | (_) | |  _| | | (_| | |  __/ |_ 
</span><span class='line'>   |_|\___||___/\__\___|  \__,_|\___/  |_|   |_|\__, |_|\___|\__|
</span><span class='line'>                                                |___/            </span></code></pre></td></tr></table></div></figure>


<p><strong>N</strong>esse caso, vamos fazer com que o efeito <em>figlet</em> também pareça estar sendo digitado automaticamente e em tempo real:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ clear && figlet "Teste do Figlet" | pv -qL 30</span></code></pre></td></tr></table></div></figure>


<p><strong>R</strong>esultado interessante, certo? Da mesma forma, o pv pode ser utilizado com diversos outros aplicativos que trazem alguma saída no terminal, como o cowsay e muitos outros. A sua criatividade é o limite.</p>

<p><strong>H</strong>ave fun! \,,/_</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recomendação Bibliográfica - As Treze Relíquias]]></title>
    <link href="http://kalib.github.io/blog/2013/11/25/recomendacao-bibliografica-as-treze-reliquias/"/>
    <updated>2013-11-25T08:30:00-05:00</updated>
    <id>http://kalib.github.io/blog/2013/11/25/recomendacao-bibliografica-as-treze-reliquias</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://kalib.github.io/imgs/livros/astrezereliquias.jpg" title="'As Treze Relíquias'" >
<strong>S</strong>em sombra de dúvidas o livro superou minhas expectativas. Apesar de a sinopse passar a impressão de que se trata de mais um livro com temática sobrenatural voltado a um público mais jovem, a leitura revela o oposto. Certamente um livro que pode agradar diversas faixas etárias, trazendo foco no ocultismo, antigas religiões, artefatos mágicos, sexo e assassinatos com incrível crueldade, tudo isto em uma trama muito bem elaborada e descrita.</p>

<p><strong>P</strong>or se tratar de assuntos que gosto, o livro prendeu minha atenção desde o início, visto que os autores souberam mesclar bem os diferentes temas em uma história conexa e personagens interessantes.</p>

<p><strong>O</strong> fato de ser uma leitura bastante paralela, visto que acontecem muitas coisas ao mesmo tempo, torna o enredo mais atraente ainda, além de tornar a leitura mais rápida.</p>

<p><strong>S</strong>inopse retirada do site da Livraria Saraiva:</p>

<blockquote><p><em>Há mais de sete décadas treze crianças foram designadas para cuidar de artefatos antigos, dotados com um poder primitivo e letal. As relíquias, como foram chamadas, deveriam ser mantidas por seus guardiões em total segurança e afastadas umas das outras. Entretanto, agora um homem sinistro e sua amante estão atrás delas, roubando cada peça e eliminando seus protetores, deixando um rastro de crimes violentos. Aparentemente por acaso, a jovem Sarah Miller se envolverá nessa trama perigosa e terá que correr contra o tempo para elucidar os enigmas que rondam sua nova vida. Serão os guardiões seres de outro mundo? Qual será o segredo das relíquias milenares? Por que justamente Sarah foi atraída para esse jogo mortal? Uma história inquietante, povoada de lendas que até hoje rondam nosso imaginário, As treze relíquias mostra que há forças que nunca devem ser despertadas.</em></p></blockquote>

<p><strong>B</strong>oa leitura!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dica Rápida - Linux - Informações Sobre Arquivos com o Comando stat]]></title>
    <link href="http://kalib.github.io/blog/2013/11/22/dica-rapida-linux-informacoes-sobre-arquivos-com-o-comando-stat/"/>
    <updated>2013-11-22T08:22:00-05:00</updated>
    <id>http://kalib.github.io/blog/2013/11/22/dica-rapida-linux-informacoes-sobre-arquivos-com-o-comando-stat</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://kalib.github.io/imgs/information.png" title="'Information'" ></p>

<p><strong>Q</strong>ue os sistemas GNU/Linux possuem uma infinidade de comandos todo mundo sabe, o que nem todos conhecem, na verdade, são alguns comandos simples porém eficientes e importantes. Um deles é justamente o <em>stat</em>.</p>

<p><strong>Q</strong>uando se está em frente ao terminal de um servidor que não possui interface gráfica, tudo o que está a nossa disposição são as ferramentas de linha de comando, portanto é bom conhecer uma boa variedade das mesmas, desde ferramentas para tarefas complexas até ferramentas para as atividades mais simples e banais.</p>

<p><strong>A</strong> dica que deixo hoje é uma ferramenta que muitas pessoas desconhecem: <em>stat</em></p>

<p><strong>O</strong> stat serve para apresentar as informações de status de um arquivo ou sistema de arquivos. Ele apresenta uma série de informações sobre o arquivo que você informar como argumento. Dentre as informações estão o <em>Tamanho</em>, <em>Blocos</em>, <em>Permissões de Acesso</em>, <em>Data e Hora de último acesso</em>, <em>Data e Hora de última modificação</em>, etc.</p>

<p><strong>O</strong> uso é simples, bastando digitar: <em>stat &lt;caminho_do_arquivo_ou_sistema_de_arquivos></em>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ stat testdisk.log 
</span><span class='line'>  File: “testdisk.log”
</span><span class='line'>  Size: 102478          Blocks: 208        IO Block: 4096   arquivo comum
</span><span class='line'> Device: 804h/2052d      Inode: 27001862    Links: 1
</span><span class='line'> Access: (0644/-rw-r--r--)  Uid: ( 1000/   kalib)   Gid: (  100/   users)
</span><span class='line'> Access: 2013-11-11 11:31:34.360892496 -0300
</span><span class='line'> Modify: 2011-05-10 09:48:46.000000000 -0300
</span><span class='line'> Change: 2011-05-11 15:01:29.019407886 -0300
</span><span class='line'> Birth: -</span></code></pre></td></tr></table></div></figure>


<p>ou</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ stat /dev/sda1 
</span><span class='line'>  File: “/dev/sda1”
</span><span class='line'>  Size: 0               Blocks: 0          IO Block: 4096   arquivo especial de bloco
</span><span class='line'> Device: 5h/5d   Inode: 7253        Links: 1     Device type: 8,1
</span><span class='line'> Access: (0660/brw-rw----)  Uid: (    0/    root)   Gid: (    6/    disk)
</span><span class='line'> Access: 2013-11-22 08:01:39.246618958 -0300
</span><span class='line'> Modify: 2013-11-22 08:01:39.246618958 -0300
</span><span class='line'> Change: 2013-11-22 08:01:39.246618958 -0300
</span><span class='line'> Birth: -</span></code></pre></td></tr></table></div></figure>


<p><strong>H</strong>ave fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dica Rápida - Linux - Como Não Deixar Rastros no History]]></title>
    <link href="http://kalib.github.io/blog/2013/11/07/dica-rapida-linux-como-nao-deixar-rastros-no-history/"/>
    <updated>2013-11-07T08:16:00-05:00</updated>
    <id>http://kalib.github.io/blog/2013/11/07/dica-rapida-linux-como-nao-deixar-rastros-no-history</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://kalib.github.io/imgs/shhh.jpg" title="'Shhhh'" ></p>

<p><strong>S</strong>hhhhhhh&hellip;.</p>

<p><strong>Q</strong>ue tal digitar seus comandos em uma máquina Linux sem que os mesmos sejam registrados no <em>history</em> do sistema?</p>

<p><strong>O</strong> history é responsável por armazenar um histórico dos últimos comandos digitados no sistema. Por exemplo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ history
</span><span class='line'>    1  ls
</span><span class='line'>    2  mkdir pc
</span><span class='line'>    3  cd pc/
</span><span class='line'>    4  ls
</span><span class='line'>    5  mkdir pc2
</span><span class='line'>    6  ls
</span><span class='line'>    7  touch ps2/teste
</span><span class='line'>    8  ls
</span><span class='line'>    9  touch /
</span><span class='line'>    ...
</span><span class='line'>    ...
</span><span class='line'>    496  route
</span><span class='line'>    497  ifconfig
</span><span class='line'>    498  cat teste 
</span><span class='line'>    499  ls
</span><span class='line'>    500  history</span></code></pre></td></tr></table></div></figure>


<p><strong>C</strong>omo podemos ver, o history me retornou um histórico dos meus últimos 500 comandos, incluindo o próprio comando <em>history</em>, que acabei de digitar.</p>

<p><strong>V</strong>ejamos o registro de novos comandos:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ echo "Teste"
</span><span class='line'> Teste
</span><span class='line'> [kalib@tuxcaverna ~]$ echo "Registra isso history"
</span><span class='line'> Registra isso history
</span><span class='line'> [kalib@tuxcaverna ~]$ history
</span><span class='line'> ...
</span><span class='line'> ...
</span><span class='line'> 501  echo "Teste"
</span><span class='line'> 502  echo "Registra isso history"
</span><span class='line'> 503  history</span></code></pre></td></tr></table></div></figure>


<p><strong>E</strong>ntão, como não deixar registros no history? Utilizaremos os comandos <em>cat</em> e <em>bash</em> para isto:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [kalib@tuxcaverna ~]$ cat | bash
</span><span class='line'> pwd
</span><span class='line'> /home/kalib
</span><span class='line'> 
</span><span class='line'> df -h
</span><span class='line'> Sist. Arq.      Tam. Usado Disp. Uso% Montado em
</span><span class='line'> /dev/sda3        30G   19G  9,3G  67% /
</span><span class='line'> dev             2,9G     0  2,9G   0% /dev
</span><span class='line'> run             2,9G  860K  2,9G   1% /run
</span><span class='line'> tmpfs           2,9G     0  2,9G   0% /dev/shm
</span><span class='line'> tmpfs           2,9G     0  2,9G   0% /sys/fs/cgroup
</span><span class='line'> tmpfs           2,9G  108K  2,9G   1% /tmp
</span><span class='line'> /dev/sda1        99M   23M   69M  25% /boot
</span><span class='line'> /dev/sda4       427G  305G  101G  76% /home
</span><span class='line'> 
</span><span class='line'> cd testes
</span><span class='line'> 
</span><span class='line'> pwd
</span><span class='line'> /home/kalib/testes</span></code></pre></td></tr></table></div></figure>


<p><strong>S</strong>imples, não?</p>

<p><strong>H</strong>appy hacking&hellip;</p>
]]></content>
  </entry>
  
</feed>
